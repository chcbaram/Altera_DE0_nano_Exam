
NiosII.elf:     file format elf32-littlenios2
NiosII.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010240

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000056f4 memsz 0x000056f4 flags r-x
    LOAD off    0x00006714 vaddr 0x00015714 paddr 0x00017180 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008bec vaddr 0x00018bec paddr 0x00018bec align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005484  00010240  00010240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000156c4  000156c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00015714  00017180  00006714  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018bec  00018bec  00008bec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00018d40  00018d40  00008180  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008180  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  000081a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016380  00000000  00000000  00008bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f5a  00000000  00000000  0001ef58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000067ec  00000000  00000000  00024eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001564  00000000  00000000  0002b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002651  00000000  00000000  0002cc04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004730  00000000  00000000  0002f255  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033988  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d8  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000364b9  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000364bc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000364c8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000364c9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000364ca  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000364d5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000364e0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000364eb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  000364f1  2**0
                  CONTENTS, READONLY
 26 .jdi          000045ac  00000000  00000000  00036521  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032b3b  00000000  00000000  0003aacd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010240 l    d  .text	00000000 .text
000156c4 l    d  .rodata	00000000 .rodata
00015714 l    d  .rwdata	00000000 .rwdata
00018bec l    d  .bss	00000000 .bss
00018d40 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NiosII_bsp//obj/HAL/src/crt0.o
00010288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00015714 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011dd0 l     F .text	00000008 __fp_lock
00011dd8 l     F .text	00000008 __fp_unlock
00011dec l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00012e3c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00012f68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013088 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000130b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000131b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000132a8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001338c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013568 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017170 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000137c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001390c l     F .text	00000038 alt_dev_reg
000160e8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013be4 l     F .text	00000204 altera_avalon_jtag_uart_irq
00013de8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001458c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014a38 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014b70 l     F .text	00000050 alt_get_errno
00014bc0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018c14 g     O .bss	00000004 alt_instruction_exception_handler
00012d30 g     F .text	00000054 _isatty_r
000134b0 g     F .text	00000078 alt_main
000102f4 g     F .text	000000a8 _puts_r
00018c40 g     O .bss	00000100 alt_irq
00012d84 g     F .text	0000005c _lseek_r
00017180 g       *ABS*	00000000 __flash_rwdata_start
00018d40 g       *ABS*	00000000 __alt_heap_start
00012ac0 g     F .text	0000005c __sseek
00012120 g     F .text	00000010 __sinit
00011f88 g     F .text	00000068 __sfmoreglue
00013548 g     F .text	00000020 __malloc_unlock
000112d0 g     F .text	0000015c memmove
00012108 g     F .text	00000018 _cleanup
00014f80 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012cd8 g     F .text	00000058 _fstat_r
00018bf8 g     O .bss	00000004 errno
00012a3c g     F .text	00000008 __seofread
00018c00 g     O .bss	00000004 alt_argv
0001f148 g       *ABS*	00000000 _gp
00015f68 g     O .rwdata	00000180 alt_fd_list
00014fa0 g     F .text	00000090 alt_find_dev
00011198 g     F .text	00000138 memcpy
00011de0 g     F .text	0000000c _cleanup_r
00014af8 g     F .text	00000078 alt_io_redirect
000156c4 g       *ABS*	00000000 __DTOR_END__
0001039c g     F .text	00000014 puts
00015284 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013fe4 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00012f58 g     F .text	00000008 .hidden __udivsi3
00013204 g     F .text	000000a4 isatty
000151f8 g     F .text	0000008c alt_icache_flush
00018bf4 g     O .bss	00000004 __malloc_top_pad
00010448 g     F .text	000004c0 __sfvwrite_r
00011994 g     F .text	00000054 _sbrk_r
00012de0 g     F .text	0000005c _read_r
00017168 g     O .rwdata	00000004 alt_max_fd
00012bd4 g     F .text	000000f0 _fclose_r
00011da0 g     F .text	00000030 fflush
00018bf0 g     O .bss	00000004 __malloc_max_sbrked_mem
000133dc g     F .text	000000d4 lseek
00017148 g     O .rwdata	00000004 _global_impure_ptr
0001142c g     F .text	00000568 _realloc_r
00018d40 g       *ABS*	00000000 __bss_end
00014948 g     F .text	000000f0 alt_iic_isr_register
00014e7c g     F .text	00000104 alt_tick
00012140 g     F .text	00000018 __fp_lock_all
000148fc g     F .text	0000004c alt_ic_irq_enabled
00014de4 g     F .text	00000098 alt_alarm_stop
00018c08 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d0 alt_irq_handler
00015f40 g     O .rwdata	00000028 alt_dev_null
00014548 g     F .text	00000044 alt_dcache_flush_all
00017180 g       *ABS*	00000000 __ram_rwdata_end
00017160 g     O .rwdata	00000008 alt_dev_list
00013814 g     F .text	000000f8 write
00015714 g       *ABS*	00000000 __ram_rodata_end
00013104 g     F .text	000000b0 fstat
00012f60 g     F .text	00000008 .hidden __umodsi3
00018d40 g       *ABS*	00000000 end
00013b20 g     F .text	000000c4 altera_avalon_jtag_uart_init
000101cc g     F .exceptions	00000074 alt_instruction_exception_entry
000156c4 g       *ABS*	00000000 __CTOR_LIST__
0001bb80 g       *ABS*	00000000 __alt_stack_pointer
000141f0 g     F .text	00000218 altera_avalon_jtag_uart_write
00012130 g     F .text	00000004 __sfp_lock_acquire
000110b0 g     F .text	000000e8 memchr
00012294 g     F .text	000002f0 _free_r
000154fc g     F .text	00000194 __call_exitprocs
00017150 g     O .rwdata	00000004 __malloc_sbrk_base
00010240 g     F .text	0000004c _start
00018c0c g     O .bss	00000004 _alt_tick_rate
00018c10 g     O .bss	00000004 _alt_nticks
000135b8 g     F .text	000000fc read
00013978 g     F .text	00000044 alt_sys_init
000153e8 g     F .text	00000114 __register_exitproc
00013e90 g     F .text	00000068 altera_avalon_jtag_uart_close
00015714 g       *ABS*	00000000 __ram_rwdata_start
000156c4 g       *ABS*	00000000 __ram_rodata_start
00018c18 g     O .bss	00000028 __malloc_current_mallinfo
000139bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015144 g     F .text	000000b4 alt_get_fd
00012b80 g     F .text	00000054 _close_r
0001536c g     F .text	0000007c memcmp
00013a7c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018d40 g       *ABS*	00000000 __alt_stack_base
00013acc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000119e8 g     F .text	00000154 __swsetup_r
00011ff0 g     F .text	00000118 __sfp
00015b38 g     O .rwdata	00000408 __malloc_av_
0001213c g     F .text	00000004 __sinit_lock_release
000129e8 g     F .text	00000054 __sread
00015030 g     F .text	00000114 alt_find_file
000145dc g     F .text	000000a4 alt_dev_llist_insert
00013528 g     F .text	00000020 __malloc_lock
00013714 g     F .text	000000b0 sbrk
00011d44 g     F .text	0000005c _fflush_r
00018bec g       *ABS*	00000000 __bss_start
000128c4 g     F .text	00000124 memset
0001028c g     F .text	00000068 main
00018c04 g     O .bss	00000004 alt_envp
00018bec g     O .bss	00000004 __malloc_max_total_mem
00013a1c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012b1c g     F .text	00000008 __sclose
0001bb80 g       *ABS*	00000000 __alt_heap_limit
00012cc4 g     F .text	00000014 fclose
00010908 g     F .text	000007a8 _malloc_r
0001716c g     O .rwdata	00000004 alt_errno
00012584 g     F .text	000000c4 _fwalk
00012ea8 g     F .text	00000054 .hidden __divsi3
00012170 g     F .text	00000124 _malloc_trim_r
000156c4 g       *ABS*	00000000 __CTOR_END__
000156c4 g       *ABS*	00000000 __flash_rodata_start
000156c4 g       *ABS*	00000000 __DTOR_LIST__
00013944 g     F .text	00000034 alt_irq_init
000136b4 g     F .text	00000060 alt_release_fd
00015320 g     F .text	00000014 atexit
00012b24 g     F .text	0000005c _write_r
0001714c g     O .rwdata	00000004 _impure_ptr
00018bfc g     O .bss	00000004 alt_argc
00011b3c g     F .text	00000208 __sflush_r
000146dc g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012158 g     F .text	00000018 __fp_unlock_all
00017158 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014768 g     F .text	00000050 alt_ic_isr_register
00017180 g       *ABS*	00000000 _edata
00018d40 g       *ABS*	00000000 _end
00010240 g       *ABS*	00000000 __ram_exceptions_end
00013ef8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00014858 g     F .text	000000a4 alt_ic_irq_disable
00012a44 g     F .text	0000007c __swrite
00017154 g     O .rwdata	00000004 __malloc_trim_threshold
00015334 g     F .text	00000038 exit
00012648 g     F .text	000000c4 _fwalk_reent
00012efc g     F .text	0000005c .hidden __modsi3
0001bb80 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012134 g     F .text	00000004 __sfp_lock_release
00015690 g     F .text	00000034 _exit
00014408 g     F .text	00000140 alt_alarm_start
0001270c g     F .text	000001b8 __smakebuf_r
000103b0 g     F .text	00000098 strlen
00014c8c g     F .text	00000158 open
00014738 g     F .text	00000030 alt_icache_flush_all
00017174 g     O .rwdata	00000004 alt_priority_mask
000147b8 g     F .text	000000a0 alt_ic_irq_enable
00017178 g     O .rwdata	00000008 alt_alarm_list
00014680 g     F .text	0000005c _do_ctors
00012fb8 g     F .text	000000d0 close
0001330c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00012138 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff0ebc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409014 	ori	at,at,576
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a31004 	addi	r2,r2,-29632
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a31004 	addi	r2,r2,-29632
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	21000104 	addi	r4,r4,4
   10168:	1105883a 	add	r2,r2,r4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff0fe4>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff0fd8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e0:	000531fa 	rdctl	r2,exception
   101e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101e8:	e0bffd17 	ldw	r2,-12(fp)
   101ec:	10801f0c 	andi	r2,r2,124
   101f0:	1004d0ba 	srli	r2,r2,2
   101f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101f8:	0005333a 	rdctl	r2,badaddr
   101fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10200:	d0a6b317 	ldw	r2,-25908(gp)
   10204:	10000726 	beq	r2,zero,10224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10208:	d0a6b317 	ldw	r2,-25908(gp)
   1020c:	e0fffd17 	ldw	r3,-12(fp)
   10210:	1809883a 	mov	r4,r3
   10214:	e17fff17 	ldw	r5,-4(fp)
   10218:	e1bffe17 	ldw	r6,-8(fp)
   1021c:	103ee83a 	callr	r2
   10220:	00000206 	br	1022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10228:	0005883a 	mov	r2,zero
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

Disassembly of section .text:

00010240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1024c:	00bffd16 	blt	zero,r2,10244 <_gp+0xffff10fc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10250:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10254:	deeee014 	ori	sp,sp,48000
    movhi gp, %hi(_gp)
   10258:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1025c:	d6bc5214 	ori	gp,gp,61768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10260:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10264:	10a2fb14 	ori	r2,r2,35820

    movhi r3, %hi(__bss_end)
   10268:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1026c:	18e35014 	ori	r3,r3,36160

    beq r2, r3, 1f
   10270:	10c00326 	beq	r2,r3,10280 <_start+0x40>

0:
    stw zero, (r2)
   10274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1027c:	10fffd36 	bltu	r2,r3,10274 <_gp+0xffff112c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10280:	001330c0 	call	1330c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10284:	00134b00 	call	134b0 <alt_main>

00010288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10288:	003fff06 	br	10288 <_gp+0xffff1140>

0001028c <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
   1028c:	defffc04 	addi	sp,sp,-16
   10290:	dfc00315 	stw	ra,12(sp)
   10294:	df000215 	stw	fp,8(sp)
   10298:	df000204 	addi	fp,sp,8
	int count = 0;
   1029c:	e03ffe15 	stw	zero,-8(fp)
	int delay;

	printf("Hello from Nios II!\n");
   102a0:	01000074 	movhi	r4,1
   102a4:	2115b104 	addi	r4,r4,22212
   102a8:	001039c0 	call	1039c <puts>
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count & 0x03);
   102ac:	e0bffe17 	ldw	r2,-8(fp)
   102b0:	10c000cc 	andi	r3,r2,3
   102b4:	008000b4 	movhi	r2,2
   102b8:	10840404 	addi	r2,r2,4112
   102bc:	10c00035 	stwio	r3,0(r2)
		delay = 0;
   102c0:	e03fff15 	stw	zero,-4(fp)
		while(delay < 2000000)
   102c4:	00000306 	br	102d4 <main+0x48>
		{
			delay++;
   102c8:	e0bfff17 	ldw	r2,-4(fp)
   102cc:	10800044 	addi	r2,r2,1
   102d0:	e0bfff15 	stw	r2,-4(fp)
	printf("Hello from Nios II!\n");
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count & 0x03);
		delay = 0;
		while(delay < 2000000)
   102d4:	e0ffff17 	ldw	r3,-4(fp)
   102d8:	008007f4 	movhi	r2,31
   102dc:	10a11fc4 	addi	r2,r2,-31617
   102e0:	10fff90e 	bge	r2,r3,102c8 <_gp+0xffff1180>
		{
			delay++;
		}
		count++;
   102e4:	e0bffe17 	ldw	r2,-8(fp)
   102e8:	10800044 	addi	r2,r2,1
   102ec:	e0bffe15 	stw	r2,-8(fp)
	}
   102f0:	003fee06 	br	102ac <_gp+0xffff1164>

000102f4 <_puts_r>:
   102f4:	defff604 	addi	sp,sp,-40
   102f8:	dc000715 	stw	r16,28(sp)
   102fc:	2021883a 	mov	r16,r4
   10300:	2809883a 	mov	r4,r5
   10304:	dc400815 	stw	r17,32(sp)
   10308:	dfc00915 	stw	ra,36(sp)
   1030c:	2823883a 	mov	r17,r5
   10310:	00103b00 	call	103b0 <strlen>
   10314:	81400217 	ldw	r5,8(r16)
   10318:	11000044 	addi	r4,r2,1
   1031c:	d8800115 	stw	r2,4(sp)
   10320:	00800074 	movhi	r2,1
   10324:	2980030b 	ldhu	r6,12(r5)
   10328:	1095b604 	addi	r2,r2,22232
   1032c:	d8800215 	stw	r2,8(sp)
   10330:	00800044 	movi	r2,1
   10334:	d8800315 	stw	r2,12(sp)
   10338:	00800084 	movi	r2,2
   1033c:	d8800515 	stw	r2,20(sp)
   10340:	dc400015 	stw	r17,0(sp)
   10344:	d9000615 	stw	r4,24(sp)
   10348:	dec00415 	stw	sp,16(sp)
   1034c:	3088000c 	andi	r2,r6,8192
   10350:	1000061e 	bne	r2,zero,1036c <_puts_r+0x78>
   10354:	29001917 	ldw	r4,100(r5)
   10358:	00b7ffc4 	movi	r2,-8193
   1035c:	31880014 	ori	r6,r6,8192
   10360:	2084703a 	and	r2,r4,r2
   10364:	2980030d 	sth	r6,12(r5)
   10368:	28801915 	stw	r2,100(r5)
   1036c:	8009883a 	mov	r4,r16
   10370:	d9800404 	addi	r6,sp,16
   10374:	00104480 	call	10448 <__sfvwrite_r>
   10378:	1000061e 	bne	r2,zero,10394 <_puts_r+0xa0>
   1037c:	00800284 	movi	r2,10
   10380:	dfc00917 	ldw	ra,36(sp)
   10384:	dc400817 	ldw	r17,32(sp)
   10388:	dc000717 	ldw	r16,28(sp)
   1038c:	dec00a04 	addi	sp,sp,40
   10390:	f800283a 	ret
   10394:	00bfffc4 	movi	r2,-1
   10398:	003ff906 	br	10380 <_gp+0xffff1238>

0001039c <puts>:
   1039c:	00800074 	movhi	r2,1
   103a0:	109c5304 	addi	r2,r2,29004
   103a4:	200b883a 	mov	r5,r4
   103a8:	11000017 	ldw	r4,0(r2)
   103ac:	00102f41 	jmpi	102f4 <_puts_r>

000103b0 <strlen>:
   103b0:	208000cc 	andi	r2,r4,3
   103b4:	10002026 	beq	r2,zero,10438 <strlen+0x88>
   103b8:	20800007 	ldb	r2,0(r4)
   103bc:	10002026 	beq	r2,zero,10440 <strlen+0x90>
   103c0:	2005883a 	mov	r2,r4
   103c4:	00000206 	br	103d0 <strlen+0x20>
   103c8:	10c00007 	ldb	r3,0(r2)
   103cc:	18001826 	beq	r3,zero,10430 <strlen+0x80>
   103d0:	10800044 	addi	r2,r2,1
   103d4:	10c000cc 	andi	r3,r2,3
   103d8:	183ffb1e 	bne	r3,zero,103c8 <_gp+0xffff1280>
   103dc:	10c00017 	ldw	r3,0(r2)
   103e0:	01ffbff4 	movhi	r7,65279
   103e4:	39ffbfc4 	addi	r7,r7,-257
   103e8:	00ca303a 	nor	r5,zero,r3
   103ec:	01a02074 	movhi	r6,32897
   103f0:	19c7883a 	add	r3,r3,r7
   103f4:	31a02004 	addi	r6,r6,-32640
   103f8:	1946703a 	and	r3,r3,r5
   103fc:	1986703a 	and	r3,r3,r6
   10400:	1800091e 	bne	r3,zero,10428 <strlen+0x78>
   10404:	10800104 	addi	r2,r2,4
   10408:	10c00017 	ldw	r3,0(r2)
   1040c:	19cb883a 	add	r5,r3,r7
   10410:	00c6303a 	nor	r3,zero,r3
   10414:	28c6703a 	and	r3,r5,r3
   10418:	1986703a 	and	r3,r3,r6
   1041c:	183ff926 	beq	r3,zero,10404 <_gp+0xffff12bc>
   10420:	00000106 	br	10428 <strlen+0x78>
   10424:	10800044 	addi	r2,r2,1
   10428:	10c00007 	ldb	r3,0(r2)
   1042c:	183ffd1e 	bne	r3,zero,10424 <_gp+0xffff12dc>
   10430:	1105c83a 	sub	r2,r2,r4
   10434:	f800283a 	ret
   10438:	2005883a 	mov	r2,r4
   1043c:	003fe706 	br	103dc <_gp+0xffff1294>
   10440:	0005883a 	mov	r2,zero
   10444:	f800283a 	ret

00010448 <__sfvwrite_r>:
   10448:	30800217 	ldw	r2,8(r6)
   1044c:	10006726 	beq	r2,zero,105ec <__sfvwrite_r+0x1a4>
   10450:	defff404 	addi	sp,sp,-48
   10454:	dd000615 	stw	r20,24(sp)
   10458:	2029883a 	mov	r20,r4
   1045c:	2900030b 	ldhu	r4,12(r5)
   10460:	ddc00915 	stw	r23,36(sp)
   10464:	dc000215 	stw	r16,8(sp)
   10468:	dfc00b15 	stw	ra,44(sp)
   1046c:	df000a15 	stw	fp,40(sp)
   10470:	dd800815 	stw	r22,32(sp)
   10474:	dd400715 	stw	r21,28(sp)
   10478:	dcc00515 	stw	r19,20(sp)
   1047c:	dc800415 	stw	r18,16(sp)
   10480:	dc400315 	stw	r17,12(sp)
   10484:	2080020c 	andi	r2,r4,8
   10488:	2821883a 	mov	r16,r5
   1048c:	302f883a 	mov	r23,r6
   10490:	10002726 	beq	r2,zero,10530 <__sfvwrite_r+0xe8>
   10494:	28800417 	ldw	r2,16(r5)
   10498:	10002526 	beq	r2,zero,10530 <__sfvwrite_r+0xe8>
   1049c:	2080008c 	andi	r2,r4,2
   104a0:	bc400017 	ldw	r17,0(r23)
   104a4:	10002a26 	beq	r2,zero,10550 <__sfvwrite_r+0x108>
   104a8:	05600034 	movhi	r21,32768
   104ac:	0027883a 	mov	r19,zero
   104b0:	0025883a 	mov	r18,zero
   104b4:	ad7f0004 	addi	r21,r21,-1024
   104b8:	980d883a 	mov	r6,r19
   104bc:	a009883a 	mov	r4,r20
   104c0:	90004626 	beq	r18,zero,105dc <__sfvwrite_r+0x194>
   104c4:	900f883a 	mov	r7,r18
   104c8:	81400717 	ldw	r5,28(r16)
   104cc:	ac80022e 	bgeu	r21,r18,104d8 <__sfvwrite_r+0x90>
   104d0:	01e00034 	movhi	r7,32768
   104d4:	39ff0004 	addi	r7,r7,-1024
   104d8:	80800917 	ldw	r2,36(r16)
   104dc:	103ee83a 	callr	r2
   104e0:	0080520e 	bge	zero,r2,1062c <__sfvwrite_r+0x1e4>
   104e4:	b8c00217 	ldw	r3,8(r23)
   104e8:	98a7883a 	add	r19,r19,r2
   104ec:	90a5c83a 	sub	r18,r18,r2
   104f0:	1885c83a 	sub	r2,r3,r2
   104f4:	b8800215 	stw	r2,8(r23)
   104f8:	103fef1e 	bne	r2,zero,104b8 <_gp+0xffff1370>
   104fc:	0005883a 	mov	r2,zero
   10500:	dfc00b17 	ldw	ra,44(sp)
   10504:	df000a17 	ldw	fp,40(sp)
   10508:	ddc00917 	ldw	r23,36(sp)
   1050c:	dd800817 	ldw	r22,32(sp)
   10510:	dd400717 	ldw	r21,28(sp)
   10514:	dd000617 	ldw	r20,24(sp)
   10518:	dcc00517 	ldw	r19,20(sp)
   1051c:	dc800417 	ldw	r18,16(sp)
   10520:	dc400317 	ldw	r17,12(sp)
   10524:	dc000217 	ldw	r16,8(sp)
   10528:	dec00c04 	addi	sp,sp,48
   1052c:	f800283a 	ret
   10530:	a009883a 	mov	r4,r20
   10534:	800b883a 	mov	r5,r16
   10538:	00119e80 	call	119e8 <__swsetup_r>
   1053c:	1000ec1e 	bne	r2,zero,108f0 <__sfvwrite_r+0x4a8>
   10540:	8100030b 	ldhu	r4,12(r16)
   10544:	bc400017 	ldw	r17,0(r23)
   10548:	2080008c 	andi	r2,r4,2
   1054c:	103fd61e 	bne	r2,zero,104a8 <_gp+0xffff1360>
   10550:	2080004c 	andi	r2,r4,1
   10554:	10003a1e 	bne	r2,zero,10640 <__sfvwrite_r+0x1f8>
   10558:	0039883a 	mov	fp,zero
   1055c:	0025883a 	mov	r18,zero
   10560:	90001a26 	beq	r18,zero,105cc <__sfvwrite_r+0x184>
   10564:	2080800c 	andi	r2,r4,512
   10568:	85800217 	ldw	r22,8(r16)
   1056c:	10007626 	beq	r2,zero,10748 <__sfvwrite_r+0x300>
   10570:	b027883a 	mov	r19,r22
   10574:	95809436 	bltu	r18,r22,107c8 <__sfvwrite_r+0x380>
   10578:	2081200c 	andi	r2,r4,1152
   1057c:	10009f1e 	bne	r2,zero,107fc <__sfvwrite_r+0x3b4>
   10580:	81000017 	ldw	r4,0(r16)
   10584:	e00b883a 	mov	r5,fp
   10588:	980d883a 	mov	r6,r19
   1058c:	00112d00 	call	112d0 <memmove>
   10590:	81000217 	ldw	r4,8(r16)
   10594:	81400017 	ldw	r5,0(r16)
   10598:	9005883a 	mov	r2,r18
   1059c:	2587c83a 	sub	r3,r4,r22
   105a0:	2ce7883a 	add	r19,r5,r19
   105a4:	80c00215 	stw	r3,8(r16)
   105a8:	84c00015 	stw	r19,0(r16)
   105ac:	b8c00217 	ldw	r3,8(r23)
   105b0:	e0b9883a 	add	fp,fp,r2
   105b4:	90a5c83a 	sub	r18,r18,r2
   105b8:	1885c83a 	sub	r2,r3,r2
   105bc:	b8800215 	stw	r2,8(r23)
   105c0:	103fce26 	beq	r2,zero,104fc <_gp+0xffff13b4>
   105c4:	8100030b 	ldhu	r4,12(r16)
   105c8:	903fe61e 	bne	r18,zero,10564 <_gp+0xffff141c>
   105cc:	8f000017 	ldw	fp,0(r17)
   105d0:	8c800117 	ldw	r18,4(r17)
   105d4:	8c400204 	addi	r17,r17,8
   105d8:	003fe106 	br	10560 <_gp+0xffff1418>
   105dc:	8cc00017 	ldw	r19,0(r17)
   105e0:	8c800117 	ldw	r18,4(r17)
   105e4:	8c400204 	addi	r17,r17,8
   105e8:	003fb306 	br	104b8 <_gp+0xffff1370>
   105ec:	0005883a 	mov	r2,zero
   105f0:	f800283a 	ret
   105f4:	00a00034 	movhi	r2,32768
   105f8:	10bfffc4 	addi	r2,r2,-1
   105fc:	9009883a 	mov	r4,r18
   10600:	1480012e 	bgeu	r2,r18,10608 <__sfvwrite_r+0x1c0>
   10604:	1009883a 	mov	r4,r2
   10608:	980b883a 	mov	r5,r19
   1060c:	0012ea80 	call	12ea8 <__divsi3>
   10610:	81400717 	ldw	r5,28(r16)
   10614:	80c00917 	ldw	r3,36(r16)
   10618:	988f383a 	mul	r7,r19,r2
   1061c:	a009883a 	mov	r4,r20
   10620:	e00d883a 	mov	r6,fp
   10624:	183ee83a 	callr	r3
   10628:	00bfe016 	blt	zero,r2,105ac <_gp+0xffff1464>
   1062c:	8080030b 	ldhu	r2,12(r16)
   10630:	10801014 	ori	r2,r2,64
   10634:	8080030d 	sth	r2,12(r16)
   10638:	00bfffc4 	movi	r2,-1
   1063c:	003fb006 	br	10500 <_gp+0xffff13b8>
   10640:	0027883a 	mov	r19,zero
   10644:	0011883a 	mov	r8,zero
   10648:	0039883a 	mov	fp,zero
   1064c:	0025883a 	mov	r18,zero
   10650:	90001f26 	beq	r18,zero,106d0 <__sfvwrite_r+0x288>
   10654:	40006026 	beq	r8,zero,107d8 <__sfvwrite_r+0x390>
   10658:	982b883a 	mov	r21,r19
   1065c:	94c0012e 	bgeu	r18,r19,10664 <__sfvwrite_r+0x21c>
   10660:	902b883a 	mov	r21,r18
   10664:	81000017 	ldw	r4,0(r16)
   10668:	80800417 	ldw	r2,16(r16)
   1066c:	a82d883a 	mov	r22,r21
   10670:	81800217 	ldw	r6,8(r16)
   10674:	81c00517 	ldw	r7,20(r16)
   10678:	1100022e 	bgeu	r2,r4,10684 <__sfvwrite_r+0x23c>
   1067c:	31c7883a 	add	r3,r6,r7
   10680:	1d401816 	blt	r3,r21,106e4 <__sfvwrite_r+0x29c>
   10684:	a9c04416 	blt	r21,r7,10798 <__sfvwrite_r+0x350>
   10688:	80800917 	ldw	r2,36(r16)
   1068c:	81400717 	ldw	r5,28(r16)
   10690:	a009883a 	mov	r4,r20
   10694:	da000115 	stw	r8,4(sp)
   10698:	e00d883a 	mov	r6,fp
   1069c:	103ee83a 	callr	r2
   106a0:	102d883a 	mov	r22,r2
   106a4:	da000117 	ldw	r8,4(sp)
   106a8:	00bfe00e 	bge	zero,r2,1062c <_gp+0xffff14e4>
   106ac:	9da7c83a 	sub	r19,r19,r22
   106b0:	98001f26 	beq	r19,zero,10730 <__sfvwrite_r+0x2e8>
   106b4:	b8800217 	ldw	r2,8(r23)
   106b8:	e5b9883a 	add	fp,fp,r22
   106bc:	95a5c83a 	sub	r18,r18,r22
   106c0:	15adc83a 	sub	r22,r2,r22
   106c4:	bd800215 	stw	r22,8(r23)
   106c8:	b03f8c26 	beq	r22,zero,104fc <_gp+0xffff13b4>
   106cc:	903fe11e 	bne	r18,zero,10654 <_gp+0xffff150c>
   106d0:	8f000017 	ldw	fp,0(r17)
   106d4:	8c800117 	ldw	r18,4(r17)
   106d8:	0011883a 	mov	r8,zero
   106dc:	8c400204 	addi	r17,r17,8
   106e0:	003fdb06 	br	10650 <_gp+0xffff1508>
   106e4:	180d883a 	mov	r6,r3
   106e8:	e00b883a 	mov	r5,fp
   106ec:	da000115 	stw	r8,4(sp)
   106f0:	d8c00015 	stw	r3,0(sp)
   106f4:	00112d00 	call	112d0 <memmove>
   106f8:	d8c00017 	ldw	r3,0(sp)
   106fc:	80800017 	ldw	r2,0(r16)
   10700:	a009883a 	mov	r4,r20
   10704:	800b883a 	mov	r5,r16
   10708:	10c5883a 	add	r2,r2,r3
   1070c:	80800015 	stw	r2,0(r16)
   10710:	d8c00015 	stw	r3,0(sp)
   10714:	0011d440 	call	11d44 <_fflush_r>
   10718:	d8c00017 	ldw	r3,0(sp)
   1071c:	da000117 	ldw	r8,4(sp)
   10720:	103fc21e 	bne	r2,zero,1062c <_gp+0xffff14e4>
   10724:	182d883a 	mov	r22,r3
   10728:	9da7c83a 	sub	r19,r19,r22
   1072c:	983fe11e 	bne	r19,zero,106b4 <_gp+0xffff156c>
   10730:	a009883a 	mov	r4,r20
   10734:	800b883a 	mov	r5,r16
   10738:	0011d440 	call	11d44 <_fflush_r>
   1073c:	103fbb1e 	bne	r2,zero,1062c <_gp+0xffff14e4>
   10740:	0011883a 	mov	r8,zero
   10744:	003fdb06 	br	106b4 <_gp+0xffff156c>
   10748:	81000017 	ldw	r4,0(r16)
   1074c:	80800417 	ldw	r2,16(r16)
   10750:	11000236 	bltu	r2,r4,1075c <__sfvwrite_r+0x314>
   10754:	84c00517 	ldw	r19,20(r16)
   10758:	94ffa62e 	bgeu	r18,r19,105f4 <_gp+0xffff14ac>
   1075c:	9027883a 	mov	r19,r18
   10760:	b480012e 	bgeu	r22,r18,10768 <__sfvwrite_r+0x320>
   10764:	b027883a 	mov	r19,r22
   10768:	e00b883a 	mov	r5,fp
   1076c:	980d883a 	mov	r6,r19
   10770:	00112d00 	call	112d0 <memmove>
   10774:	80800217 	ldw	r2,8(r16)
   10778:	80c00017 	ldw	r3,0(r16)
   1077c:	14c5c83a 	sub	r2,r2,r19
   10780:	1cc7883a 	add	r3,r3,r19
   10784:	80800215 	stw	r2,8(r16)
   10788:	80c00015 	stw	r3,0(r16)
   1078c:	10004326 	beq	r2,zero,1089c <__sfvwrite_r+0x454>
   10790:	9805883a 	mov	r2,r19
   10794:	003f8506 	br	105ac <_gp+0xffff1464>
   10798:	a80d883a 	mov	r6,r21
   1079c:	e00b883a 	mov	r5,fp
   107a0:	da000115 	stw	r8,4(sp)
   107a4:	00112d00 	call	112d0 <memmove>
   107a8:	80800217 	ldw	r2,8(r16)
   107ac:	80c00017 	ldw	r3,0(r16)
   107b0:	da000117 	ldw	r8,4(sp)
   107b4:	1545c83a 	sub	r2,r2,r21
   107b8:	1d6b883a 	add	r21,r3,r21
   107bc:	80800215 	stw	r2,8(r16)
   107c0:	85400015 	stw	r21,0(r16)
   107c4:	003fb906 	br	106ac <_gp+0xffff1564>
   107c8:	81000017 	ldw	r4,0(r16)
   107cc:	902d883a 	mov	r22,r18
   107d0:	9027883a 	mov	r19,r18
   107d4:	003f6b06 	br	10584 <_gp+0xffff143c>
   107d8:	e009883a 	mov	r4,fp
   107dc:	01400284 	movi	r5,10
   107e0:	900d883a 	mov	r6,r18
   107e4:	00110b00 	call	110b0 <memchr>
   107e8:	10003e26 	beq	r2,zero,108e4 <__sfvwrite_r+0x49c>
   107ec:	10800044 	addi	r2,r2,1
   107f0:	1727c83a 	sub	r19,r2,fp
   107f4:	02000044 	movi	r8,1
   107f8:	003f9706 	br	10658 <_gp+0xffff1510>
   107fc:	80800517 	ldw	r2,20(r16)
   10800:	81400417 	ldw	r5,16(r16)
   10804:	80c00017 	ldw	r3,0(r16)
   10808:	10a7883a 	add	r19,r2,r2
   1080c:	9885883a 	add	r2,r19,r2
   10810:	1026d7fa 	srli	r19,r2,31
   10814:	196bc83a 	sub	r21,r3,r5
   10818:	a9800044 	addi	r6,r21,1
   1081c:	9885883a 	add	r2,r19,r2
   10820:	1027d07a 	srai	r19,r2,1
   10824:	3485883a 	add	r2,r6,r18
   10828:	980d883a 	mov	r6,r19
   1082c:	9880022e 	bgeu	r19,r2,10838 <__sfvwrite_r+0x3f0>
   10830:	1027883a 	mov	r19,r2
   10834:	100d883a 	mov	r6,r2
   10838:	2101000c 	andi	r4,r4,1024
   1083c:	20001c26 	beq	r4,zero,108b0 <__sfvwrite_r+0x468>
   10840:	a009883a 	mov	r4,r20
   10844:	300b883a 	mov	r5,r6
   10848:	00109080 	call	10908 <_malloc_r>
   1084c:	102d883a 	mov	r22,r2
   10850:	10002926 	beq	r2,zero,108f8 <__sfvwrite_r+0x4b0>
   10854:	81400417 	ldw	r5,16(r16)
   10858:	1009883a 	mov	r4,r2
   1085c:	a80d883a 	mov	r6,r21
   10860:	00111980 	call	11198 <memcpy>
   10864:	8080030b 	ldhu	r2,12(r16)
   10868:	00fedfc4 	movi	r3,-1153
   1086c:	10c4703a 	and	r2,r2,r3
   10870:	10802014 	ori	r2,r2,128
   10874:	8080030d 	sth	r2,12(r16)
   10878:	b549883a 	add	r4,r22,r21
   1087c:	9d4bc83a 	sub	r5,r19,r21
   10880:	85800415 	stw	r22,16(r16)
   10884:	84c00515 	stw	r19,20(r16)
   10888:	81000015 	stw	r4,0(r16)
   1088c:	902d883a 	mov	r22,r18
   10890:	81400215 	stw	r5,8(r16)
   10894:	9027883a 	mov	r19,r18
   10898:	003f3a06 	br	10584 <_gp+0xffff143c>
   1089c:	a009883a 	mov	r4,r20
   108a0:	800b883a 	mov	r5,r16
   108a4:	0011d440 	call	11d44 <_fflush_r>
   108a8:	103fb926 	beq	r2,zero,10790 <_gp+0xffff1648>
   108ac:	003f5f06 	br	1062c <_gp+0xffff14e4>
   108b0:	a009883a 	mov	r4,r20
   108b4:	001142c0 	call	1142c <_realloc_r>
   108b8:	102d883a 	mov	r22,r2
   108bc:	103fee1e 	bne	r2,zero,10878 <_gp+0xffff1730>
   108c0:	81400417 	ldw	r5,16(r16)
   108c4:	a009883a 	mov	r4,r20
   108c8:	00122940 	call	12294 <_free_r>
   108cc:	8080030b 	ldhu	r2,12(r16)
   108d0:	00ffdfc4 	movi	r3,-129
   108d4:	1884703a 	and	r2,r3,r2
   108d8:	00c00304 	movi	r3,12
   108dc:	a0c00015 	stw	r3,0(r20)
   108e0:	003f5306 	br	10630 <_gp+0xffff14e8>
   108e4:	94c00044 	addi	r19,r18,1
   108e8:	02000044 	movi	r8,1
   108ec:	003f5a06 	br	10658 <_gp+0xffff1510>
   108f0:	00bfffc4 	movi	r2,-1
   108f4:	003f0206 	br	10500 <_gp+0xffff13b8>
   108f8:	00800304 	movi	r2,12
   108fc:	a0800015 	stw	r2,0(r20)
   10900:	8080030b 	ldhu	r2,12(r16)
   10904:	003f4a06 	br	10630 <_gp+0xffff14e8>

00010908 <_malloc_r>:
   10908:	defff504 	addi	sp,sp,-44
   1090c:	dc800315 	stw	r18,12(sp)
   10910:	dfc00a15 	stw	ra,40(sp)
   10914:	df000915 	stw	fp,36(sp)
   10918:	ddc00815 	stw	r23,32(sp)
   1091c:	dd800715 	stw	r22,28(sp)
   10920:	dd400615 	stw	r21,24(sp)
   10924:	dd000515 	stw	r20,20(sp)
   10928:	dcc00415 	stw	r19,16(sp)
   1092c:	dc400215 	stw	r17,8(sp)
   10930:	dc000115 	stw	r16,4(sp)
   10934:	288002c4 	addi	r2,r5,11
   10938:	00c00584 	movi	r3,22
   1093c:	2025883a 	mov	r18,r4
   10940:	18802a2e 	bgeu	r3,r2,109ec <_malloc_r+0xe4>
   10944:	047ffe04 	movi	r17,-8
   10948:	1462703a 	and	r17,r2,r17
   1094c:	88009e16 	blt	r17,zero,10bc8 <_malloc_r+0x2c0>
   10950:	89409d36 	bltu	r17,r5,10bc8 <_malloc_r+0x2c0>
   10954:	00135280 	call	13528 <__malloc_lock>
   10958:	00807dc4 	movi	r2,503
   1095c:	14402736 	bltu	r2,r17,109fc <_malloc_r+0xf4>
   10960:	8806d0fa 	srli	r3,r17,3
   10964:	04c00074 	movhi	r19,1
   10968:	9cd6ce04 	addi	r19,r19,23352
   1096c:	18c5883a 	add	r2,r3,r3
   10970:	1085883a 	add	r2,r2,r2
   10974:	1085883a 	add	r2,r2,r2
   10978:	9885883a 	add	r2,r19,r2
   1097c:	14000317 	ldw	r16,12(r2)
   10980:	80814a26 	beq	r16,r2,10eac <_malloc_r+0x5a4>
   10984:	80c00117 	ldw	r3,4(r16)
   10988:	81000317 	ldw	r4,12(r16)
   1098c:	00bfff04 	movi	r2,-4
   10990:	1884703a 	and	r2,r3,r2
   10994:	81400217 	ldw	r5,8(r16)
   10998:	8085883a 	add	r2,r16,r2
   1099c:	10c00117 	ldw	r3,4(r2)
   109a0:	29000315 	stw	r4,12(r5)
   109a4:	21400215 	stw	r5,8(r4)
   109a8:	18c00054 	ori	r3,r3,1
   109ac:	10c00115 	stw	r3,4(r2)
   109b0:	9009883a 	mov	r4,r18
   109b4:	00135480 	call	13548 <__malloc_unlock>
   109b8:	80800204 	addi	r2,r16,8
   109bc:	dfc00a17 	ldw	ra,40(sp)
   109c0:	df000917 	ldw	fp,36(sp)
   109c4:	ddc00817 	ldw	r23,32(sp)
   109c8:	dd800717 	ldw	r22,28(sp)
   109cc:	dd400617 	ldw	r21,24(sp)
   109d0:	dd000517 	ldw	r20,20(sp)
   109d4:	dcc00417 	ldw	r19,16(sp)
   109d8:	dc800317 	ldw	r18,12(sp)
   109dc:	dc400217 	ldw	r17,8(sp)
   109e0:	dc000117 	ldw	r16,4(sp)
   109e4:	dec00b04 	addi	sp,sp,44
   109e8:	f800283a 	ret
   109ec:	04400404 	movi	r17,16
   109f0:	89407536 	bltu	r17,r5,10bc8 <_malloc_r+0x2c0>
   109f4:	00135280 	call	13528 <__malloc_lock>
   109f8:	003fd906 	br	10960 <_gp+0xffff1818>
   109fc:	8806d27a 	srli	r3,r17,9
   10a00:	18007526 	beq	r3,zero,10bd8 <_malloc_r+0x2d0>
   10a04:	00800104 	movi	r2,4
   10a08:	10c0ef36 	bltu	r2,r3,10dc8 <_malloc_r+0x4c0>
   10a0c:	8806d1ba 	srli	r3,r17,6
   10a10:	19c00e04 	addi	r7,r3,56
   10a14:	39cb883a 	add	r5,r7,r7
   10a18:	04c00074 	movhi	r19,1
   10a1c:	294b883a 	add	r5,r5,r5
   10a20:	9cd6ce04 	addi	r19,r19,23352
   10a24:	294b883a 	add	r5,r5,r5
   10a28:	994b883a 	add	r5,r19,r5
   10a2c:	2c000317 	ldw	r16,12(r5)
   10a30:	2c000e26 	beq	r5,r16,10a6c <_malloc_r+0x164>
   10a34:	80800117 	ldw	r2,4(r16)
   10a38:	01bfff04 	movi	r6,-4
   10a3c:	010003c4 	movi	r4,15
   10a40:	1184703a 	and	r2,r2,r6
   10a44:	1447c83a 	sub	r3,r2,r17
   10a48:	20c00716 	blt	r4,r3,10a68 <_malloc_r+0x160>
   10a4c:	1800650e 	bge	r3,zero,10be4 <_malloc_r+0x2dc>
   10a50:	84000317 	ldw	r16,12(r16)
   10a54:	2c000526 	beq	r5,r16,10a6c <_malloc_r+0x164>
   10a58:	80800117 	ldw	r2,4(r16)
   10a5c:	1184703a 	and	r2,r2,r6
   10a60:	1447c83a 	sub	r3,r2,r17
   10a64:	20fff90e 	bge	r4,r3,10a4c <_gp+0xffff1904>
   10a68:	39ffffc4 	addi	r7,r7,-1
   10a6c:	38c00044 	addi	r3,r7,1
   10a70:	01800074 	movhi	r6,1
   10a74:	9c000417 	ldw	r16,16(r19)
   10a78:	3196ce04 	addi	r6,r6,23352
   10a7c:	32400204 	addi	r9,r6,8
   10a80:	82410326 	beq	r16,r9,10e90 <_malloc_r+0x588>
   10a84:	81000117 	ldw	r4,4(r16)
   10a88:	00bfff04 	movi	r2,-4
   10a8c:	208e703a 	and	r7,r4,r2
   10a90:	3c45c83a 	sub	r2,r7,r17
   10a94:	010003c4 	movi	r4,15
   10a98:	2080ee16 	blt	r4,r2,10e54 <_malloc_r+0x54c>
   10a9c:	32400515 	stw	r9,20(r6)
   10aa0:	32400415 	stw	r9,16(r6)
   10aa4:	1000510e 	bge	r2,zero,10bec <_malloc_r+0x2e4>
   10aa8:	00807fc4 	movi	r2,511
   10aac:	11c0ce36 	bltu	r2,r7,10de8 <_malloc_r+0x4e0>
   10ab0:	3808d0fa 	srli	r4,r7,3
   10ab4:	01c00044 	movi	r7,1
   10ab8:	30800117 	ldw	r2,4(r6)
   10abc:	210b883a 	add	r5,r4,r4
   10ac0:	294b883a 	add	r5,r5,r5
   10ac4:	2009d0ba 	srai	r4,r4,2
   10ac8:	294b883a 	add	r5,r5,r5
   10acc:	298b883a 	add	r5,r5,r6
   10ad0:	2a000217 	ldw	r8,8(r5)
   10ad4:	3908983a 	sll	r4,r7,r4
   10ad8:	81400315 	stw	r5,12(r16)
   10adc:	82000215 	stw	r8,8(r16)
   10ae0:	2088b03a 	or	r4,r4,r2
   10ae4:	2c000215 	stw	r16,8(r5)
   10ae8:	31000115 	stw	r4,4(r6)
   10aec:	44000315 	stw	r16,12(r8)
   10af0:	1805d0ba 	srai	r2,r3,2
   10af4:	01400044 	movi	r5,1
   10af8:	288a983a 	sll	r5,r5,r2
   10afc:	21404336 	bltu	r4,r5,10c0c <_malloc_r+0x304>
   10b00:	2144703a 	and	r2,r4,r5
   10b04:	10000a1e 	bne	r2,zero,10b30 <_malloc_r+0x228>
   10b08:	00bfff04 	movi	r2,-4
   10b0c:	294b883a 	add	r5,r5,r5
   10b10:	1886703a 	and	r3,r3,r2
   10b14:	2144703a 	and	r2,r4,r5
   10b18:	18c00104 	addi	r3,r3,4
   10b1c:	1000041e 	bne	r2,zero,10b30 <_malloc_r+0x228>
   10b20:	294b883a 	add	r5,r5,r5
   10b24:	2144703a 	and	r2,r4,r5
   10b28:	18c00104 	addi	r3,r3,4
   10b2c:	103ffc26 	beq	r2,zero,10b20 <_gp+0xffff19d8>
   10b30:	023fff04 	movi	r8,-4
   10b34:	01c003c4 	movi	r7,15
   10b38:	18c5883a 	add	r2,r3,r3
   10b3c:	1085883a 	add	r2,r2,r2
   10b40:	1085883a 	add	r2,r2,r2
   10b44:	9895883a 	add	r10,r19,r2
   10b48:	52c00304 	addi	r11,r10,12
   10b4c:	1819883a 	mov	r12,r3
   10b50:	5c000017 	ldw	r16,0(r11)
   10b54:	59bffd04 	addi	r6,r11,-12
   10b58:	8180041e 	bne	r16,r6,10b6c <_malloc_r+0x264>
   10b5c:	0000ce06 	br	10e98 <_malloc_r+0x590>
   10b60:	2000d70e 	bge	r4,zero,10ec0 <_malloc_r+0x5b8>
   10b64:	84000317 	ldw	r16,12(r16)
   10b68:	8180cb26 	beq	r16,r6,10e98 <_malloc_r+0x590>
   10b6c:	80800117 	ldw	r2,4(r16)
   10b70:	1204703a 	and	r2,r2,r8
   10b74:	1449c83a 	sub	r4,r2,r17
   10b78:	393ff90e 	bge	r7,r4,10b60 <_gp+0xffff1a18>
   10b7c:	80800317 	ldw	r2,12(r16)
   10b80:	80c00217 	ldw	r3,8(r16)
   10b84:	89400054 	ori	r5,r17,1
   10b88:	81400115 	stw	r5,4(r16)
   10b8c:	18800315 	stw	r2,12(r3)
   10b90:	10c00215 	stw	r3,8(r2)
   10b94:	8463883a 	add	r17,r16,r17
   10b98:	9c400515 	stw	r17,20(r19)
   10b9c:	9c400415 	stw	r17,16(r19)
   10ba0:	20800054 	ori	r2,r4,1
   10ba4:	88800115 	stw	r2,4(r17)
   10ba8:	8a400315 	stw	r9,12(r17)
   10bac:	8a400215 	stw	r9,8(r17)
   10bb0:	8923883a 	add	r17,r17,r4
   10bb4:	89000015 	stw	r4,0(r17)
   10bb8:	9009883a 	mov	r4,r18
   10bbc:	00135480 	call	13548 <__malloc_unlock>
   10bc0:	80800204 	addi	r2,r16,8
   10bc4:	003f7d06 	br	109bc <_gp+0xffff1874>
   10bc8:	00800304 	movi	r2,12
   10bcc:	90800015 	stw	r2,0(r18)
   10bd0:	0005883a 	mov	r2,zero
   10bd4:	003f7906 	br	109bc <_gp+0xffff1874>
   10bd8:	01401f84 	movi	r5,126
   10bdc:	01c00fc4 	movi	r7,63
   10be0:	003f8d06 	br	10a18 <_gp+0xffff18d0>
   10be4:	81000317 	ldw	r4,12(r16)
   10be8:	003f6a06 	br	10994 <_gp+0xffff184c>
   10bec:	81c5883a 	add	r2,r16,r7
   10bf0:	10c00117 	ldw	r3,4(r2)
   10bf4:	9009883a 	mov	r4,r18
   10bf8:	18c00054 	ori	r3,r3,1
   10bfc:	10c00115 	stw	r3,4(r2)
   10c00:	00135480 	call	13548 <__malloc_unlock>
   10c04:	80800204 	addi	r2,r16,8
   10c08:	003f6c06 	br	109bc <_gp+0xffff1874>
   10c0c:	9c000217 	ldw	r16,8(r19)
   10c10:	00bfff04 	movi	r2,-4
   10c14:	85800117 	ldw	r22,4(r16)
   10c18:	b0ac703a 	and	r22,r22,r2
   10c1c:	b4400336 	bltu	r22,r17,10c2c <_malloc_r+0x324>
   10c20:	b445c83a 	sub	r2,r22,r17
   10c24:	00c003c4 	movi	r3,15
   10c28:	18805d16 	blt	r3,r2,10da0 <_malloc_r+0x498>
   10c2c:	05c00074 	movhi	r23,1
   10c30:	008000b4 	movhi	r2,2
   10c34:	bddc5404 	addi	r23,r23,29008
   10c38:	10a2fd04 	addi	r2,r2,-29708
   10c3c:	15400017 	ldw	r21,0(r2)
   10c40:	b9000017 	ldw	r4,0(r23)
   10c44:	00ffffc4 	movi	r3,-1
   10c48:	858d883a 	add	r6,r16,r22
   10c4c:	8d6b883a 	add	r21,r17,r21
   10c50:	20c0e426 	beq	r4,r3,10fe4 <_malloc_r+0x6dc>
   10c54:	ad4403c4 	addi	r21,r21,4111
   10c58:	00fc0004 	movi	r3,-4096
   10c5c:	a8ea703a 	and	r21,r21,r3
   10c60:	9009883a 	mov	r4,r18
   10c64:	a80b883a 	mov	r5,r21
   10c68:	d9800015 	stw	r6,0(sp)
   10c6c:	00119940 	call	11994 <_sbrk_r>
   10c70:	00ffffc4 	movi	r3,-1
   10c74:	1029883a 	mov	r20,r2
   10c78:	d9800017 	ldw	r6,0(sp)
   10c7c:	10c0a426 	beq	r2,r3,10f10 <_malloc_r+0x608>
   10c80:	1180a236 	bltu	r2,r6,10f0c <_malloc_r+0x604>
   10c84:	070000b4 	movhi	fp,2
   10c88:	e7230604 	addi	fp,fp,-29672
   10c8c:	e0c00017 	ldw	r3,0(fp)
   10c90:	a8c7883a 	add	r3,r21,r3
   10c94:	e0c00015 	stw	r3,0(fp)
   10c98:	3500da26 	beq	r6,r20,11004 <_malloc_r+0x6fc>
   10c9c:	b9000017 	ldw	r4,0(r23)
   10ca0:	00bfffc4 	movi	r2,-1
   10ca4:	2080e426 	beq	r4,r2,11038 <_malloc_r+0x730>
   10ca8:	a185c83a 	sub	r2,r20,r6
   10cac:	1885883a 	add	r2,r3,r2
   10cb0:	e0800015 	stw	r2,0(fp)
   10cb4:	a0c001cc 	andi	r3,r20,7
   10cb8:	1800b526 	beq	r3,zero,10f90 <_malloc_r+0x688>
   10cbc:	a0e9c83a 	sub	r20,r20,r3
   10cc0:	00840204 	movi	r2,4104
   10cc4:	a5000204 	addi	r20,r20,8
   10cc8:	10c7c83a 	sub	r3,r2,r3
   10ccc:	a545883a 	add	r2,r20,r21
   10cd0:	1083ffcc 	andi	r2,r2,4095
   10cd4:	18abc83a 	sub	r21,r3,r2
   10cd8:	9009883a 	mov	r4,r18
   10cdc:	a80b883a 	mov	r5,r21
   10ce0:	00119940 	call	11994 <_sbrk_r>
   10ce4:	00ffffc4 	movi	r3,-1
   10ce8:	10c0d026 	beq	r2,r3,1102c <_malloc_r+0x724>
   10cec:	1507c83a 	sub	r3,r2,r20
   10cf0:	a8c7883a 	add	r3,r21,r3
   10cf4:	18c00054 	ori	r3,r3,1
   10cf8:	e0800017 	ldw	r2,0(fp)
   10cfc:	9d000215 	stw	r20,8(r19)
   10d00:	a0c00115 	stw	r3,4(r20)
   10d04:	a887883a 	add	r3,r21,r2
   10d08:	e0c00015 	stw	r3,0(fp)
   10d0c:	84c00e26 	beq	r16,r19,10d48 <_malloc_r+0x440>
   10d10:	018003c4 	movi	r6,15
   10d14:	3580a02e 	bgeu	r6,r22,10f98 <_malloc_r+0x690>
   10d18:	81400117 	ldw	r5,4(r16)
   10d1c:	013ffe04 	movi	r4,-8
   10d20:	b0bffd04 	addi	r2,r22,-12
   10d24:	1104703a 	and	r2,r2,r4
   10d28:	2900004c 	andi	r4,r5,1
   10d2c:	1108b03a 	or	r4,r2,r4
   10d30:	81000115 	stw	r4,4(r16)
   10d34:	01400144 	movi	r5,5
   10d38:	8089883a 	add	r4,r16,r2
   10d3c:	21400115 	stw	r5,4(r4)
   10d40:	21400215 	stw	r5,8(r4)
   10d44:	3080c036 	bltu	r6,r2,11048 <_malloc_r+0x740>
   10d48:	008000b4 	movhi	r2,2
   10d4c:	10a2fc04 	addi	r2,r2,-29712
   10d50:	11000017 	ldw	r4,0(r2)
   10d54:	20c0012e 	bgeu	r4,r3,10d5c <_malloc_r+0x454>
   10d58:	10c00015 	stw	r3,0(r2)
   10d5c:	008000b4 	movhi	r2,2
   10d60:	10a2fb04 	addi	r2,r2,-29716
   10d64:	11000017 	ldw	r4,0(r2)
   10d68:	9c000217 	ldw	r16,8(r19)
   10d6c:	20c0012e 	bgeu	r4,r3,10d74 <_malloc_r+0x46c>
   10d70:	10c00015 	stw	r3,0(r2)
   10d74:	80c00117 	ldw	r3,4(r16)
   10d78:	00bfff04 	movi	r2,-4
   10d7c:	1886703a 	and	r3,r3,r2
   10d80:	1c45c83a 	sub	r2,r3,r17
   10d84:	1c400236 	bltu	r3,r17,10d90 <_malloc_r+0x488>
   10d88:	00c003c4 	movi	r3,15
   10d8c:	18800416 	blt	r3,r2,10da0 <_malloc_r+0x498>
   10d90:	9009883a 	mov	r4,r18
   10d94:	00135480 	call	13548 <__malloc_unlock>
   10d98:	0005883a 	mov	r2,zero
   10d9c:	003f0706 	br	109bc <_gp+0xffff1874>
   10da0:	88c00054 	ori	r3,r17,1
   10da4:	80c00115 	stw	r3,4(r16)
   10da8:	8463883a 	add	r17,r16,r17
   10dac:	10800054 	ori	r2,r2,1
   10db0:	9c400215 	stw	r17,8(r19)
   10db4:	88800115 	stw	r2,4(r17)
   10db8:	9009883a 	mov	r4,r18
   10dbc:	00135480 	call	13548 <__malloc_unlock>
   10dc0:	80800204 	addi	r2,r16,8
   10dc4:	003efd06 	br	109bc <_gp+0xffff1874>
   10dc8:	00800504 	movi	r2,20
   10dcc:	10c0482e 	bgeu	r2,r3,10ef0 <_malloc_r+0x5e8>
   10dd0:	00801504 	movi	r2,84
   10dd4:	10c06836 	bltu	r2,r3,10f78 <_malloc_r+0x670>
   10dd8:	8806d33a 	srli	r3,r17,12
   10ddc:	19c01b84 	addi	r7,r3,110
   10de0:	39cb883a 	add	r5,r7,r7
   10de4:	003f0c06 	br	10a18 <_gp+0xffff18d0>
   10de8:	3804d27a 	srli	r2,r7,9
   10dec:	01000104 	movi	r4,4
   10df0:	2080422e 	bgeu	r4,r2,10efc <_malloc_r+0x5f4>
   10df4:	01000504 	movi	r4,20
   10df8:	20807c36 	bltu	r4,r2,10fec <_malloc_r+0x6e4>
   10dfc:	110016c4 	addi	r4,r2,91
   10e00:	210b883a 	add	r5,r4,r4
   10e04:	294b883a 	add	r5,r5,r5
   10e08:	294b883a 	add	r5,r5,r5
   10e0c:	994b883a 	add	r5,r19,r5
   10e10:	28800217 	ldw	r2,8(r5)
   10e14:	02000074 	movhi	r8,1
   10e18:	4216ce04 	addi	r8,r8,23352
   10e1c:	11406326 	beq	r2,r5,10fac <_malloc_r+0x6a4>
   10e20:	01bfff04 	movi	r6,-4
   10e24:	11000117 	ldw	r4,4(r2)
   10e28:	2188703a 	and	r4,r4,r6
   10e2c:	3900022e 	bgeu	r7,r4,10e38 <_malloc_r+0x530>
   10e30:	10800217 	ldw	r2,8(r2)
   10e34:	28bffb1e 	bne	r5,r2,10e24 <_gp+0xffff1cdc>
   10e38:	11800317 	ldw	r6,12(r2)
   10e3c:	99000117 	ldw	r4,4(r19)
   10e40:	81800315 	stw	r6,12(r16)
   10e44:	80800215 	stw	r2,8(r16)
   10e48:	34000215 	stw	r16,8(r6)
   10e4c:	14000315 	stw	r16,12(r2)
   10e50:	003f2706 	br	10af0 <_gp+0xffff19a8>
   10e54:	88c00054 	ori	r3,r17,1
   10e58:	80c00115 	stw	r3,4(r16)
   10e5c:	8463883a 	add	r17,r16,r17
   10e60:	34400515 	stw	r17,20(r6)
   10e64:	34400415 	stw	r17,16(r6)
   10e68:	10c00054 	ori	r3,r2,1
   10e6c:	8a400315 	stw	r9,12(r17)
   10e70:	8a400215 	stw	r9,8(r17)
   10e74:	88c00115 	stw	r3,4(r17)
   10e78:	88a3883a 	add	r17,r17,r2
   10e7c:	88800015 	stw	r2,0(r17)
   10e80:	9009883a 	mov	r4,r18
   10e84:	00135480 	call	13548 <__malloc_unlock>
   10e88:	80800204 	addi	r2,r16,8
   10e8c:	003ecb06 	br	109bc <_gp+0xffff1874>
   10e90:	31000117 	ldw	r4,4(r6)
   10e94:	003f1606 	br	10af0 <_gp+0xffff19a8>
   10e98:	63000044 	addi	r12,r12,1
   10e9c:	608000cc 	andi	r2,r12,3
   10ea0:	5ac00204 	addi	r11,r11,8
   10ea4:	103f2a1e 	bne	r2,zero,10b50 <_gp+0xffff1a08>
   10ea8:	00002106 	br	10f30 <_malloc_r+0x628>
   10eac:	80800204 	addi	r2,r16,8
   10eb0:	84000517 	ldw	r16,20(r16)
   10eb4:	143eb31e 	bne	r2,r16,10984 <_gp+0xffff183c>
   10eb8:	18c00084 	addi	r3,r3,2
   10ebc:	003eec06 	br	10a70 <_gp+0xffff1928>
   10ec0:	8085883a 	add	r2,r16,r2
   10ec4:	10c00117 	ldw	r3,4(r2)
   10ec8:	81000317 	ldw	r4,12(r16)
   10ecc:	81400217 	ldw	r5,8(r16)
   10ed0:	18c00054 	ori	r3,r3,1
   10ed4:	10c00115 	stw	r3,4(r2)
   10ed8:	29000315 	stw	r4,12(r5)
   10edc:	21400215 	stw	r5,8(r4)
   10ee0:	9009883a 	mov	r4,r18
   10ee4:	00135480 	call	13548 <__malloc_unlock>
   10ee8:	80800204 	addi	r2,r16,8
   10eec:	003eb306 	br	109bc <_gp+0xffff1874>
   10ef0:	19c016c4 	addi	r7,r3,91
   10ef4:	39cb883a 	add	r5,r7,r7
   10ef8:	003ec706 	br	10a18 <_gp+0xffff18d0>
   10efc:	3804d1ba 	srli	r2,r7,6
   10f00:	11000e04 	addi	r4,r2,56
   10f04:	210b883a 	add	r5,r4,r4
   10f08:	003fbe06 	br	10e04 <_gp+0xffff1cbc>
   10f0c:	84ff5d26 	beq	r16,r19,10c84 <_gp+0xffff1b3c>
   10f10:	9c000217 	ldw	r16,8(r19)
   10f14:	00bfff04 	movi	r2,-4
   10f18:	80c00117 	ldw	r3,4(r16)
   10f1c:	1886703a 	and	r3,r3,r2
   10f20:	003f9706 	br	10d80 <_gp+0xffff1c38>
   10f24:	52800017 	ldw	r10,0(r10)
   10f28:	18ffffc4 	addi	r3,r3,-1
   10f2c:	50805c1e 	bne	r10,r2,110a0 <_malloc_r+0x798>
   10f30:	190000cc 	andi	r4,r3,3
   10f34:	50bffe04 	addi	r2,r10,-8
   10f38:	203ffa1e 	bne	r4,zero,10f24 <_gp+0xffff1ddc>
   10f3c:	98800117 	ldw	r2,4(r19)
   10f40:	0146303a 	nor	r3,zero,r5
   10f44:	1884703a 	and	r2,r3,r2
   10f48:	98800115 	stw	r2,4(r19)
   10f4c:	294b883a 	add	r5,r5,r5
   10f50:	117f2e36 	bltu	r2,r5,10c0c <_gp+0xffff1ac4>
   10f54:	283f2d26 	beq	r5,zero,10c0c <_gp+0xffff1ac4>
   10f58:	1146703a 	and	r3,r2,r5
   10f5c:	1800521e 	bne	r3,zero,110a8 <_malloc_r+0x7a0>
   10f60:	6007883a 	mov	r3,r12
   10f64:	294b883a 	add	r5,r5,r5
   10f68:	1148703a 	and	r4,r2,r5
   10f6c:	18c00104 	addi	r3,r3,4
   10f70:	203ffc26 	beq	r4,zero,10f64 <_gp+0xffff1e1c>
   10f74:	003ef006 	br	10b38 <_gp+0xffff19f0>
   10f78:	00805504 	movi	r2,340
   10f7c:	10c01336 	bltu	r2,r3,10fcc <_malloc_r+0x6c4>
   10f80:	8806d3fa 	srli	r3,r17,15
   10f84:	19c01dc4 	addi	r7,r3,119
   10f88:	39cb883a 	add	r5,r7,r7
   10f8c:	003ea206 	br	10a18 <_gp+0xffff18d0>
   10f90:	00c40004 	movi	r3,4096
   10f94:	003f4d06 	br	10ccc <_gp+0xffff1b84>
   10f98:	00800044 	movi	r2,1
   10f9c:	a0800115 	stw	r2,4(r20)
   10fa0:	a021883a 	mov	r16,r20
   10fa4:	0007883a 	mov	r3,zero
   10fa8:	003f7506 	br	10d80 <_gp+0xffff1c38>
   10fac:	200bd0ba 	srai	r5,r4,2
   10fb0:	01800044 	movi	r6,1
   10fb4:	41000117 	ldw	r4,4(r8)
   10fb8:	314a983a 	sll	r5,r6,r5
   10fbc:	100d883a 	mov	r6,r2
   10fc0:	2908b03a 	or	r4,r5,r4
   10fc4:	41000115 	stw	r4,4(r8)
   10fc8:	003f9d06 	br	10e40 <_gp+0xffff1cf8>
   10fcc:	00815504 	movi	r2,1364
   10fd0:	10c01336 	bltu	r2,r3,11020 <_malloc_r+0x718>
   10fd4:	8806d4ba 	srli	r3,r17,18
   10fd8:	19c01f04 	addi	r7,r3,124
   10fdc:	39cb883a 	add	r5,r7,r7
   10fe0:	003e8d06 	br	10a18 <_gp+0xffff18d0>
   10fe4:	ad400404 	addi	r21,r21,16
   10fe8:	003f1d06 	br	10c60 <_gp+0xffff1b18>
   10fec:	01001504 	movi	r4,84
   10ff0:	20801c36 	bltu	r4,r2,11064 <_malloc_r+0x75c>
   10ff4:	3804d33a 	srli	r2,r7,12
   10ff8:	11001b84 	addi	r4,r2,110
   10ffc:	210b883a 	add	r5,r4,r4
   11000:	003f8006 	br	10e04 <_gp+0xffff1cbc>
   11004:	3083ffcc 	andi	r2,r6,4095
   11008:	103f241e 	bne	r2,zero,10c9c <_gp+0xffff1b54>
   1100c:	99000217 	ldw	r4,8(r19)
   11010:	ad85883a 	add	r2,r21,r22
   11014:	10800054 	ori	r2,r2,1
   11018:	20800115 	stw	r2,4(r4)
   1101c:	003f4a06 	br	10d48 <_gp+0xffff1c00>
   11020:	01403f04 	movi	r5,252
   11024:	01c01f84 	movi	r7,126
   11028:	003e7b06 	br	10a18 <_gp+0xffff18d0>
   1102c:	00c00044 	movi	r3,1
   11030:	002b883a 	mov	r21,zero
   11034:	003f3006 	br	10cf8 <_gp+0xffff1bb0>
   11038:	00800074 	movhi	r2,1
   1103c:	109c5404 	addi	r2,r2,29008
   11040:	15000015 	stw	r20,0(r2)
   11044:	003f1b06 	br	10cb4 <_gp+0xffff1b6c>
   11048:	9009883a 	mov	r4,r18
   1104c:	81400204 	addi	r5,r16,8
   11050:	00122940 	call	12294 <_free_r>
   11054:	008000b4 	movhi	r2,2
   11058:	10a30604 	addi	r2,r2,-29672
   1105c:	10c00017 	ldw	r3,0(r2)
   11060:	003f3906 	br	10d48 <_gp+0xffff1c00>
   11064:	01005504 	movi	r4,340
   11068:	20800436 	bltu	r4,r2,1107c <_malloc_r+0x774>
   1106c:	3804d3fa 	srli	r2,r7,15
   11070:	11001dc4 	addi	r4,r2,119
   11074:	210b883a 	add	r5,r4,r4
   11078:	003f6206 	br	10e04 <_gp+0xffff1cbc>
   1107c:	01015504 	movi	r4,1364
   11080:	20800436 	bltu	r4,r2,11094 <_malloc_r+0x78c>
   11084:	3804d4ba 	srli	r2,r7,18
   11088:	11001f04 	addi	r4,r2,124
   1108c:	210b883a 	add	r5,r4,r4
   11090:	003f5c06 	br	10e04 <_gp+0xffff1cbc>
   11094:	01403f04 	movi	r5,252
   11098:	01001f84 	movi	r4,126
   1109c:	003f5906 	br	10e04 <_gp+0xffff1cbc>
   110a0:	98800117 	ldw	r2,4(r19)
   110a4:	003fa906 	br	10f4c <_gp+0xffff1e04>
   110a8:	6007883a 	mov	r3,r12
   110ac:	003ea206 	br	10b38 <_gp+0xffff19f0>

000110b0 <memchr>:
   110b0:	208000cc 	andi	r2,r4,3
   110b4:	280f883a 	mov	r7,r5
   110b8:	10003526 	beq	r2,zero,11190 <memchr+0xe0>
   110bc:	30bfffc4 	addi	r2,r6,-1
   110c0:	30001b26 	beq	r6,zero,11130 <memchr+0x80>
   110c4:	21800003 	ldbu	r6,0(r4)
   110c8:	28c03fcc 	andi	r3,r5,255
   110cc:	30c01a26 	beq	r6,r3,11138 <memchr+0x88>
   110d0:	180d883a 	mov	r6,r3
   110d4:	00000406 	br	110e8 <memchr+0x38>
   110d8:	10001526 	beq	r2,zero,11130 <memchr+0x80>
   110dc:	20c00003 	ldbu	r3,0(r4)
   110e0:	10bfffc4 	addi	r2,r2,-1
   110e4:	19801426 	beq	r3,r6,11138 <memchr+0x88>
   110e8:	21000044 	addi	r4,r4,1
   110ec:	20c000cc 	andi	r3,r4,3
   110f0:	183ff91e 	bne	r3,zero,110d8 <_gp+0xffff1f90>
   110f4:	024000c4 	movi	r9,3
   110f8:	48801136 	bltu	r9,r2,11140 <memchr+0x90>
   110fc:	10000c26 	beq	r2,zero,11130 <memchr+0x80>
   11100:	20c00003 	ldbu	r3,0(r4)
   11104:	29403fcc 	andi	r5,r5,255
   11108:	19400b26 	beq	r3,r5,11138 <memchr+0x88>
   1110c:	20c00044 	addi	r3,r4,1
   11110:	2085883a 	add	r2,r4,r2
   11114:	39803fcc 	andi	r6,r7,255
   11118:	00000306 	br	11128 <memchr+0x78>
   1111c:	18c00044 	addi	r3,r3,1
   11120:	197fffc3 	ldbu	r5,-1(r3)
   11124:	29800426 	beq	r5,r6,11138 <memchr+0x88>
   11128:	1809883a 	mov	r4,r3
   1112c:	18bffb1e 	bne	r3,r2,1111c <_gp+0xffff1fd4>
   11130:	0005883a 	mov	r2,zero
   11134:	f800283a 	ret
   11138:	2005883a 	mov	r2,r4
   1113c:	f800283a 	ret
   11140:	28c03fcc 	andi	r3,r5,255
   11144:	1810923a 	slli	r8,r3,8
   11148:	02ffbff4 	movhi	r11,65279
   1114c:	02a02074 	movhi	r10,32897
   11150:	40c6b03a 	or	r3,r8,r3
   11154:	1810943a 	slli	r8,r3,16
   11158:	5affbfc4 	addi	r11,r11,-257
   1115c:	52a02004 	addi	r10,r10,-32640
   11160:	40d0b03a 	or	r8,r8,r3
   11164:	20c00017 	ldw	r3,0(r4)
   11168:	40c6f03a 	xor	r3,r8,r3
   1116c:	1acd883a 	add	r6,r3,r11
   11170:	00c6303a 	nor	r3,zero,r3
   11174:	30c6703a 	and	r3,r6,r3
   11178:	1a86703a 	and	r3,r3,r10
   1117c:	183fdf1e 	bne	r3,zero,110fc <_gp+0xffff1fb4>
   11180:	10bfff04 	addi	r2,r2,-4
   11184:	21000104 	addi	r4,r4,4
   11188:	48bff636 	bltu	r9,r2,11164 <_gp+0xffff201c>
   1118c:	003fdb06 	br	110fc <_gp+0xffff1fb4>
   11190:	3005883a 	mov	r2,r6
   11194:	003fd706 	br	110f4 <_gp+0xffff1fac>

00011198 <memcpy>:
   11198:	deffff04 	addi	sp,sp,-4
   1119c:	dc000015 	stw	r16,0(sp)
   111a0:	00c003c4 	movi	r3,15
   111a4:	2005883a 	mov	r2,r4
   111a8:	1980432e 	bgeu	r3,r6,112b8 <memcpy+0x120>
   111ac:	2146b03a 	or	r3,r4,r5
   111b0:	18c000cc 	andi	r3,r3,3
   111b4:	1800421e 	bne	r3,zero,112c0 <memcpy+0x128>
   111b8:	343ffc04 	addi	r16,r6,-16
   111bc:	8020d13a 	srli	r16,r16,4
   111c0:	28c00104 	addi	r3,r5,4
   111c4:	23400104 	addi	r13,r4,4
   111c8:	801e913a 	slli	r15,r16,4
   111cc:	2b000204 	addi	r12,r5,8
   111d0:	22c00204 	addi	r11,r4,8
   111d4:	7bc00504 	addi	r15,r15,20
   111d8:	2a800304 	addi	r10,r5,12
   111dc:	22400304 	addi	r9,r4,12
   111e0:	2bdf883a 	add	r15,r5,r15
   111e4:	2811883a 	mov	r8,r5
   111e8:	200f883a 	mov	r7,r4
   111ec:	41000017 	ldw	r4,0(r8)
   111f0:	39c00404 	addi	r7,r7,16
   111f4:	18c00404 	addi	r3,r3,16
   111f8:	393ffc15 	stw	r4,-16(r7)
   111fc:	1bbffc17 	ldw	r14,-16(r3)
   11200:	6b400404 	addi	r13,r13,16
   11204:	5ac00404 	addi	r11,r11,16
   11208:	6bbffc15 	stw	r14,-16(r13)
   1120c:	63800017 	ldw	r14,0(r12)
   11210:	4a400404 	addi	r9,r9,16
   11214:	42000404 	addi	r8,r8,16
   11218:	5bbffc15 	stw	r14,-16(r11)
   1121c:	53800017 	ldw	r14,0(r10)
   11220:	63000404 	addi	r12,r12,16
   11224:	52800404 	addi	r10,r10,16
   11228:	4bbffc15 	stw	r14,-16(r9)
   1122c:	1bffef1e 	bne	r3,r15,111ec <_gp+0xffff20a4>
   11230:	81c00044 	addi	r7,r16,1
   11234:	380e913a 	slli	r7,r7,4
   11238:	310003cc 	andi	r4,r6,15
   1123c:	02c000c4 	movi	r11,3
   11240:	11c7883a 	add	r3,r2,r7
   11244:	29cb883a 	add	r5,r5,r7
   11248:	59001f2e 	bgeu	r11,r4,112c8 <memcpy+0x130>
   1124c:	1813883a 	mov	r9,r3
   11250:	2811883a 	mov	r8,r5
   11254:	200f883a 	mov	r7,r4
   11258:	42800017 	ldw	r10,0(r8)
   1125c:	4a400104 	addi	r9,r9,4
   11260:	39ffff04 	addi	r7,r7,-4
   11264:	4abfff15 	stw	r10,-4(r9)
   11268:	42000104 	addi	r8,r8,4
   1126c:	59fffa36 	bltu	r11,r7,11258 <_gp+0xffff2110>
   11270:	213fff04 	addi	r4,r4,-4
   11274:	2008d0ba 	srli	r4,r4,2
   11278:	318000cc 	andi	r6,r6,3
   1127c:	21000044 	addi	r4,r4,1
   11280:	2109883a 	add	r4,r4,r4
   11284:	2109883a 	add	r4,r4,r4
   11288:	1907883a 	add	r3,r3,r4
   1128c:	290b883a 	add	r5,r5,r4
   11290:	30000626 	beq	r6,zero,112ac <memcpy+0x114>
   11294:	198d883a 	add	r6,r3,r6
   11298:	29c00003 	ldbu	r7,0(r5)
   1129c:	18c00044 	addi	r3,r3,1
   112a0:	29400044 	addi	r5,r5,1
   112a4:	19ffffc5 	stb	r7,-1(r3)
   112a8:	19bffb1e 	bne	r3,r6,11298 <_gp+0xffff2150>
   112ac:	dc000017 	ldw	r16,0(sp)
   112b0:	dec00104 	addi	sp,sp,4
   112b4:	f800283a 	ret
   112b8:	2007883a 	mov	r3,r4
   112bc:	003ff406 	br	11290 <_gp+0xffff2148>
   112c0:	2007883a 	mov	r3,r4
   112c4:	003ff306 	br	11294 <_gp+0xffff214c>
   112c8:	200d883a 	mov	r6,r4
   112cc:	003ff006 	br	11290 <_gp+0xffff2148>

000112d0 <memmove>:
   112d0:	2005883a 	mov	r2,r4
   112d4:	29000b2e 	bgeu	r5,r4,11304 <memmove+0x34>
   112d8:	298f883a 	add	r7,r5,r6
   112dc:	21c0092e 	bgeu	r4,r7,11304 <memmove+0x34>
   112e0:	2187883a 	add	r3,r4,r6
   112e4:	198bc83a 	sub	r5,r3,r6
   112e8:	30004b26 	beq	r6,zero,11418 <memmove+0x148>
   112ec:	39ffffc4 	addi	r7,r7,-1
   112f0:	39000003 	ldbu	r4,0(r7)
   112f4:	18ffffc4 	addi	r3,r3,-1
   112f8:	19000005 	stb	r4,0(r3)
   112fc:	197ffb1e 	bne	r3,r5,112ec <_gp+0xffff21a4>
   11300:	f800283a 	ret
   11304:	00c003c4 	movi	r3,15
   11308:	1980412e 	bgeu	r3,r6,11410 <memmove+0x140>
   1130c:	1146b03a 	or	r3,r2,r5
   11310:	18c000cc 	andi	r3,r3,3
   11314:	1800411e 	bne	r3,zero,1141c <memmove+0x14c>
   11318:	33fffc04 	addi	r15,r6,-16
   1131c:	781ed13a 	srli	r15,r15,4
   11320:	28c00104 	addi	r3,r5,4
   11324:	13400104 	addi	r13,r2,4
   11328:	781c913a 	slli	r14,r15,4
   1132c:	2b000204 	addi	r12,r5,8
   11330:	12c00204 	addi	r11,r2,8
   11334:	73800504 	addi	r14,r14,20
   11338:	2a800304 	addi	r10,r5,12
   1133c:	12400304 	addi	r9,r2,12
   11340:	2b9d883a 	add	r14,r5,r14
   11344:	2811883a 	mov	r8,r5
   11348:	100f883a 	mov	r7,r2
   1134c:	41000017 	ldw	r4,0(r8)
   11350:	39c00404 	addi	r7,r7,16
   11354:	18c00404 	addi	r3,r3,16
   11358:	393ffc15 	stw	r4,-16(r7)
   1135c:	193ffc17 	ldw	r4,-16(r3)
   11360:	6b400404 	addi	r13,r13,16
   11364:	5ac00404 	addi	r11,r11,16
   11368:	693ffc15 	stw	r4,-16(r13)
   1136c:	61000017 	ldw	r4,0(r12)
   11370:	4a400404 	addi	r9,r9,16
   11374:	42000404 	addi	r8,r8,16
   11378:	593ffc15 	stw	r4,-16(r11)
   1137c:	51000017 	ldw	r4,0(r10)
   11380:	63000404 	addi	r12,r12,16
   11384:	52800404 	addi	r10,r10,16
   11388:	493ffc15 	stw	r4,-16(r9)
   1138c:	1bbfef1e 	bne	r3,r14,1134c <_gp+0xffff2204>
   11390:	79000044 	addi	r4,r15,1
   11394:	2008913a 	slli	r4,r4,4
   11398:	328003cc 	andi	r10,r6,15
   1139c:	02c000c4 	movi	r11,3
   113a0:	1107883a 	add	r3,r2,r4
   113a4:	290b883a 	add	r5,r5,r4
   113a8:	5a801e2e 	bgeu	r11,r10,11424 <memmove+0x154>
   113ac:	1813883a 	mov	r9,r3
   113b0:	2811883a 	mov	r8,r5
   113b4:	500f883a 	mov	r7,r10
   113b8:	41000017 	ldw	r4,0(r8)
   113bc:	4a400104 	addi	r9,r9,4
   113c0:	39ffff04 	addi	r7,r7,-4
   113c4:	493fff15 	stw	r4,-4(r9)
   113c8:	42000104 	addi	r8,r8,4
   113cc:	59fffa36 	bltu	r11,r7,113b8 <_gp+0xffff2270>
   113d0:	513fff04 	addi	r4,r10,-4
   113d4:	2008d0ba 	srli	r4,r4,2
   113d8:	318000cc 	andi	r6,r6,3
   113dc:	21000044 	addi	r4,r4,1
   113e0:	2109883a 	add	r4,r4,r4
   113e4:	2109883a 	add	r4,r4,r4
   113e8:	1907883a 	add	r3,r3,r4
   113ec:	290b883a 	add	r5,r5,r4
   113f0:	30000926 	beq	r6,zero,11418 <memmove+0x148>
   113f4:	198d883a 	add	r6,r3,r6
   113f8:	29c00003 	ldbu	r7,0(r5)
   113fc:	18c00044 	addi	r3,r3,1
   11400:	29400044 	addi	r5,r5,1
   11404:	19ffffc5 	stb	r7,-1(r3)
   11408:	19bffb1e 	bne	r3,r6,113f8 <_gp+0xffff22b0>
   1140c:	f800283a 	ret
   11410:	1007883a 	mov	r3,r2
   11414:	003ff606 	br	113f0 <_gp+0xffff22a8>
   11418:	f800283a 	ret
   1141c:	1007883a 	mov	r3,r2
   11420:	003ff406 	br	113f4 <_gp+0xffff22ac>
   11424:	500d883a 	mov	r6,r10
   11428:	003ff106 	br	113f0 <_gp+0xffff22a8>

0001142c <_realloc_r>:
   1142c:	defff604 	addi	sp,sp,-40
   11430:	dd000415 	stw	r20,16(sp)
   11434:	dc400115 	stw	r17,4(sp)
   11438:	dfc00915 	stw	ra,36(sp)
   1143c:	df000815 	stw	fp,32(sp)
   11440:	ddc00715 	stw	r23,28(sp)
   11444:	dd800615 	stw	r22,24(sp)
   11448:	dd400515 	stw	r21,20(sp)
   1144c:	dcc00315 	stw	r19,12(sp)
   11450:	dc800215 	stw	r18,8(sp)
   11454:	dc000015 	stw	r16,0(sp)
   11458:	2829883a 	mov	r20,r5
   1145c:	3023883a 	mov	r17,r6
   11460:	2800ad26 	beq	r5,zero,11718 <_realloc_r+0x2ec>
   11464:	2025883a 	mov	r18,r4
   11468:	00135280 	call	13528 <__malloc_lock>
   1146c:	a0ffff17 	ldw	r3,-4(r20)
   11470:	043fff04 	movi	r16,-4
   11474:	890002c4 	addi	r4,r17,11
   11478:	01c00584 	movi	r7,22
   1147c:	a57ffe04 	addi	r21,r20,-8
   11480:	1c20703a 	and	r16,r3,r16
   11484:	39001d2e 	bgeu	r7,r4,114fc <_realloc_r+0xd0>
   11488:	05bffe04 	movi	r22,-8
   1148c:	25ac703a 	and	r22,r4,r22
   11490:	b00f883a 	mov	r7,r22
   11494:	b0006516 	blt	r22,zero,1162c <_realloc_r+0x200>
   11498:	b4406436 	bltu	r22,r17,1162c <_realloc_r+0x200>
   1149c:	81c01a0e 	bge	r16,r7,11508 <_realloc_r+0xdc>
   114a0:	07000074 	movhi	fp,1
   114a4:	e716ce04 	addi	fp,fp,23352
   114a8:	e1400217 	ldw	r5,8(fp)
   114ac:	ac11883a 	add	r8,r21,r16
   114b0:	2a006226 	beq	r5,r8,1163c <_realloc_r+0x210>
   114b4:	41800117 	ldw	r6,4(r8)
   114b8:	027fff84 	movi	r9,-2
   114bc:	3252703a 	and	r9,r6,r9
   114c0:	4253883a 	add	r9,r8,r9
   114c4:	49000117 	ldw	r4,4(r9)
   114c8:	2100004c 	andi	r4,r4,1
   114cc:	2000281e 	bne	r4,zero,11570 <_realloc_r+0x144>
   114d0:	00bfff04 	movi	r2,-4
   114d4:	3084703a 	and	r2,r6,r2
   114d8:	1409883a 	add	r4,r2,r16
   114dc:	21c05e16 	blt	r4,r7,11658 <_realloc_r+0x22c>
   114e0:	40800317 	ldw	r2,12(r8)
   114e4:	41400217 	ldw	r5,8(r8)
   114e8:	a023883a 	mov	r17,r20
   114ec:	2021883a 	mov	r16,r4
   114f0:	28800315 	stw	r2,12(r5)
   114f4:	11400215 	stw	r5,8(r2)
   114f8:	00000406 	br	1150c <_realloc_r+0xe0>
   114fc:	01c00404 	movi	r7,16
   11500:	382d883a 	mov	r22,r7
   11504:	003fe406 	br	11498 <_gp+0xffff2350>
   11508:	a023883a 	mov	r17,r20
   1150c:	858fc83a 	sub	r7,r16,r22
   11510:	008003c4 	movi	r2,15
   11514:	18c0004c 	andi	r3,r3,1
   11518:	11c07236 	bltu	r2,r7,116e4 <_realloc_r+0x2b8>
   1151c:	1c06b03a 	or	r3,r3,r16
   11520:	a8c00115 	stw	r3,4(r21)
   11524:	ac21883a 	add	r16,r21,r16
   11528:	80800117 	ldw	r2,4(r16)
   1152c:	10800054 	ori	r2,r2,1
   11530:	80800115 	stw	r2,4(r16)
   11534:	9009883a 	mov	r4,r18
   11538:	00135480 	call	13548 <__malloc_unlock>
   1153c:	8805883a 	mov	r2,r17
   11540:	dfc00917 	ldw	ra,36(sp)
   11544:	df000817 	ldw	fp,32(sp)
   11548:	ddc00717 	ldw	r23,28(sp)
   1154c:	dd800617 	ldw	r22,24(sp)
   11550:	dd400517 	ldw	r21,20(sp)
   11554:	dd000417 	ldw	r20,16(sp)
   11558:	dcc00317 	ldw	r19,12(sp)
   1155c:	dc800217 	ldw	r18,8(sp)
   11560:	dc400117 	ldw	r17,4(sp)
   11564:	dc000017 	ldw	r16,0(sp)
   11568:	dec00a04 	addi	sp,sp,40
   1156c:	f800283a 	ret
   11570:	18c0004c 	andi	r3,r3,1
   11574:	1800081e 	bne	r3,zero,11598 <_realloc_r+0x16c>
   11578:	a4fffe17 	ldw	r19,-8(r20)
   1157c:	00bfff04 	movi	r2,-4
   11580:	ace7c83a 	sub	r19,r21,r19
   11584:	98c00117 	ldw	r3,4(r19)
   11588:	1886703a 	and	r3,r3,r2
   1158c:	98000226 	beq	r19,zero,11598 <_realloc_r+0x16c>
   11590:	1c2f883a 	add	r23,r3,r16
   11594:	b9c06d0e 	bge	r23,r7,1174c <_realloc_r+0x320>
   11598:	880b883a 	mov	r5,r17
   1159c:	9009883a 	mov	r4,r18
   115a0:	00109080 	call	10908 <_malloc_r>
   115a4:	1023883a 	mov	r17,r2
   115a8:	1000ef26 	beq	r2,zero,11968 <_realloc_r+0x53c>
   115ac:	a0ffff17 	ldw	r3,-4(r20)
   115b0:	113ffe04 	addi	r4,r2,-8
   115b4:	00bfff84 	movi	r2,-2
   115b8:	1884703a 	and	r2,r3,r2
   115bc:	a885883a 	add	r2,r21,r2
   115c0:	2080bf26 	beq	r4,r2,118c0 <_realloc_r+0x494>
   115c4:	81bfff04 	addi	r6,r16,-4
   115c8:	00800904 	movi	r2,36
   115cc:	11808936 	bltu	r2,r6,117f4 <_realloc_r+0x3c8>
   115d0:	00c004c4 	movi	r3,19
   115d4:	19806c2e 	bgeu	r3,r6,11788 <_realloc_r+0x35c>
   115d8:	a0c00017 	ldw	r3,0(r20)
   115dc:	88c00015 	stw	r3,0(r17)
   115e0:	a0c00117 	ldw	r3,4(r20)
   115e4:	88c00115 	stw	r3,4(r17)
   115e8:	00c006c4 	movi	r3,27
   115ec:	1980ac36 	bltu	r3,r6,118a0 <_realloc_r+0x474>
   115f0:	88800204 	addi	r2,r17,8
   115f4:	a0c00204 	addi	r3,r20,8
   115f8:	19000017 	ldw	r4,0(r3)
   115fc:	11000015 	stw	r4,0(r2)
   11600:	19000117 	ldw	r4,4(r3)
   11604:	11000115 	stw	r4,4(r2)
   11608:	18c00217 	ldw	r3,8(r3)
   1160c:	10c00215 	stw	r3,8(r2)
   11610:	a00b883a 	mov	r5,r20
   11614:	9009883a 	mov	r4,r18
   11618:	00122940 	call	12294 <_free_r>
   1161c:	9009883a 	mov	r4,r18
   11620:	00135480 	call	13548 <__malloc_unlock>
   11624:	8805883a 	mov	r2,r17
   11628:	003fc506 	br	11540 <_gp+0xffff23f8>
   1162c:	00800304 	movi	r2,12
   11630:	90800015 	stw	r2,0(r18)
   11634:	0005883a 	mov	r2,zero
   11638:	003fc106 	br	11540 <_gp+0xffff23f8>
   1163c:	29800117 	ldw	r6,4(r5)
   11640:	00bfff04 	movi	r2,-4
   11644:	b1000404 	addi	r4,r22,16
   11648:	3084703a 	and	r2,r6,r2
   1164c:	140d883a 	add	r6,r2,r16
   11650:	31005b0e 	bge	r6,r4,117c0 <_realloc_r+0x394>
   11654:	2811883a 	mov	r8,r5
   11658:	18c0004c 	andi	r3,r3,1
   1165c:	183fce1e 	bne	r3,zero,11598 <_gp+0xffff2450>
   11660:	a4fffe17 	ldw	r19,-8(r20)
   11664:	00ffff04 	movi	r3,-4
   11668:	ace7c83a 	sub	r19,r21,r19
   1166c:	99000117 	ldw	r4,4(r19)
   11670:	20c6703a 	and	r3,r4,r3
   11674:	403fc526 	beq	r8,zero,1158c <_gp+0xffff2444>
   11678:	1c2f883a 	add	r23,r3,r16
   1167c:	b8af883a 	add	r23,r23,r2
   11680:	41406026 	beq	r8,r5,11804 <_realloc_r+0x3d8>
   11684:	b9ffc116 	blt	r23,r7,1158c <_gp+0xffff2444>
   11688:	40c00217 	ldw	r3,8(r8)
   1168c:	40800317 	ldw	r2,12(r8)
   11690:	81bfff04 	addi	r6,r16,-4
   11694:	01000904 	movi	r4,36
   11698:	18800315 	stw	r2,12(r3)
   1169c:	10c00215 	stw	r3,8(r2)
   116a0:	99400217 	ldw	r5,8(r19)
   116a4:	98c00317 	ldw	r3,12(r19)
   116a8:	9c400204 	addi	r17,r19,8
   116ac:	28c00315 	stw	r3,12(r5)
   116b0:	19400215 	stw	r5,8(r3)
   116b4:	21802d36 	bltu	r4,r6,1176c <_realloc_r+0x340>
   116b8:	008004c4 	movi	r2,19
   116bc:	1180352e 	bgeu	r2,r6,11794 <_realloc_r+0x368>
   116c0:	a0800017 	ldw	r2,0(r20)
   116c4:	98800215 	stw	r2,8(r19)
   116c8:	a0800117 	ldw	r2,4(r20)
   116cc:	98800315 	stw	r2,12(r19)
   116d0:	008006c4 	movi	r2,27
   116d4:	11808036 	bltu	r2,r6,118d8 <_realloc_r+0x4ac>
   116d8:	98c00404 	addi	r3,r19,16
   116dc:	a5000204 	addi	r20,r20,8
   116e0:	00002d06 	br	11798 <_realloc_r+0x36c>
   116e4:	1d86b03a 	or	r3,r3,r22
   116e8:	ad8b883a 	add	r5,r21,r22
   116ec:	a8c00115 	stw	r3,4(r21)
   116f0:	38800054 	ori	r2,r7,1
   116f4:	28800115 	stw	r2,4(r5)
   116f8:	29cf883a 	add	r7,r5,r7
   116fc:	38800117 	ldw	r2,4(r7)
   11700:	9009883a 	mov	r4,r18
   11704:	29400204 	addi	r5,r5,8
   11708:	10800054 	ori	r2,r2,1
   1170c:	38800115 	stw	r2,4(r7)
   11710:	00122940 	call	12294 <_free_r>
   11714:	003f8706 	br	11534 <_gp+0xffff23ec>
   11718:	300b883a 	mov	r5,r6
   1171c:	dfc00917 	ldw	ra,36(sp)
   11720:	df000817 	ldw	fp,32(sp)
   11724:	ddc00717 	ldw	r23,28(sp)
   11728:	dd800617 	ldw	r22,24(sp)
   1172c:	dd400517 	ldw	r21,20(sp)
   11730:	dd000417 	ldw	r20,16(sp)
   11734:	dcc00317 	ldw	r19,12(sp)
   11738:	dc800217 	ldw	r18,8(sp)
   1173c:	dc400117 	ldw	r17,4(sp)
   11740:	dc000017 	ldw	r16,0(sp)
   11744:	dec00a04 	addi	sp,sp,40
   11748:	00109081 	jmpi	10908 <_malloc_r>
   1174c:	98800317 	ldw	r2,12(r19)
   11750:	98c00217 	ldw	r3,8(r19)
   11754:	81bfff04 	addi	r6,r16,-4
   11758:	01000904 	movi	r4,36
   1175c:	18800315 	stw	r2,12(r3)
   11760:	10c00215 	stw	r3,8(r2)
   11764:	9c400204 	addi	r17,r19,8
   11768:	21bfd32e 	bgeu	r4,r6,116b8 <_gp+0xffff2570>
   1176c:	8809883a 	mov	r4,r17
   11770:	a00b883a 	mov	r5,r20
   11774:	00112d00 	call	112d0 <memmove>
   11778:	98c00117 	ldw	r3,4(r19)
   1177c:	b821883a 	mov	r16,r23
   11780:	982b883a 	mov	r21,r19
   11784:	003f6106 	br	1150c <_gp+0xffff23c4>
   11788:	8805883a 	mov	r2,r17
   1178c:	a007883a 	mov	r3,r20
   11790:	003f9906 	br	115f8 <_gp+0xffff24b0>
   11794:	8807883a 	mov	r3,r17
   11798:	a0800017 	ldw	r2,0(r20)
   1179c:	b821883a 	mov	r16,r23
   117a0:	982b883a 	mov	r21,r19
   117a4:	18800015 	stw	r2,0(r3)
   117a8:	a0800117 	ldw	r2,4(r20)
   117ac:	18800115 	stw	r2,4(r3)
   117b0:	a0800217 	ldw	r2,8(r20)
   117b4:	18800215 	stw	r2,8(r3)
   117b8:	98c00117 	ldw	r3,4(r19)
   117bc:	003f5306 	br	1150c <_gp+0xffff23c4>
   117c0:	adab883a 	add	r21,r21,r22
   117c4:	3585c83a 	sub	r2,r6,r22
   117c8:	e5400215 	stw	r21,8(fp)
   117cc:	10800054 	ori	r2,r2,1
   117d0:	a8800115 	stw	r2,4(r21)
   117d4:	a0bfff17 	ldw	r2,-4(r20)
   117d8:	9009883a 	mov	r4,r18
   117dc:	1080004c 	andi	r2,r2,1
   117e0:	b0acb03a 	or	r22,r22,r2
   117e4:	a5bfff15 	stw	r22,-4(r20)
   117e8:	00135480 	call	13548 <__malloc_unlock>
   117ec:	a005883a 	mov	r2,r20
   117f0:	003f5306 	br	11540 <_gp+0xffff23f8>
   117f4:	8809883a 	mov	r4,r17
   117f8:	a00b883a 	mov	r5,r20
   117fc:	00112d00 	call	112d0 <memmove>
   11800:	003f8306 	br	11610 <_gp+0xffff24c8>
   11804:	b0800404 	addi	r2,r22,16
   11808:	b8bf6016 	blt	r23,r2,1158c <_gp+0xffff2444>
   1180c:	98800317 	ldw	r2,12(r19)
   11810:	98c00217 	ldw	r3,8(r19)
   11814:	81bfff04 	addi	r6,r16,-4
   11818:	01000904 	movi	r4,36
   1181c:	18800315 	stw	r2,12(r3)
   11820:	10c00215 	stw	r3,8(r2)
   11824:	9c400204 	addi	r17,r19,8
   11828:	21804336 	bltu	r4,r6,11938 <_realloc_r+0x50c>
   1182c:	008004c4 	movi	r2,19
   11830:	11803f2e 	bgeu	r2,r6,11930 <_realloc_r+0x504>
   11834:	a0800017 	ldw	r2,0(r20)
   11838:	98800215 	stw	r2,8(r19)
   1183c:	a0800117 	ldw	r2,4(r20)
   11840:	98800315 	stw	r2,12(r19)
   11844:	008006c4 	movi	r2,27
   11848:	11803f36 	bltu	r2,r6,11948 <_realloc_r+0x51c>
   1184c:	98800404 	addi	r2,r19,16
   11850:	a5000204 	addi	r20,r20,8
   11854:	a0c00017 	ldw	r3,0(r20)
   11858:	10c00015 	stw	r3,0(r2)
   1185c:	a0c00117 	ldw	r3,4(r20)
   11860:	10c00115 	stw	r3,4(r2)
   11864:	a0c00217 	ldw	r3,8(r20)
   11868:	10c00215 	stw	r3,8(r2)
   1186c:	9d87883a 	add	r3,r19,r22
   11870:	bd85c83a 	sub	r2,r23,r22
   11874:	e0c00215 	stw	r3,8(fp)
   11878:	10800054 	ori	r2,r2,1
   1187c:	18800115 	stw	r2,4(r3)
   11880:	98800117 	ldw	r2,4(r19)
   11884:	9009883a 	mov	r4,r18
   11888:	1080004c 	andi	r2,r2,1
   1188c:	b0acb03a 	or	r22,r22,r2
   11890:	9d800115 	stw	r22,4(r19)
   11894:	00135480 	call	13548 <__malloc_unlock>
   11898:	8805883a 	mov	r2,r17
   1189c:	003f2806 	br	11540 <_gp+0xffff23f8>
   118a0:	a0c00217 	ldw	r3,8(r20)
   118a4:	88c00215 	stw	r3,8(r17)
   118a8:	a0c00317 	ldw	r3,12(r20)
   118ac:	88c00315 	stw	r3,12(r17)
   118b0:	30801126 	beq	r6,r2,118f8 <_realloc_r+0x4cc>
   118b4:	88800404 	addi	r2,r17,16
   118b8:	a0c00404 	addi	r3,r20,16
   118bc:	003f4e06 	br	115f8 <_gp+0xffff24b0>
   118c0:	893fff17 	ldw	r4,-4(r17)
   118c4:	00bfff04 	movi	r2,-4
   118c8:	a023883a 	mov	r17,r20
   118cc:	2084703a 	and	r2,r4,r2
   118d0:	80a1883a 	add	r16,r16,r2
   118d4:	003f0d06 	br	1150c <_gp+0xffff23c4>
   118d8:	a0800217 	ldw	r2,8(r20)
   118dc:	98800415 	stw	r2,16(r19)
   118e0:	a0800317 	ldw	r2,12(r20)
   118e4:	98800515 	stw	r2,20(r19)
   118e8:	31000a26 	beq	r6,r4,11914 <_realloc_r+0x4e8>
   118ec:	98c00604 	addi	r3,r19,24
   118f0:	a5000404 	addi	r20,r20,16
   118f4:	003fa806 	br	11798 <_gp+0xffff2650>
   118f8:	a1000417 	ldw	r4,16(r20)
   118fc:	88800604 	addi	r2,r17,24
   11900:	a0c00604 	addi	r3,r20,24
   11904:	89000415 	stw	r4,16(r17)
   11908:	a1000517 	ldw	r4,20(r20)
   1190c:	89000515 	stw	r4,20(r17)
   11910:	003f3906 	br	115f8 <_gp+0xffff24b0>
   11914:	a0800417 	ldw	r2,16(r20)
   11918:	a5000604 	addi	r20,r20,24
   1191c:	98c00804 	addi	r3,r19,32
   11920:	98800615 	stw	r2,24(r19)
   11924:	a0bfff17 	ldw	r2,-4(r20)
   11928:	98800715 	stw	r2,28(r19)
   1192c:	003f9a06 	br	11798 <_gp+0xffff2650>
   11930:	8805883a 	mov	r2,r17
   11934:	003fc706 	br	11854 <_gp+0xffff270c>
   11938:	8809883a 	mov	r4,r17
   1193c:	a00b883a 	mov	r5,r20
   11940:	00112d00 	call	112d0 <memmove>
   11944:	003fc906 	br	1186c <_gp+0xffff2724>
   11948:	a0800217 	ldw	r2,8(r20)
   1194c:	98800415 	stw	r2,16(r19)
   11950:	a0800317 	ldw	r2,12(r20)
   11954:	98800515 	stw	r2,20(r19)
   11958:	31000726 	beq	r6,r4,11978 <_realloc_r+0x54c>
   1195c:	98800604 	addi	r2,r19,24
   11960:	a5000404 	addi	r20,r20,16
   11964:	003fbb06 	br	11854 <_gp+0xffff270c>
   11968:	9009883a 	mov	r4,r18
   1196c:	00135480 	call	13548 <__malloc_unlock>
   11970:	0005883a 	mov	r2,zero
   11974:	003ef206 	br	11540 <_gp+0xffff23f8>
   11978:	a0c00417 	ldw	r3,16(r20)
   1197c:	a5000604 	addi	r20,r20,24
   11980:	98800804 	addi	r2,r19,32
   11984:	98c00615 	stw	r3,24(r19)
   11988:	a0ffff17 	ldw	r3,-4(r20)
   1198c:	98c00715 	stw	r3,28(r19)
   11990:	003fb006 	br	11854 <_gp+0xffff270c>

00011994 <_sbrk_r>:
   11994:	defffd04 	addi	sp,sp,-12
   11998:	dc000015 	stw	r16,0(sp)
   1199c:	040000b4 	movhi	r16,2
   119a0:	dc400115 	stw	r17,4(sp)
   119a4:	8422fe04 	addi	r16,r16,-29704
   119a8:	2023883a 	mov	r17,r4
   119ac:	2809883a 	mov	r4,r5
   119b0:	dfc00215 	stw	ra,8(sp)
   119b4:	80000015 	stw	zero,0(r16)
   119b8:	00137140 	call	13714 <sbrk>
   119bc:	00ffffc4 	movi	r3,-1
   119c0:	10c00526 	beq	r2,r3,119d8 <_sbrk_r+0x44>
   119c4:	dfc00217 	ldw	ra,8(sp)
   119c8:	dc400117 	ldw	r17,4(sp)
   119cc:	dc000017 	ldw	r16,0(sp)
   119d0:	dec00304 	addi	sp,sp,12
   119d4:	f800283a 	ret
   119d8:	80c00017 	ldw	r3,0(r16)
   119dc:	183ff926 	beq	r3,zero,119c4 <_gp+0xffff287c>
   119e0:	88c00015 	stw	r3,0(r17)
   119e4:	003ff706 	br	119c4 <_gp+0xffff287c>

000119e8 <__swsetup_r>:
   119e8:	00800074 	movhi	r2,1
   119ec:	defffd04 	addi	sp,sp,-12
   119f0:	109c5304 	addi	r2,r2,29004
   119f4:	dc400115 	stw	r17,4(sp)
   119f8:	2023883a 	mov	r17,r4
   119fc:	11000017 	ldw	r4,0(r2)
   11a00:	dc000015 	stw	r16,0(sp)
   11a04:	dfc00215 	stw	ra,8(sp)
   11a08:	2821883a 	mov	r16,r5
   11a0c:	20000226 	beq	r4,zero,11a18 <__swsetup_r+0x30>
   11a10:	20c00e17 	ldw	r3,56(r4)
   11a14:	18003126 	beq	r3,zero,11adc <__swsetup_r+0xf4>
   11a18:	8080030b 	ldhu	r2,12(r16)
   11a1c:	10c0020c 	andi	r3,r2,8
   11a20:	100d883a 	mov	r6,r2
   11a24:	18000f26 	beq	r3,zero,11a64 <__swsetup_r+0x7c>
   11a28:	80c00417 	ldw	r3,16(r16)
   11a2c:	18001526 	beq	r3,zero,11a84 <__swsetup_r+0x9c>
   11a30:	1100004c 	andi	r4,r2,1
   11a34:	20001c1e 	bne	r4,zero,11aa8 <__swsetup_r+0xc0>
   11a38:	1080008c 	andi	r2,r2,2
   11a3c:	1000291e 	bne	r2,zero,11ae4 <__swsetup_r+0xfc>
   11a40:	80800517 	ldw	r2,20(r16)
   11a44:	80800215 	stw	r2,8(r16)
   11a48:	18001c26 	beq	r3,zero,11abc <__swsetup_r+0xd4>
   11a4c:	0005883a 	mov	r2,zero
   11a50:	dfc00217 	ldw	ra,8(sp)
   11a54:	dc400117 	ldw	r17,4(sp)
   11a58:	dc000017 	ldw	r16,0(sp)
   11a5c:	dec00304 	addi	sp,sp,12
   11a60:	f800283a 	ret
   11a64:	3080040c 	andi	r2,r6,16
   11a68:	10002e26 	beq	r2,zero,11b24 <__swsetup_r+0x13c>
   11a6c:	3080010c 	andi	r2,r6,4
   11a70:	10001e1e 	bne	r2,zero,11aec <__swsetup_r+0x104>
   11a74:	80c00417 	ldw	r3,16(r16)
   11a78:	30800214 	ori	r2,r6,8
   11a7c:	8080030d 	sth	r2,12(r16)
   11a80:	183feb1e 	bne	r3,zero,11a30 <_gp+0xffff28e8>
   11a84:	1140a00c 	andi	r5,r2,640
   11a88:	01008004 	movi	r4,512
   11a8c:	293fe826 	beq	r5,r4,11a30 <_gp+0xffff28e8>
   11a90:	8809883a 	mov	r4,r17
   11a94:	800b883a 	mov	r5,r16
   11a98:	001270c0 	call	1270c <__smakebuf_r>
   11a9c:	8080030b 	ldhu	r2,12(r16)
   11aa0:	80c00417 	ldw	r3,16(r16)
   11aa4:	003fe206 	br	11a30 <_gp+0xffff28e8>
   11aa8:	80800517 	ldw	r2,20(r16)
   11aac:	80000215 	stw	zero,8(r16)
   11ab0:	0085c83a 	sub	r2,zero,r2
   11ab4:	80800615 	stw	r2,24(r16)
   11ab8:	183fe41e 	bne	r3,zero,11a4c <_gp+0xffff2904>
   11abc:	80c0030b 	ldhu	r3,12(r16)
   11ac0:	0005883a 	mov	r2,zero
   11ac4:	1900200c 	andi	r4,r3,128
   11ac8:	203fe126 	beq	r4,zero,11a50 <_gp+0xffff2908>
   11acc:	18c01014 	ori	r3,r3,64
   11ad0:	80c0030d 	sth	r3,12(r16)
   11ad4:	00bfffc4 	movi	r2,-1
   11ad8:	003fdd06 	br	11a50 <_gp+0xffff2908>
   11adc:	00121200 	call	12120 <__sinit>
   11ae0:	003fcd06 	br	11a18 <_gp+0xffff28d0>
   11ae4:	0005883a 	mov	r2,zero
   11ae8:	003fd606 	br	11a44 <_gp+0xffff28fc>
   11aec:	81400c17 	ldw	r5,48(r16)
   11af0:	28000626 	beq	r5,zero,11b0c <__swsetup_r+0x124>
   11af4:	80801004 	addi	r2,r16,64
   11af8:	28800326 	beq	r5,r2,11b08 <__swsetup_r+0x120>
   11afc:	8809883a 	mov	r4,r17
   11b00:	00122940 	call	12294 <_free_r>
   11b04:	8180030b 	ldhu	r6,12(r16)
   11b08:	80000c15 	stw	zero,48(r16)
   11b0c:	80c00417 	ldw	r3,16(r16)
   11b10:	00bff6c4 	movi	r2,-37
   11b14:	118c703a 	and	r6,r2,r6
   11b18:	80000115 	stw	zero,4(r16)
   11b1c:	80c00015 	stw	r3,0(r16)
   11b20:	003fd506 	br	11a78 <_gp+0xffff2930>
   11b24:	00800244 	movi	r2,9
   11b28:	88800015 	stw	r2,0(r17)
   11b2c:	30801014 	ori	r2,r6,64
   11b30:	8080030d 	sth	r2,12(r16)
   11b34:	00bfffc4 	movi	r2,-1
   11b38:	003fc506 	br	11a50 <_gp+0xffff2908>

00011b3c <__sflush_r>:
   11b3c:	2880030b 	ldhu	r2,12(r5)
   11b40:	defffb04 	addi	sp,sp,-20
   11b44:	dcc00315 	stw	r19,12(sp)
   11b48:	dc400115 	stw	r17,4(sp)
   11b4c:	dfc00415 	stw	ra,16(sp)
   11b50:	dc800215 	stw	r18,8(sp)
   11b54:	dc000015 	stw	r16,0(sp)
   11b58:	10c0020c 	andi	r3,r2,8
   11b5c:	2823883a 	mov	r17,r5
   11b60:	2027883a 	mov	r19,r4
   11b64:	1800311e 	bne	r3,zero,11c2c <__sflush_r+0xf0>
   11b68:	28c00117 	ldw	r3,4(r5)
   11b6c:	10820014 	ori	r2,r2,2048
   11b70:	2880030d 	sth	r2,12(r5)
   11b74:	00c04b0e 	bge	zero,r3,11ca4 <__sflush_r+0x168>
   11b78:	8a000a17 	ldw	r8,40(r17)
   11b7c:	40002326 	beq	r8,zero,11c0c <__sflush_r+0xd0>
   11b80:	9c000017 	ldw	r16,0(r19)
   11b84:	10c4000c 	andi	r3,r2,4096
   11b88:	98000015 	stw	zero,0(r19)
   11b8c:	18004826 	beq	r3,zero,11cb0 <__sflush_r+0x174>
   11b90:	89801417 	ldw	r6,80(r17)
   11b94:	10c0010c 	andi	r3,r2,4
   11b98:	18000626 	beq	r3,zero,11bb4 <__sflush_r+0x78>
   11b9c:	88c00117 	ldw	r3,4(r17)
   11ba0:	88800c17 	ldw	r2,48(r17)
   11ba4:	30cdc83a 	sub	r6,r6,r3
   11ba8:	10000226 	beq	r2,zero,11bb4 <__sflush_r+0x78>
   11bac:	88800f17 	ldw	r2,60(r17)
   11bb0:	308dc83a 	sub	r6,r6,r2
   11bb4:	89400717 	ldw	r5,28(r17)
   11bb8:	9809883a 	mov	r4,r19
   11bbc:	000f883a 	mov	r7,zero
   11bc0:	403ee83a 	callr	r8
   11bc4:	00ffffc4 	movi	r3,-1
   11bc8:	10c04426 	beq	r2,r3,11cdc <__sflush_r+0x1a0>
   11bcc:	88c0030b 	ldhu	r3,12(r17)
   11bd0:	89000417 	ldw	r4,16(r17)
   11bd4:	88000115 	stw	zero,4(r17)
   11bd8:	197dffcc 	andi	r5,r3,63487
   11bdc:	8940030d 	sth	r5,12(r17)
   11be0:	89000015 	stw	r4,0(r17)
   11be4:	18c4000c 	andi	r3,r3,4096
   11be8:	18002c1e 	bne	r3,zero,11c9c <__sflush_r+0x160>
   11bec:	89400c17 	ldw	r5,48(r17)
   11bf0:	9c000015 	stw	r16,0(r19)
   11bf4:	28000526 	beq	r5,zero,11c0c <__sflush_r+0xd0>
   11bf8:	88801004 	addi	r2,r17,64
   11bfc:	28800226 	beq	r5,r2,11c08 <__sflush_r+0xcc>
   11c00:	9809883a 	mov	r4,r19
   11c04:	00122940 	call	12294 <_free_r>
   11c08:	88000c15 	stw	zero,48(r17)
   11c0c:	0005883a 	mov	r2,zero
   11c10:	dfc00417 	ldw	ra,16(sp)
   11c14:	dcc00317 	ldw	r19,12(sp)
   11c18:	dc800217 	ldw	r18,8(sp)
   11c1c:	dc400117 	ldw	r17,4(sp)
   11c20:	dc000017 	ldw	r16,0(sp)
   11c24:	dec00504 	addi	sp,sp,20
   11c28:	f800283a 	ret
   11c2c:	2c800417 	ldw	r18,16(r5)
   11c30:	903ff626 	beq	r18,zero,11c0c <_gp+0xffff2ac4>
   11c34:	2c000017 	ldw	r16,0(r5)
   11c38:	108000cc 	andi	r2,r2,3
   11c3c:	2c800015 	stw	r18,0(r5)
   11c40:	84a1c83a 	sub	r16,r16,r18
   11c44:	1000131e 	bne	r2,zero,11c94 <__sflush_r+0x158>
   11c48:	28800517 	ldw	r2,20(r5)
   11c4c:	88800215 	stw	r2,8(r17)
   11c50:	04000316 	blt	zero,r16,11c60 <__sflush_r+0x124>
   11c54:	003fed06 	br	11c0c <_gp+0xffff2ac4>
   11c58:	90a5883a 	add	r18,r18,r2
   11c5c:	043feb0e 	bge	zero,r16,11c0c <_gp+0xffff2ac4>
   11c60:	88800917 	ldw	r2,36(r17)
   11c64:	89400717 	ldw	r5,28(r17)
   11c68:	800f883a 	mov	r7,r16
   11c6c:	900d883a 	mov	r6,r18
   11c70:	9809883a 	mov	r4,r19
   11c74:	103ee83a 	callr	r2
   11c78:	80a1c83a 	sub	r16,r16,r2
   11c7c:	00bff616 	blt	zero,r2,11c58 <_gp+0xffff2b10>
   11c80:	88c0030b 	ldhu	r3,12(r17)
   11c84:	00bfffc4 	movi	r2,-1
   11c88:	18c01014 	ori	r3,r3,64
   11c8c:	88c0030d 	sth	r3,12(r17)
   11c90:	003fdf06 	br	11c10 <_gp+0xffff2ac8>
   11c94:	0005883a 	mov	r2,zero
   11c98:	003fec06 	br	11c4c <_gp+0xffff2b04>
   11c9c:	88801415 	stw	r2,80(r17)
   11ca0:	003fd206 	br	11bec <_gp+0xffff2aa4>
   11ca4:	28c00f17 	ldw	r3,60(r5)
   11ca8:	00ffb316 	blt	zero,r3,11b78 <_gp+0xffff2a30>
   11cac:	003fd706 	br	11c0c <_gp+0xffff2ac4>
   11cb0:	89400717 	ldw	r5,28(r17)
   11cb4:	000d883a 	mov	r6,zero
   11cb8:	9809883a 	mov	r4,r19
   11cbc:	01c00044 	movi	r7,1
   11cc0:	403ee83a 	callr	r8
   11cc4:	100d883a 	mov	r6,r2
   11cc8:	00bfffc4 	movi	r2,-1
   11ccc:	30801426 	beq	r6,r2,11d20 <__sflush_r+0x1e4>
   11cd0:	8880030b 	ldhu	r2,12(r17)
   11cd4:	8a000a17 	ldw	r8,40(r17)
   11cd8:	003fae06 	br	11b94 <_gp+0xffff2a4c>
   11cdc:	98c00017 	ldw	r3,0(r19)
   11ce0:	183fba26 	beq	r3,zero,11bcc <_gp+0xffff2a84>
   11ce4:	01000744 	movi	r4,29
   11ce8:	19000626 	beq	r3,r4,11d04 <__sflush_r+0x1c8>
   11cec:	01000584 	movi	r4,22
   11cf0:	19000426 	beq	r3,r4,11d04 <__sflush_r+0x1c8>
   11cf4:	88c0030b 	ldhu	r3,12(r17)
   11cf8:	18c01014 	ori	r3,r3,64
   11cfc:	88c0030d 	sth	r3,12(r17)
   11d00:	003fc306 	br	11c10 <_gp+0xffff2ac8>
   11d04:	8880030b 	ldhu	r2,12(r17)
   11d08:	88c00417 	ldw	r3,16(r17)
   11d0c:	88000115 	stw	zero,4(r17)
   11d10:	10bdffcc 	andi	r2,r2,63487
   11d14:	8880030d 	sth	r2,12(r17)
   11d18:	88c00015 	stw	r3,0(r17)
   11d1c:	003fb306 	br	11bec <_gp+0xffff2aa4>
   11d20:	98800017 	ldw	r2,0(r19)
   11d24:	103fea26 	beq	r2,zero,11cd0 <_gp+0xffff2b88>
   11d28:	00c00744 	movi	r3,29
   11d2c:	10c00226 	beq	r2,r3,11d38 <__sflush_r+0x1fc>
   11d30:	00c00584 	movi	r3,22
   11d34:	10ffd21e 	bne	r2,r3,11c80 <_gp+0xffff2b38>
   11d38:	9c000015 	stw	r16,0(r19)
   11d3c:	0005883a 	mov	r2,zero
   11d40:	003fb306 	br	11c10 <_gp+0xffff2ac8>

00011d44 <_fflush_r>:
   11d44:	defffd04 	addi	sp,sp,-12
   11d48:	dc000115 	stw	r16,4(sp)
   11d4c:	dfc00215 	stw	ra,8(sp)
   11d50:	2021883a 	mov	r16,r4
   11d54:	20000226 	beq	r4,zero,11d60 <_fflush_r+0x1c>
   11d58:	20800e17 	ldw	r2,56(r4)
   11d5c:	10000c26 	beq	r2,zero,11d90 <_fflush_r+0x4c>
   11d60:	2880030f 	ldh	r2,12(r5)
   11d64:	1000051e 	bne	r2,zero,11d7c <_fflush_r+0x38>
   11d68:	0005883a 	mov	r2,zero
   11d6c:	dfc00217 	ldw	ra,8(sp)
   11d70:	dc000117 	ldw	r16,4(sp)
   11d74:	dec00304 	addi	sp,sp,12
   11d78:	f800283a 	ret
   11d7c:	8009883a 	mov	r4,r16
   11d80:	dfc00217 	ldw	ra,8(sp)
   11d84:	dc000117 	ldw	r16,4(sp)
   11d88:	dec00304 	addi	sp,sp,12
   11d8c:	0011b3c1 	jmpi	11b3c <__sflush_r>
   11d90:	d9400015 	stw	r5,0(sp)
   11d94:	00121200 	call	12120 <__sinit>
   11d98:	d9400017 	ldw	r5,0(sp)
   11d9c:	003ff006 	br	11d60 <_gp+0xffff2c18>

00011da0 <fflush>:
   11da0:	20000526 	beq	r4,zero,11db8 <fflush+0x18>
   11da4:	00800074 	movhi	r2,1
   11da8:	109c5304 	addi	r2,r2,29004
   11dac:	200b883a 	mov	r5,r4
   11db0:	11000017 	ldw	r4,0(r2)
   11db4:	0011d441 	jmpi	11d44 <_fflush_r>
   11db8:	00800074 	movhi	r2,1
   11dbc:	109c5204 	addi	r2,r2,29000
   11dc0:	11000017 	ldw	r4,0(r2)
   11dc4:	01400074 	movhi	r5,1
   11dc8:	29475104 	addi	r5,r5,7492
   11dcc:	00126481 	jmpi	12648 <_fwalk_reent>

00011dd0 <__fp_lock>:
   11dd0:	0005883a 	mov	r2,zero
   11dd4:	f800283a 	ret

00011dd8 <__fp_unlock>:
   11dd8:	0005883a 	mov	r2,zero
   11ddc:	f800283a 	ret

00011de0 <_cleanup_r>:
   11de0:	01400074 	movhi	r5,1
   11de4:	294af504 	addi	r5,r5,11220
   11de8:	00126481 	jmpi	12648 <_fwalk_reent>

00011dec <__sinit.part.1>:
   11dec:	defff704 	addi	sp,sp,-36
   11df0:	00c00074 	movhi	r3,1
   11df4:	dfc00815 	stw	ra,32(sp)
   11df8:	ddc00715 	stw	r23,28(sp)
   11dfc:	dd800615 	stw	r22,24(sp)
   11e00:	dd400515 	stw	r21,20(sp)
   11e04:	dd000415 	stw	r20,16(sp)
   11e08:	dcc00315 	stw	r19,12(sp)
   11e0c:	dc800215 	stw	r18,8(sp)
   11e10:	dc400115 	stw	r17,4(sp)
   11e14:	dc000015 	stw	r16,0(sp)
   11e18:	18c77804 	addi	r3,r3,7648
   11e1c:	24000117 	ldw	r16,4(r4)
   11e20:	20c00f15 	stw	r3,60(r4)
   11e24:	2080bb04 	addi	r2,r4,748
   11e28:	00c000c4 	movi	r3,3
   11e2c:	20c0b915 	stw	r3,740(r4)
   11e30:	2080ba15 	stw	r2,744(r4)
   11e34:	2000b815 	stw	zero,736(r4)
   11e38:	05c00204 	movi	r23,8
   11e3c:	00800104 	movi	r2,4
   11e40:	2025883a 	mov	r18,r4
   11e44:	b80d883a 	mov	r6,r23
   11e48:	81001704 	addi	r4,r16,92
   11e4c:	000b883a 	mov	r5,zero
   11e50:	80000015 	stw	zero,0(r16)
   11e54:	80000115 	stw	zero,4(r16)
   11e58:	80000215 	stw	zero,8(r16)
   11e5c:	8080030d 	sth	r2,12(r16)
   11e60:	80001915 	stw	zero,100(r16)
   11e64:	8000038d 	sth	zero,14(r16)
   11e68:	80000415 	stw	zero,16(r16)
   11e6c:	80000515 	stw	zero,20(r16)
   11e70:	80000615 	stw	zero,24(r16)
   11e74:	00128c40 	call	128c4 <memset>
   11e78:	05800074 	movhi	r22,1
   11e7c:	94400217 	ldw	r17,8(r18)
   11e80:	05400074 	movhi	r21,1
   11e84:	05000074 	movhi	r20,1
   11e88:	04c00074 	movhi	r19,1
   11e8c:	b58a7a04 	addi	r22,r22,10728
   11e90:	ad4a9104 	addi	r21,r21,10820
   11e94:	a50ab004 	addi	r20,r20,10944
   11e98:	9ccac704 	addi	r19,r19,11036
   11e9c:	85800815 	stw	r22,32(r16)
   11ea0:	85400915 	stw	r21,36(r16)
   11ea4:	85000a15 	stw	r20,40(r16)
   11ea8:	84c00b15 	stw	r19,44(r16)
   11eac:	84000715 	stw	r16,28(r16)
   11eb0:	00800284 	movi	r2,10
   11eb4:	8880030d 	sth	r2,12(r17)
   11eb8:	00800044 	movi	r2,1
   11ebc:	89001704 	addi	r4,r17,92
   11ec0:	b80d883a 	mov	r6,r23
   11ec4:	000b883a 	mov	r5,zero
   11ec8:	88000015 	stw	zero,0(r17)
   11ecc:	88000115 	stw	zero,4(r17)
   11ed0:	88000215 	stw	zero,8(r17)
   11ed4:	88001915 	stw	zero,100(r17)
   11ed8:	8880038d 	sth	r2,14(r17)
   11edc:	88000415 	stw	zero,16(r17)
   11ee0:	88000515 	stw	zero,20(r17)
   11ee4:	88000615 	stw	zero,24(r17)
   11ee8:	00128c40 	call	128c4 <memset>
   11eec:	94000317 	ldw	r16,12(r18)
   11ef0:	00800484 	movi	r2,18
   11ef4:	8c400715 	stw	r17,28(r17)
   11ef8:	8d800815 	stw	r22,32(r17)
   11efc:	8d400915 	stw	r21,36(r17)
   11f00:	8d000a15 	stw	r20,40(r17)
   11f04:	8cc00b15 	stw	r19,44(r17)
   11f08:	8080030d 	sth	r2,12(r16)
   11f0c:	00800084 	movi	r2,2
   11f10:	80000015 	stw	zero,0(r16)
   11f14:	80000115 	stw	zero,4(r16)
   11f18:	80000215 	stw	zero,8(r16)
   11f1c:	80001915 	stw	zero,100(r16)
   11f20:	8080038d 	sth	r2,14(r16)
   11f24:	80000415 	stw	zero,16(r16)
   11f28:	80000515 	stw	zero,20(r16)
   11f2c:	80000615 	stw	zero,24(r16)
   11f30:	81001704 	addi	r4,r16,92
   11f34:	000b883a 	mov	r5,zero
   11f38:	b80d883a 	mov	r6,r23
   11f3c:	00128c40 	call	128c4 <memset>
   11f40:	00800044 	movi	r2,1
   11f44:	84000715 	stw	r16,28(r16)
   11f48:	85800815 	stw	r22,32(r16)
   11f4c:	85400915 	stw	r21,36(r16)
   11f50:	85000a15 	stw	r20,40(r16)
   11f54:	84c00b15 	stw	r19,44(r16)
   11f58:	90800e15 	stw	r2,56(r18)
   11f5c:	dfc00817 	ldw	ra,32(sp)
   11f60:	ddc00717 	ldw	r23,28(sp)
   11f64:	dd800617 	ldw	r22,24(sp)
   11f68:	dd400517 	ldw	r21,20(sp)
   11f6c:	dd000417 	ldw	r20,16(sp)
   11f70:	dcc00317 	ldw	r19,12(sp)
   11f74:	dc800217 	ldw	r18,8(sp)
   11f78:	dc400117 	ldw	r17,4(sp)
   11f7c:	dc000017 	ldw	r16,0(sp)
   11f80:	dec00904 	addi	sp,sp,36
   11f84:	f800283a 	ret

00011f88 <__sfmoreglue>:
   11f88:	defffc04 	addi	sp,sp,-16
   11f8c:	dc400115 	stw	r17,4(sp)
   11f90:	2c7fffc4 	addi	r17,r5,-1
   11f94:	8c401a24 	muli	r17,r17,104
   11f98:	dc800215 	stw	r18,8(sp)
   11f9c:	2825883a 	mov	r18,r5
   11fa0:	89401d04 	addi	r5,r17,116
   11fa4:	dc000015 	stw	r16,0(sp)
   11fa8:	dfc00315 	stw	ra,12(sp)
   11fac:	00109080 	call	10908 <_malloc_r>
   11fb0:	1021883a 	mov	r16,r2
   11fb4:	10000726 	beq	r2,zero,11fd4 <__sfmoreglue+0x4c>
   11fb8:	11000304 	addi	r4,r2,12
   11fbc:	10000015 	stw	zero,0(r2)
   11fc0:	14800115 	stw	r18,4(r2)
   11fc4:	11000215 	stw	r4,8(r2)
   11fc8:	000b883a 	mov	r5,zero
   11fcc:	89801a04 	addi	r6,r17,104
   11fd0:	00128c40 	call	128c4 <memset>
   11fd4:	8005883a 	mov	r2,r16
   11fd8:	dfc00317 	ldw	ra,12(sp)
   11fdc:	dc800217 	ldw	r18,8(sp)
   11fe0:	dc400117 	ldw	r17,4(sp)
   11fe4:	dc000017 	ldw	r16,0(sp)
   11fe8:	dec00404 	addi	sp,sp,16
   11fec:	f800283a 	ret

00011ff0 <__sfp>:
   11ff0:	00800074 	movhi	r2,1
   11ff4:	defffb04 	addi	sp,sp,-20
   11ff8:	109c5204 	addi	r2,r2,29000
   11ffc:	dc800215 	stw	r18,8(sp)
   12000:	14800017 	ldw	r18,0(r2)
   12004:	dcc00315 	stw	r19,12(sp)
   12008:	dfc00415 	stw	ra,16(sp)
   1200c:	90800e17 	ldw	r2,56(r18)
   12010:	dc400115 	stw	r17,4(sp)
   12014:	dc000015 	stw	r16,0(sp)
   12018:	2027883a 	mov	r19,r4
   1201c:	1000021e 	bne	r2,zero,12028 <__sfp+0x38>
   12020:	9009883a 	mov	r4,r18
   12024:	0011dec0 	call	11dec <__sinit.part.1>
   12028:	9480b804 	addi	r18,r18,736
   1202c:	047fffc4 	movi	r17,-1
   12030:	91400117 	ldw	r5,4(r18)
   12034:	94000217 	ldw	r16,8(r18)
   12038:	297fffc4 	addi	r5,r5,-1
   1203c:	28000a16 	blt	r5,zero,12068 <__sfp+0x78>
   12040:	8080030f 	ldh	r2,12(r16)
   12044:	10000c26 	beq	r2,zero,12078 <__sfp+0x88>
   12048:	80c01d04 	addi	r3,r16,116
   1204c:	00000206 	br	12058 <__sfp+0x68>
   12050:	18bfe60f 	ldh	r2,-104(r3)
   12054:	10000826 	beq	r2,zero,12078 <__sfp+0x88>
   12058:	297fffc4 	addi	r5,r5,-1
   1205c:	1c3ffd04 	addi	r16,r3,-12
   12060:	18c01a04 	addi	r3,r3,104
   12064:	2c7ffa1e 	bne	r5,r17,12050 <_gp+0xffff2f08>
   12068:	90800017 	ldw	r2,0(r18)
   1206c:	10001d26 	beq	r2,zero,120e4 <__sfp+0xf4>
   12070:	1025883a 	mov	r18,r2
   12074:	003fee06 	br	12030 <_gp+0xffff2ee8>
   12078:	00bfffc4 	movi	r2,-1
   1207c:	8080038d 	sth	r2,14(r16)
   12080:	00800044 	movi	r2,1
   12084:	8080030d 	sth	r2,12(r16)
   12088:	80001915 	stw	zero,100(r16)
   1208c:	80000015 	stw	zero,0(r16)
   12090:	80000215 	stw	zero,8(r16)
   12094:	80000115 	stw	zero,4(r16)
   12098:	80000415 	stw	zero,16(r16)
   1209c:	80000515 	stw	zero,20(r16)
   120a0:	80000615 	stw	zero,24(r16)
   120a4:	81001704 	addi	r4,r16,92
   120a8:	000b883a 	mov	r5,zero
   120ac:	01800204 	movi	r6,8
   120b0:	00128c40 	call	128c4 <memset>
   120b4:	8005883a 	mov	r2,r16
   120b8:	80000c15 	stw	zero,48(r16)
   120bc:	80000d15 	stw	zero,52(r16)
   120c0:	80001115 	stw	zero,68(r16)
   120c4:	80001215 	stw	zero,72(r16)
   120c8:	dfc00417 	ldw	ra,16(sp)
   120cc:	dcc00317 	ldw	r19,12(sp)
   120d0:	dc800217 	ldw	r18,8(sp)
   120d4:	dc400117 	ldw	r17,4(sp)
   120d8:	dc000017 	ldw	r16,0(sp)
   120dc:	dec00504 	addi	sp,sp,20
   120e0:	f800283a 	ret
   120e4:	9809883a 	mov	r4,r19
   120e8:	01400104 	movi	r5,4
   120ec:	0011f880 	call	11f88 <__sfmoreglue>
   120f0:	90800015 	stw	r2,0(r18)
   120f4:	103fde1e 	bne	r2,zero,12070 <_gp+0xffff2f28>
   120f8:	00800304 	movi	r2,12
   120fc:	98800015 	stw	r2,0(r19)
   12100:	0005883a 	mov	r2,zero
   12104:	003ff006 	br	120c8 <_gp+0xffff2f80>

00012108 <_cleanup>:
   12108:	00800074 	movhi	r2,1
   1210c:	109c5204 	addi	r2,r2,29000
   12110:	11000017 	ldw	r4,0(r2)
   12114:	01400074 	movhi	r5,1
   12118:	294af504 	addi	r5,r5,11220
   1211c:	00126481 	jmpi	12648 <_fwalk_reent>

00012120 <__sinit>:
   12120:	20800e17 	ldw	r2,56(r4)
   12124:	10000126 	beq	r2,zero,1212c <__sinit+0xc>
   12128:	f800283a 	ret
   1212c:	0011dec1 	jmpi	11dec <__sinit.part.1>

00012130 <__sfp_lock_acquire>:
   12130:	f800283a 	ret

00012134 <__sfp_lock_release>:
   12134:	f800283a 	ret

00012138 <__sinit_lock_acquire>:
   12138:	f800283a 	ret

0001213c <__sinit_lock_release>:
   1213c:	f800283a 	ret

00012140 <__fp_lock_all>:
   12140:	00800074 	movhi	r2,1
   12144:	109c5304 	addi	r2,r2,29004
   12148:	11000017 	ldw	r4,0(r2)
   1214c:	01400074 	movhi	r5,1
   12150:	29477404 	addi	r5,r5,7632
   12154:	00125841 	jmpi	12584 <_fwalk>

00012158 <__fp_unlock_all>:
   12158:	00800074 	movhi	r2,1
   1215c:	109c5304 	addi	r2,r2,29004
   12160:	11000017 	ldw	r4,0(r2)
   12164:	01400074 	movhi	r5,1
   12168:	29477604 	addi	r5,r5,7640
   1216c:	00125841 	jmpi	12584 <_fwalk>

00012170 <_malloc_trim_r>:
   12170:	defffb04 	addi	sp,sp,-20
   12174:	dcc00315 	stw	r19,12(sp)
   12178:	04c00074 	movhi	r19,1
   1217c:	dc800215 	stw	r18,8(sp)
   12180:	dc400115 	stw	r17,4(sp)
   12184:	dc000015 	stw	r16,0(sp)
   12188:	dfc00415 	stw	ra,16(sp)
   1218c:	2821883a 	mov	r16,r5
   12190:	9cd6ce04 	addi	r19,r19,23352
   12194:	2025883a 	mov	r18,r4
   12198:	00135280 	call	13528 <__malloc_lock>
   1219c:	98800217 	ldw	r2,8(r19)
   121a0:	14400117 	ldw	r17,4(r2)
   121a4:	00bfff04 	movi	r2,-4
   121a8:	88a2703a 	and	r17,r17,r2
   121ac:	8c21c83a 	sub	r16,r17,r16
   121b0:	8403fbc4 	addi	r16,r16,4079
   121b4:	8020d33a 	srli	r16,r16,12
   121b8:	0083ffc4 	movi	r2,4095
   121bc:	843fffc4 	addi	r16,r16,-1
   121c0:	8020933a 	slli	r16,r16,12
   121c4:	1400060e 	bge	r2,r16,121e0 <_malloc_trim_r+0x70>
   121c8:	9009883a 	mov	r4,r18
   121cc:	000b883a 	mov	r5,zero
   121d0:	00119940 	call	11994 <_sbrk_r>
   121d4:	98c00217 	ldw	r3,8(r19)
   121d8:	1c47883a 	add	r3,r3,r17
   121dc:	10c00a26 	beq	r2,r3,12208 <_malloc_trim_r+0x98>
   121e0:	9009883a 	mov	r4,r18
   121e4:	00135480 	call	13548 <__malloc_unlock>
   121e8:	0005883a 	mov	r2,zero
   121ec:	dfc00417 	ldw	ra,16(sp)
   121f0:	dcc00317 	ldw	r19,12(sp)
   121f4:	dc800217 	ldw	r18,8(sp)
   121f8:	dc400117 	ldw	r17,4(sp)
   121fc:	dc000017 	ldw	r16,0(sp)
   12200:	dec00504 	addi	sp,sp,20
   12204:	f800283a 	ret
   12208:	9009883a 	mov	r4,r18
   1220c:	040bc83a 	sub	r5,zero,r16
   12210:	00119940 	call	11994 <_sbrk_r>
   12214:	00ffffc4 	movi	r3,-1
   12218:	10c00d26 	beq	r2,r3,12250 <_malloc_trim_r+0xe0>
   1221c:	00c000b4 	movhi	r3,2
   12220:	18e30604 	addi	r3,r3,-29672
   12224:	18800017 	ldw	r2,0(r3)
   12228:	99000217 	ldw	r4,8(r19)
   1222c:	8c23c83a 	sub	r17,r17,r16
   12230:	8c400054 	ori	r17,r17,1
   12234:	1421c83a 	sub	r16,r2,r16
   12238:	24400115 	stw	r17,4(r4)
   1223c:	9009883a 	mov	r4,r18
   12240:	1c000015 	stw	r16,0(r3)
   12244:	00135480 	call	13548 <__malloc_unlock>
   12248:	00800044 	movi	r2,1
   1224c:	003fe706 	br	121ec <_gp+0xffff30a4>
   12250:	9009883a 	mov	r4,r18
   12254:	000b883a 	mov	r5,zero
   12258:	00119940 	call	11994 <_sbrk_r>
   1225c:	99000217 	ldw	r4,8(r19)
   12260:	014003c4 	movi	r5,15
   12264:	1107c83a 	sub	r3,r2,r4
   12268:	28ffdd0e 	bge	r5,r3,121e0 <_gp+0xffff3098>
   1226c:	01400074 	movhi	r5,1
   12270:	295c5404 	addi	r5,r5,29008
   12274:	29400017 	ldw	r5,0(r5)
   12278:	18c00054 	ori	r3,r3,1
   1227c:	20c00115 	stw	r3,4(r4)
   12280:	00c000b4 	movhi	r3,2
   12284:	1145c83a 	sub	r2,r2,r5
   12288:	18e30604 	addi	r3,r3,-29672
   1228c:	18800015 	stw	r2,0(r3)
   12290:	003fd306 	br	121e0 <_gp+0xffff3098>

00012294 <_free_r>:
   12294:	28004c26 	beq	r5,zero,123c8 <_free_r+0x134>
   12298:	defffd04 	addi	sp,sp,-12
   1229c:	dc400115 	stw	r17,4(sp)
   122a0:	dc000015 	stw	r16,0(sp)
   122a4:	2023883a 	mov	r17,r4
   122a8:	2821883a 	mov	r16,r5
   122ac:	dfc00215 	stw	ra,8(sp)
   122b0:	00135280 	call	13528 <__malloc_lock>
   122b4:	813fff17 	ldw	r4,-4(r16)
   122b8:	00bfff84 	movi	r2,-2
   122bc:	02400074 	movhi	r9,1
   122c0:	81bffe04 	addi	r6,r16,-8
   122c4:	2084703a 	and	r2,r4,r2
   122c8:	4a56ce04 	addi	r9,r9,23352
   122cc:	308b883a 	add	r5,r6,r2
   122d0:	2a000117 	ldw	r8,4(r5)
   122d4:	49c00217 	ldw	r7,8(r9)
   122d8:	00ffff04 	movi	r3,-4
   122dc:	40c6703a 	and	r3,r8,r3
   122e0:	39405326 	beq	r7,r5,12430 <_free_r+0x19c>
   122e4:	28c00115 	stw	r3,4(r5)
   122e8:	2100004c 	andi	r4,r4,1
   122ec:	2000091e 	bne	r4,zero,12314 <_free_r+0x80>
   122f0:	81fffe17 	ldw	r7,-8(r16)
   122f4:	4a000204 	addi	r8,r9,8
   122f8:	31cdc83a 	sub	r6,r6,r7
   122fc:	31000217 	ldw	r4,8(r6)
   12300:	11c5883a 	add	r2,r2,r7
   12304:	22006126 	beq	r4,r8,1248c <_free_r+0x1f8>
   12308:	31c00317 	ldw	r7,12(r6)
   1230c:	21c00315 	stw	r7,12(r4)
   12310:	39000215 	stw	r4,8(r7)
   12314:	28c9883a 	add	r4,r5,r3
   12318:	21c00117 	ldw	r7,4(r4)
   1231c:	39c0004c 	andi	r7,r7,1
   12320:	38000d1e 	bne	r7,zero,12358 <_free_r+0xc4>
   12324:	29000217 	ldw	r4,8(r5)
   12328:	10c5883a 	add	r2,r2,r3
   1232c:	00c00074 	movhi	r3,1
   12330:	18d6d004 	addi	r3,r3,23360
   12334:	20c07526 	beq	r4,r3,1250c <_free_r+0x278>
   12338:	29c00317 	ldw	r7,12(r5)
   1233c:	11400054 	ori	r5,r2,1
   12340:	3087883a 	add	r3,r6,r2
   12344:	21c00315 	stw	r7,12(r4)
   12348:	39000215 	stw	r4,8(r7)
   1234c:	31400115 	stw	r5,4(r6)
   12350:	18800015 	stw	r2,0(r3)
   12354:	00000406 	br	12368 <_free_r+0xd4>
   12358:	10c00054 	ori	r3,r2,1
   1235c:	30c00115 	stw	r3,4(r6)
   12360:	3087883a 	add	r3,r6,r2
   12364:	18800015 	stw	r2,0(r3)
   12368:	00c07fc4 	movi	r3,511
   1236c:	18801736 	bltu	r3,r2,123cc <_free_r+0x138>
   12370:	1004d0fa 	srli	r2,r2,3
   12374:	01400044 	movi	r5,1
   12378:	49000117 	ldw	r4,4(r9)
   1237c:	1087883a 	add	r3,r2,r2
   12380:	18c7883a 	add	r3,r3,r3
   12384:	1005d0ba 	srai	r2,r2,2
   12388:	18c7883a 	add	r3,r3,r3
   1238c:	1a47883a 	add	r3,r3,r9
   12390:	19c00217 	ldw	r7,8(r3)
   12394:	2884983a 	sll	r2,r5,r2
   12398:	30c00315 	stw	r3,12(r6)
   1239c:	31c00215 	stw	r7,8(r6)
   123a0:	1104b03a 	or	r2,r2,r4
   123a4:	19800215 	stw	r6,8(r3)
   123a8:	48800115 	stw	r2,4(r9)
   123ac:	39800315 	stw	r6,12(r7)
   123b0:	8809883a 	mov	r4,r17
   123b4:	dfc00217 	ldw	ra,8(sp)
   123b8:	dc400117 	ldw	r17,4(sp)
   123bc:	dc000017 	ldw	r16,0(sp)
   123c0:	dec00304 	addi	sp,sp,12
   123c4:	00135481 	jmpi	13548 <__malloc_unlock>
   123c8:	f800283a 	ret
   123cc:	1006d27a 	srli	r3,r2,9
   123d0:	01000104 	movi	r4,4
   123d4:	20c04036 	bltu	r4,r3,124d8 <_free_r+0x244>
   123d8:	1006d1ba 	srli	r3,r2,6
   123dc:	19400e04 	addi	r5,r3,56
   123e0:	2947883a 	add	r3,r5,r5
   123e4:	18c7883a 	add	r3,r3,r3
   123e8:	18c7883a 	add	r3,r3,r3
   123ec:	1a49883a 	add	r4,r3,r9
   123f0:	20c00217 	ldw	r3,8(r4)
   123f4:	01c00074 	movhi	r7,1
   123f8:	39d6ce04 	addi	r7,r7,23352
   123fc:	19003b26 	beq	r3,r4,124ec <_free_r+0x258>
   12400:	01ffff04 	movi	r7,-4
   12404:	19400117 	ldw	r5,4(r3)
   12408:	29ca703a 	and	r5,r5,r7
   1240c:	1140022e 	bgeu	r2,r5,12418 <_free_r+0x184>
   12410:	18c00217 	ldw	r3,8(r3)
   12414:	20fffb1e 	bne	r4,r3,12404 <_gp+0xffff32bc>
   12418:	18800317 	ldw	r2,12(r3)
   1241c:	30800315 	stw	r2,12(r6)
   12420:	30c00215 	stw	r3,8(r6)
   12424:	11800215 	stw	r6,8(r2)
   12428:	19800315 	stw	r6,12(r3)
   1242c:	003fe006 	br	123b0 <_gp+0xffff3268>
   12430:	2100004c 	andi	r4,r4,1
   12434:	1885883a 	add	r2,r3,r2
   12438:	2000071e 	bne	r4,zero,12458 <_free_r+0x1c4>
   1243c:	817ffe17 	ldw	r5,-8(r16)
   12440:	314dc83a 	sub	r6,r6,r5
   12444:	30c00317 	ldw	r3,12(r6)
   12448:	31000217 	ldw	r4,8(r6)
   1244c:	1145883a 	add	r2,r2,r5
   12450:	20c00315 	stw	r3,12(r4)
   12454:	19000215 	stw	r4,8(r3)
   12458:	10c00054 	ori	r3,r2,1
   1245c:	30c00115 	stw	r3,4(r6)
   12460:	00c00074 	movhi	r3,1
   12464:	18dc5504 	addi	r3,r3,29012
   12468:	18c00017 	ldw	r3,0(r3)
   1246c:	49800215 	stw	r6,8(r9)
   12470:	10ffcf36 	bltu	r2,r3,123b0 <_gp+0xffff3268>
   12474:	008000b4 	movhi	r2,2
   12478:	10a2fd04 	addi	r2,r2,-29708
   1247c:	11400017 	ldw	r5,0(r2)
   12480:	8809883a 	mov	r4,r17
   12484:	00121700 	call	12170 <_malloc_trim_r>
   12488:	003fc906 	br	123b0 <_gp+0xffff3268>
   1248c:	28c9883a 	add	r4,r5,r3
   12490:	21000117 	ldw	r4,4(r4)
   12494:	2100004c 	andi	r4,r4,1
   12498:	20000a1e 	bne	r4,zero,124c4 <_free_r+0x230>
   1249c:	29000317 	ldw	r4,12(r5)
   124a0:	29400217 	ldw	r5,8(r5)
   124a4:	10c5883a 	add	r2,r2,r3
   124a8:	10c00054 	ori	r3,r2,1
   124ac:	29000315 	stw	r4,12(r5)
   124b0:	21400215 	stw	r5,8(r4)
   124b4:	30c00115 	stw	r3,4(r6)
   124b8:	308d883a 	add	r6,r6,r2
   124bc:	30800015 	stw	r2,0(r6)
   124c0:	003fbb06 	br	123b0 <_gp+0xffff3268>
   124c4:	10c00054 	ori	r3,r2,1
   124c8:	30c00115 	stw	r3,4(r6)
   124cc:	308d883a 	add	r6,r6,r2
   124d0:	30800015 	stw	r2,0(r6)
   124d4:	003fb606 	br	123b0 <_gp+0xffff3268>
   124d8:	01000504 	movi	r4,20
   124dc:	20c01436 	bltu	r4,r3,12530 <_free_r+0x29c>
   124e0:	194016c4 	addi	r5,r3,91
   124e4:	2947883a 	add	r3,r5,r5
   124e8:	003fbe06 	br	123e4 <_gp+0xffff329c>
   124ec:	280bd0ba 	srai	r5,r5,2
   124f0:	00800044 	movi	r2,1
   124f4:	39000117 	ldw	r4,4(r7)
   124f8:	114a983a 	sll	r5,r2,r5
   124fc:	1805883a 	mov	r2,r3
   12500:	2908b03a 	or	r4,r5,r4
   12504:	39000115 	stw	r4,4(r7)
   12508:	003fc406 	br	1241c <_gp+0xffff32d4>
   1250c:	49800515 	stw	r6,20(r9)
   12510:	49800415 	stw	r6,16(r9)
   12514:	10c00054 	ori	r3,r2,1
   12518:	31000315 	stw	r4,12(r6)
   1251c:	31000215 	stw	r4,8(r6)
   12520:	30c00115 	stw	r3,4(r6)
   12524:	308d883a 	add	r6,r6,r2
   12528:	30800015 	stw	r2,0(r6)
   1252c:	003fa006 	br	123b0 <_gp+0xffff3268>
   12530:	01001504 	movi	r4,84
   12534:	20c00436 	bltu	r4,r3,12548 <_free_r+0x2b4>
   12538:	1006d33a 	srli	r3,r2,12
   1253c:	19401b84 	addi	r5,r3,110
   12540:	2947883a 	add	r3,r5,r5
   12544:	003fa706 	br	123e4 <_gp+0xffff329c>
   12548:	01005504 	movi	r4,340
   1254c:	20c00436 	bltu	r4,r3,12560 <_free_r+0x2cc>
   12550:	1006d3fa 	srli	r3,r2,15
   12554:	19401dc4 	addi	r5,r3,119
   12558:	2947883a 	add	r3,r5,r5
   1255c:	003fa106 	br	123e4 <_gp+0xffff329c>
   12560:	01015504 	movi	r4,1364
   12564:	20c00436 	bltu	r4,r3,12578 <_free_r+0x2e4>
   12568:	1006d4ba 	srli	r3,r2,18
   1256c:	19401f04 	addi	r5,r3,124
   12570:	2947883a 	add	r3,r5,r5
   12574:	003f9b06 	br	123e4 <_gp+0xffff329c>
   12578:	00c03f04 	movi	r3,252
   1257c:	01401f84 	movi	r5,126
   12580:	003f9806 	br	123e4 <_gp+0xffff329c>

00012584 <_fwalk>:
   12584:	defff704 	addi	sp,sp,-36
   12588:	dd000415 	stw	r20,16(sp)
   1258c:	dfc00815 	stw	ra,32(sp)
   12590:	ddc00715 	stw	r23,28(sp)
   12594:	dd800615 	stw	r22,24(sp)
   12598:	dd400515 	stw	r21,20(sp)
   1259c:	dcc00315 	stw	r19,12(sp)
   125a0:	dc800215 	stw	r18,8(sp)
   125a4:	dc400115 	stw	r17,4(sp)
   125a8:	dc000015 	stw	r16,0(sp)
   125ac:	2500b804 	addi	r20,r4,736
   125b0:	a0002326 	beq	r20,zero,12640 <_fwalk+0xbc>
   125b4:	282b883a 	mov	r21,r5
   125b8:	002f883a 	mov	r23,zero
   125bc:	05800044 	movi	r22,1
   125c0:	04ffffc4 	movi	r19,-1
   125c4:	a4400117 	ldw	r17,4(r20)
   125c8:	a4800217 	ldw	r18,8(r20)
   125cc:	8c7fffc4 	addi	r17,r17,-1
   125d0:	88000d16 	blt	r17,zero,12608 <_fwalk+0x84>
   125d4:	94000304 	addi	r16,r18,12
   125d8:	94800384 	addi	r18,r18,14
   125dc:	80c0000b 	ldhu	r3,0(r16)
   125e0:	8c7fffc4 	addi	r17,r17,-1
   125e4:	813ffd04 	addi	r4,r16,-12
   125e8:	b0c0042e 	bgeu	r22,r3,125fc <_fwalk+0x78>
   125ec:	90c0000f 	ldh	r3,0(r18)
   125f0:	1cc00226 	beq	r3,r19,125fc <_fwalk+0x78>
   125f4:	a83ee83a 	callr	r21
   125f8:	b8aeb03a 	or	r23,r23,r2
   125fc:	84001a04 	addi	r16,r16,104
   12600:	94801a04 	addi	r18,r18,104
   12604:	8cfff51e 	bne	r17,r19,125dc <_gp+0xffff3494>
   12608:	a5000017 	ldw	r20,0(r20)
   1260c:	a03fed1e 	bne	r20,zero,125c4 <_gp+0xffff347c>
   12610:	b805883a 	mov	r2,r23
   12614:	dfc00817 	ldw	ra,32(sp)
   12618:	ddc00717 	ldw	r23,28(sp)
   1261c:	dd800617 	ldw	r22,24(sp)
   12620:	dd400517 	ldw	r21,20(sp)
   12624:	dd000417 	ldw	r20,16(sp)
   12628:	dcc00317 	ldw	r19,12(sp)
   1262c:	dc800217 	ldw	r18,8(sp)
   12630:	dc400117 	ldw	r17,4(sp)
   12634:	dc000017 	ldw	r16,0(sp)
   12638:	dec00904 	addi	sp,sp,36
   1263c:	f800283a 	ret
   12640:	002f883a 	mov	r23,zero
   12644:	003ff206 	br	12610 <_gp+0xffff34c8>

00012648 <_fwalk_reent>:
   12648:	defff704 	addi	sp,sp,-36
   1264c:	dd400515 	stw	r21,20(sp)
   12650:	dfc00815 	stw	ra,32(sp)
   12654:	ddc00715 	stw	r23,28(sp)
   12658:	dd800615 	stw	r22,24(sp)
   1265c:	dd000415 	stw	r20,16(sp)
   12660:	dcc00315 	stw	r19,12(sp)
   12664:	dc800215 	stw	r18,8(sp)
   12668:	dc400115 	stw	r17,4(sp)
   1266c:	dc000015 	stw	r16,0(sp)
   12670:	2540b804 	addi	r21,r4,736
   12674:	a8002326 	beq	r21,zero,12704 <_fwalk_reent+0xbc>
   12678:	2829883a 	mov	r20,r5
   1267c:	202d883a 	mov	r22,r4
   12680:	002f883a 	mov	r23,zero
   12684:	04c00044 	movi	r19,1
   12688:	04bfffc4 	movi	r18,-1
   1268c:	ac400117 	ldw	r17,4(r21)
   12690:	ac000217 	ldw	r16,8(r21)
   12694:	8c7fffc4 	addi	r17,r17,-1
   12698:	88000c16 	blt	r17,zero,126cc <_fwalk_reent+0x84>
   1269c:	84000304 	addi	r16,r16,12
   126a0:	80c0000b 	ldhu	r3,0(r16)
   126a4:	8c7fffc4 	addi	r17,r17,-1
   126a8:	817ffd04 	addi	r5,r16,-12
   126ac:	98c0052e 	bgeu	r19,r3,126c4 <_fwalk_reent+0x7c>
   126b0:	80c0008f 	ldh	r3,2(r16)
   126b4:	b009883a 	mov	r4,r22
   126b8:	1c800226 	beq	r3,r18,126c4 <_fwalk_reent+0x7c>
   126bc:	a03ee83a 	callr	r20
   126c0:	b8aeb03a 	or	r23,r23,r2
   126c4:	84001a04 	addi	r16,r16,104
   126c8:	8cbff51e 	bne	r17,r18,126a0 <_gp+0xffff3558>
   126cc:	ad400017 	ldw	r21,0(r21)
   126d0:	a83fee1e 	bne	r21,zero,1268c <_gp+0xffff3544>
   126d4:	b805883a 	mov	r2,r23
   126d8:	dfc00817 	ldw	ra,32(sp)
   126dc:	ddc00717 	ldw	r23,28(sp)
   126e0:	dd800617 	ldw	r22,24(sp)
   126e4:	dd400517 	ldw	r21,20(sp)
   126e8:	dd000417 	ldw	r20,16(sp)
   126ec:	dcc00317 	ldw	r19,12(sp)
   126f0:	dc800217 	ldw	r18,8(sp)
   126f4:	dc400117 	ldw	r17,4(sp)
   126f8:	dc000017 	ldw	r16,0(sp)
   126fc:	dec00904 	addi	sp,sp,36
   12700:	f800283a 	ret
   12704:	002f883a 	mov	r23,zero
   12708:	003ff206 	br	126d4 <_gp+0xffff358c>

0001270c <__smakebuf_r>:
   1270c:	2880030b 	ldhu	r2,12(r5)
   12710:	10c0008c 	andi	r3,r2,2
   12714:	1800401e 	bne	r3,zero,12818 <__smakebuf_r+0x10c>
   12718:	deffec04 	addi	sp,sp,-80
   1271c:	dc000f15 	stw	r16,60(sp)
   12720:	2821883a 	mov	r16,r5
   12724:	2940038f 	ldh	r5,14(r5)
   12728:	dc401015 	stw	r17,64(sp)
   1272c:	dfc01315 	stw	ra,76(sp)
   12730:	dcc01215 	stw	r19,72(sp)
   12734:	dc801115 	stw	r18,68(sp)
   12738:	2023883a 	mov	r17,r4
   1273c:	28001b16 	blt	r5,zero,127ac <__smakebuf_r+0xa0>
   12740:	d80d883a 	mov	r6,sp
   12744:	0012cd80 	call	12cd8 <_fstat_r>
   12748:	10001716 	blt	r2,zero,127a8 <__smakebuf_r+0x9c>
   1274c:	d8800117 	ldw	r2,4(sp)
   12750:	00e00014 	movui	r3,32768
   12754:	10bc000c 	andi	r2,r2,61440
   12758:	10c03726 	beq	r2,r3,12838 <__smakebuf_r+0x12c>
   1275c:	80c0030b 	ldhu	r3,12(r16)
   12760:	18c20014 	ori	r3,r3,2048
   12764:	80c0030d 	sth	r3,12(r16)
   12768:	00c80004 	movi	r3,8192
   1276c:	10c03c1e 	bne	r2,r3,12860 <__smakebuf_r+0x154>
   12770:	8140038f 	ldh	r5,14(r16)
   12774:	8809883a 	mov	r4,r17
   12778:	0012d300 	call	12d30 <_isatty_r>
   1277c:	10004e26 	beq	r2,zero,128b8 <__smakebuf_r+0x1ac>
   12780:	8080030b 	ldhu	r2,12(r16)
   12784:	04c00044 	movi	r19,1
   12788:	80c010c4 	addi	r3,r16,67
   1278c:	14c4b03a 	or	r2,r2,r19
   12790:	8080030d 	sth	r2,12(r16)
   12794:	80c00015 	stw	r3,0(r16)
   12798:	80c00415 	stw	r3,16(r16)
   1279c:	84c00515 	stw	r19,20(r16)
   127a0:	04810004 	movi	r18,1024
   127a4:	00000706 	br	127c4 <__smakebuf_r+0xb8>
   127a8:	8080030b 	ldhu	r2,12(r16)
   127ac:	10c0200c 	andi	r3,r2,128
   127b0:	18001f1e 	bne	r3,zero,12830 <__smakebuf_r+0x124>
   127b4:	04810004 	movi	r18,1024
   127b8:	10820014 	ori	r2,r2,2048
   127bc:	8080030d 	sth	r2,12(r16)
   127c0:	0027883a 	mov	r19,zero
   127c4:	8809883a 	mov	r4,r17
   127c8:	900b883a 	mov	r5,r18
   127cc:	00109080 	call	10908 <_malloc_r>
   127d0:	10002e26 	beq	r2,zero,1288c <__smakebuf_r+0x180>
   127d4:	80c0030b 	ldhu	r3,12(r16)
   127d8:	01000074 	movhi	r4,1
   127dc:	21077804 	addi	r4,r4,7648
   127e0:	89000f15 	stw	r4,60(r17)
   127e4:	18c02014 	ori	r3,r3,128
   127e8:	80c0030d 	sth	r3,12(r16)
   127ec:	80800015 	stw	r2,0(r16)
   127f0:	80800415 	stw	r2,16(r16)
   127f4:	84800515 	stw	r18,20(r16)
   127f8:	98001c1e 	bne	r19,zero,1286c <__smakebuf_r+0x160>
   127fc:	dfc01317 	ldw	ra,76(sp)
   12800:	dcc01217 	ldw	r19,72(sp)
   12804:	dc801117 	ldw	r18,68(sp)
   12808:	dc401017 	ldw	r17,64(sp)
   1280c:	dc000f17 	ldw	r16,60(sp)
   12810:	dec01404 	addi	sp,sp,80
   12814:	f800283a 	ret
   12818:	288010c4 	addi	r2,r5,67
   1281c:	28800015 	stw	r2,0(r5)
   12820:	28800415 	stw	r2,16(r5)
   12824:	00800044 	movi	r2,1
   12828:	28800515 	stw	r2,20(r5)
   1282c:	f800283a 	ret
   12830:	04801004 	movi	r18,64
   12834:	003fe006 	br	127b8 <_gp+0xffff3670>
   12838:	81000a17 	ldw	r4,40(r16)
   1283c:	00c00074 	movhi	r3,1
   12840:	18cab004 	addi	r3,r3,10944
   12844:	20ffc51e 	bne	r4,r3,1275c <_gp+0xffff3614>
   12848:	80c0030b 	ldhu	r3,12(r16)
   1284c:	01010004 	movi	r4,1024
   12850:	81001315 	stw	r4,76(r16)
   12854:	1906b03a 	or	r3,r3,r4
   12858:	80c0030d 	sth	r3,12(r16)
   1285c:	003fc206 	br	12768 <_gp+0xffff3620>
   12860:	0027883a 	mov	r19,zero
   12864:	04810004 	movi	r18,1024
   12868:	003fd606 	br	127c4 <_gp+0xffff367c>
   1286c:	8140038f 	ldh	r5,14(r16)
   12870:	8809883a 	mov	r4,r17
   12874:	0012d300 	call	12d30 <_isatty_r>
   12878:	103fe026 	beq	r2,zero,127fc <_gp+0xffff36b4>
   1287c:	8080030b 	ldhu	r2,12(r16)
   12880:	10800054 	ori	r2,r2,1
   12884:	8080030d 	sth	r2,12(r16)
   12888:	003fdc06 	br	127fc <_gp+0xffff36b4>
   1288c:	8080030b 	ldhu	r2,12(r16)
   12890:	10c0800c 	andi	r3,r2,512
   12894:	183fd91e 	bne	r3,zero,127fc <_gp+0xffff36b4>
   12898:	10800094 	ori	r2,r2,2
   1289c:	80c010c4 	addi	r3,r16,67
   128a0:	8080030d 	sth	r2,12(r16)
   128a4:	00800044 	movi	r2,1
   128a8:	80c00015 	stw	r3,0(r16)
   128ac:	80c00415 	stw	r3,16(r16)
   128b0:	80800515 	stw	r2,20(r16)
   128b4:	003fd106 	br	127fc <_gp+0xffff36b4>
   128b8:	04c00044 	movi	r19,1
   128bc:	04810004 	movi	r18,1024
   128c0:	003fc006 	br	127c4 <_gp+0xffff367c>

000128c4 <memset>:
   128c4:	20c000cc 	andi	r3,r4,3
   128c8:	2005883a 	mov	r2,r4
   128cc:	18004326 	beq	r3,zero,129dc <memset+0x118>
   128d0:	31ffffc4 	addi	r7,r6,-1
   128d4:	30004026 	beq	r6,zero,129d8 <memset+0x114>
   128d8:	2813883a 	mov	r9,r5
   128dc:	200d883a 	mov	r6,r4
   128e0:	2007883a 	mov	r3,r4
   128e4:	00000406 	br	128f8 <memset+0x34>
   128e8:	3a3fffc4 	addi	r8,r7,-1
   128ec:	31800044 	addi	r6,r6,1
   128f0:	38003926 	beq	r7,zero,129d8 <memset+0x114>
   128f4:	400f883a 	mov	r7,r8
   128f8:	18c00044 	addi	r3,r3,1
   128fc:	32400005 	stb	r9,0(r6)
   12900:	1a0000cc 	andi	r8,r3,3
   12904:	403ff81e 	bne	r8,zero,128e8 <_gp+0xffff37a0>
   12908:	010000c4 	movi	r4,3
   1290c:	21c02d2e 	bgeu	r4,r7,129c4 <memset+0x100>
   12910:	29803fcc 	andi	r6,r5,255
   12914:	3008923a 	slli	r4,r6,8
   12918:	218cb03a 	or	r6,r4,r6
   1291c:	3008943a 	slli	r4,r6,16
   12920:	218cb03a 	or	r6,r4,r6
   12924:	010003c4 	movi	r4,15
   12928:	21c0182e 	bgeu	r4,r7,1298c <memset+0xc8>
   1292c:	3b3ffc04 	addi	r12,r7,-16
   12930:	6018d13a 	srli	r12,r12,4
   12934:	1a000104 	addi	r8,r3,4
   12938:	1ac00204 	addi	r11,r3,8
   1293c:	6008913a 	slli	r4,r12,4
   12940:	1a800304 	addi	r10,r3,12
   12944:	1813883a 	mov	r9,r3
   12948:	21000504 	addi	r4,r4,20
   1294c:	1909883a 	add	r4,r3,r4
   12950:	49800015 	stw	r6,0(r9)
   12954:	41800015 	stw	r6,0(r8)
   12958:	59800015 	stw	r6,0(r11)
   1295c:	51800015 	stw	r6,0(r10)
   12960:	42000404 	addi	r8,r8,16
   12964:	4a400404 	addi	r9,r9,16
   12968:	5ac00404 	addi	r11,r11,16
   1296c:	52800404 	addi	r10,r10,16
   12970:	413ff71e 	bne	r8,r4,12950 <_gp+0xffff3808>
   12974:	63000044 	addi	r12,r12,1
   12978:	6018913a 	slli	r12,r12,4
   1297c:	39c003cc 	andi	r7,r7,15
   12980:	010000c4 	movi	r4,3
   12984:	1b07883a 	add	r3,r3,r12
   12988:	21c00e2e 	bgeu	r4,r7,129c4 <memset+0x100>
   1298c:	1813883a 	mov	r9,r3
   12990:	3811883a 	mov	r8,r7
   12994:	010000c4 	movi	r4,3
   12998:	49800015 	stw	r6,0(r9)
   1299c:	423fff04 	addi	r8,r8,-4
   129a0:	4a400104 	addi	r9,r9,4
   129a4:	223ffc36 	bltu	r4,r8,12998 <_gp+0xffff3850>
   129a8:	393fff04 	addi	r4,r7,-4
   129ac:	2008d0ba 	srli	r4,r4,2
   129b0:	39c000cc 	andi	r7,r7,3
   129b4:	21000044 	addi	r4,r4,1
   129b8:	2109883a 	add	r4,r4,r4
   129bc:	2109883a 	add	r4,r4,r4
   129c0:	1907883a 	add	r3,r3,r4
   129c4:	38000426 	beq	r7,zero,129d8 <memset+0x114>
   129c8:	19cf883a 	add	r7,r3,r7
   129cc:	19400005 	stb	r5,0(r3)
   129d0:	18c00044 	addi	r3,r3,1
   129d4:	19fffd1e 	bne	r3,r7,129cc <_gp+0xffff3884>
   129d8:	f800283a 	ret
   129dc:	2007883a 	mov	r3,r4
   129e0:	300f883a 	mov	r7,r6
   129e4:	003fc806 	br	12908 <_gp+0xffff37c0>

000129e8 <__sread>:
   129e8:	defffe04 	addi	sp,sp,-8
   129ec:	dc000015 	stw	r16,0(sp)
   129f0:	2821883a 	mov	r16,r5
   129f4:	2940038f 	ldh	r5,14(r5)
   129f8:	dfc00115 	stw	ra,4(sp)
   129fc:	0012de00 	call	12de0 <_read_r>
   12a00:	10000716 	blt	r2,zero,12a20 <__sread+0x38>
   12a04:	80c01417 	ldw	r3,80(r16)
   12a08:	1887883a 	add	r3,r3,r2
   12a0c:	80c01415 	stw	r3,80(r16)
   12a10:	dfc00117 	ldw	ra,4(sp)
   12a14:	dc000017 	ldw	r16,0(sp)
   12a18:	dec00204 	addi	sp,sp,8
   12a1c:	f800283a 	ret
   12a20:	80c0030b 	ldhu	r3,12(r16)
   12a24:	18fbffcc 	andi	r3,r3,61439
   12a28:	80c0030d 	sth	r3,12(r16)
   12a2c:	dfc00117 	ldw	ra,4(sp)
   12a30:	dc000017 	ldw	r16,0(sp)
   12a34:	dec00204 	addi	sp,sp,8
   12a38:	f800283a 	ret

00012a3c <__seofread>:
   12a3c:	0005883a 	mov	r2,zero
   12a40:	f800283a 	ret

00012a44 <__swrite>:
   12a44:	2880030b 	ldhu	r2,12(r5)
   12a48:	defffb04 	addi	sp,sp,-20
   12a4c:	dcc00315 	stw	r19,12(sp)
   12a50:	dc800215 	stw	r18,8(sp)
   12a54:	dc400115 	stw	r17,4(sp)
   12a58:	dc000015 	stw	r16,0(sp)
   12a5c:	dfc00415 	stw	ra,16(sp)
   12a60:	10c0400c 	andi	r3,r2,256
   12a64:	2821883a 	mov	r16,r5
   12a68:	2027883a 	mov	r19,r4
   12a6c:	3025883a 	mov	r18,r6
   12a70:	3823883a 	mov	r17,r7
   12a74:	18000526 	beq	r3,zero,12a8c <__swrite+0x48>
   12a78:	2940038f 	ldh	r5,14(r5)
   12a7c:	000d883a 	mov	r6,zero
   12a80:	01c00084 	movi	r7,2
   12a84:	0012d840 	call	12d84 <_lseek_r>
   12a88:	8080030b 	ldhu	r2,12(r16)
   12a8c:	8140038f 	ldh	r5,14(r16)
   12a90:	10bbffcc 	andi	r2,r2,61439
   12a94:	9809883a 	mov	r4,r19
   12a98:	900d883a 	mov	r6,r18
   12a9c:	880f883a 	mov	r7,r17
   12aa0:	8080030d 	sth	r2,12(r16)
   12aa4:	dfc00417 	ldw	ra,16(sp)
   12aa8:	dcc00317 	ldw	r19,12(sp)
   12aac:	dc800217 	ldw	r18,8(sp)
   12ab0:	dc400117 	ldw	r17,4(sp)
   12ab4:	dc000017 	ldw	r16,0(sp)
   12ab8:	dec00504 	addi	sp,sp,20
   12abc:	0012b241 	jmpi	12b24 <_write_r>

00012ac0 <__sseek>:
   12ac0:	defffe04 	addi	sp,sp,-8
   12ac4:	dc000015 	stw	r16,0(sp)
   12ac8:	2821883a 	mov	r16,r5
   12acc:	2940038f 	ldh	r5,14(r5)
   12ad0:	dfc00115 	stw	ra,4(sp)
   12ad4:	0012d840 	call	12d84 <_lseek_r>
   12ad8:	00ffffc4 	movi	r3,-1
   12adc:	10c00826 	beq	r2,r3,12b00 <__sseek+0x40>
   12ae0:	80c0030b 	ldhu	r3,12(r16)
   12ae4:	80801415 	stw	r2,80(r16)
   12ae8:	18c40014 	ori	r3,r3,4096
   12aec:	80c0030d 	sth	r3,12(r16)
   12af0:	dfc00117 	ldw	ra,4(sp)
   12af4:	dc000017 	ldw	r16,0(sp)
   12af8:	dec00204 	addi	sp,sp,8
   12afc:	f800283a 	ret
   12b00:	80c0030b 	ldhu	r3,12(r16)
   12b04:	18fbffcc 	andi	r3,r3,61439
   12b08:	80c0030d 	sth	r3,12(r16)
   12b0c:	dfc00117 	ldw	ra,4(sp)
   12b10:	dc000017 	ldw	r16,0(sp)
   12b14:	dec00204 	addi	sp,sp,8
   12b18:	f800283a 	ret

00012b1c <__sclose>:
   12b1c:	2940038f 	ldh	r5,14(r5)
   12b20:	0012b801 	jmpi	12b80 <_close_r>

00012b24 <_write_r>:
   12b24:	defffd04 	addi	sp,sp,-12
   12b28:	dc000015 	stw	r16,0(sp)
   12b2c:	040000b4 	movhi	r16,2
   12b30:	dc400115 	stw	r17,4(sp)
   12b34:	8422fe04 	addi	r16,r16,-29704
   12b38:	2023883a 	mov	r17,r4
   12b3c:	2809883a 	mov	r4,r5
   12b40:	300b883a 	mov	r5,r6
   12b44:	380d883a 	mov	r6,r7
   12b48:	dfc00215 	stw	ra,8(sp)
   12b4c:	80000015 	stw	zero,0(r16)
   12b50:	00138140 	call	13814 <write>
   12b54:	00ffffc4 	movi	r3,-1
   12b58:	10c00526 	beq	r2,r3,12b70 <_write_r+0x4c>
   12b5c:	dfc00217 	ldw	ra,8(sp)
   12b60:	dc400117 	ldw	r17,4(sp)
   12b64:	dc000017 	ldw	r16,0(sp)
   12b68:	dec00304 	addi	sp,sp,12
   12b6c:	f800283a 	ret
   12b70:	80c00017 	ldw	r3,0(r16)
   12b74:	183ff926 	beq	r3,zero,12b5c <_gp+0xffff3a14>
   12b78:	88c00015 	stw	r3,0(r17)
   12b7c:	003ff706 	br	12b5c <_gp+0xffff3a14>

00012b80 <_close_r>:
   12b80:	defffd04 	addi	sp,sp,-12
   12b84:	dc000015 	stw	r16,0(sp)
   12b88:	040000b4 	movhi	r16,2
   12b8c:	dc400115 	stw	r17,4(sp)
   12b90:	8422fe04 	addi	r16,r16,-29704
   12b94:	2023883a 	mov	r17,r4
   12b98:	2809883a 	mov	r4,r5
   12b9c:	dfc00215 	stw	ra,8(sp)
   12ba0:	80000015 	stw	zero,0(r16)
   12ba4:	0012fb80 	call	12fb8 <close>
   12ba8:	00ffffc4 	movi	r3,-1
   12bac:	10c00526 	beq	r2,r3,12bc4 <_close_r+0x44>
   12bb0:	dfc00217 	ldw	ra,8(sp)
   12bb4:	dc400117 	ldw	r17,4(sp)
   12bb8:	dc000017 	ldw	r16,0(sp)
   12bbc:	dec00304 	addi	sp,sp,12
   12bc0:	f800283a 	ret
   12bc4:	80c00017 	ldw	r3,0(r16)
   12bc8:	183ff926 	beq	r3,zero,12bb0 <_gp+0xffff3a68>
   12bcc:	88c00015 	stw	r3,0(r17)
   12bd0:	003ff706 	br	12bb0 <_gp+0xffff3a68>

00012bd4 <_fclose_r>:
   12bd4:	28003926 	beq	r5,zero,12cbc <_fclose_r+0xe8>
   12bd8:	defffc04 	addi	sp,sp,-16
   12bdc:	dc400115 	stw	r17,4(sp)
   12be0:	dc000015 	stw	r16,0(sp)
   12be4:	dfc00315 	stw	ra,12(sp)
   12be8:	dc800215 	stw	r18,8(sp)
   12bec:	2023883a 	mov	r17,r4
   12bf0:	2821883a 	mov	r16,r5
   12bf4:	20000226 	beq	r4,zero,12c00 <_fclose_r+0x2c>
   12bf8:	20800e17 	ldw	r2,56(r4)
   12bfc:	10002726 	beq	r2,zero,12c9c <_fclose_r+0xc8>
   12c00:	8080030f 	ldh	r2,12(r16)
   12c04:	1000071e 	bne	r2,zero,12c24 <_fclose_r+0x50>
   12c08:	0005883a 	mov	r2,zero
   12c0c:	dfc00317 	ldw	ra,12(sp)
   12c10:	dc800217 	ldw	r18,8(sp)
   12c14:	dc400117 	ldw	r17,4(sp)
   12c18:	dc000017 	ldw	r16,0(sp)
   12c1c:	dec00404 	addi	sp,sp,16
   12c20:	f800283a 	ret
   12c24:	8809883a 	mov	r4,r17
   12c28:	800b883a 	mov	r5,r16
   12c2c:	0011b3c0 	call	11b3c <__sflush_r>
   12c30:	1025883a 	mov	r18,r2
   12c34:	80800b17 	ldw	r2,44(r16)
   12c38:	10000426 	beq	r2,zero,12c4c <_fclose_r+0x78>
   12c3c:	81400717 	ldw	r5,28(r16)
   12c40:	8809883a 	mov	r4,r17
   12c44:	103ee83a 	callr	r2
   12c48:	10001616 	blt	r2,zero,12ca4 <_fclose_r+0xd0>
   12c4c:	8080030b 	ldhu	r2,12(r16)
   12c50:	1080200c 	andi	r2,r2,128
   12c54:	1000151e 	bne	r2,zero,12cac <_fclose_r+0xd8>
   12c58:	81400c17 	ldw	r5,48(r16)
   12c5c:	28000526 	beq	r5,zero,12c74 <_fclose_r+0xa0>
   12c60:	80801004 	addi	r2,r16,64
   12c64:	28800226 	beq	r5,r2,12c70 <_fclose_r+0x9c>
   12c68:	8809883a 	mov	r4,r17
   12c6c:	00122940 	call	12294 <_free_r>
   12c70:	80000c15 	stw	zero,48(r16)
   12c74:	81401117 	ldw	r5,68(r16)
   12c78:	28000326 	beq	r5,zero,12c88 <_fclose_r+0xb4>
   12c7c:	8809883a 	mov	r4,r17
   12c80:	00122940 	call	12294 <_free_r>
   12c84:	80001115 	stw	zero,68(r16)
   12c88:	00121300 	call	12130 <__sfp_lock_acquire>
   12c8c:	8000030d 	sth	zero,12(r16)
   12c90:	00121340 	call	12134 <__sfp_lock_release>
   12c94:	9005883a 	mov	r2,r18
   12c98:	003fdc06 	br	12c0c <_gp+0xffff3ac4>
   12c9c:	00121200 	call	12120 <__sinit>
   12ca0:	003fd706 	br	12c00 <_gp+0xffff3ab8>
   12ca4:	04bfffc4 	movi	r18,-1
   12ca8:	003fe806 	br	12c4c <_gp+0xffff3b04>
   12cac:	81400417 	ldw	r5,16(r16)
   12cb0:	8809883a 	mov	r4,r17
   12cb4:	00122940 	call	12294 <_free_r>
   12cb8:	003fe706 	br	12c58 <_gp+0xffff3b10>
   12cbc:	0005883a 	mov	r2,zero
   12cc0:	f800283a 	ret

00012cc4 <fclose>:
   12cc4:	00800074 	movhi	r2,1
   12cc8:	109c5304 	addi	r2,r2,29004
   12ccc:	200b883a 	mov	r5,r4
   12cd0:	11000017 	ldw	r4,0(r2)
   12cd4:	0012bd41 	jmpi	12bd4 <_fclose_r>

00012cd8 <_fstat_r>:
   12cd8:	defffd04 	addi	sp,sp,-12
   12cdc:	dc000015 	stw	r16,0(sp)
   12ce0:	040000b4 	movhi	r16,2
   12ce4:	dc400115 	stw	r17,4(sp)
   12ce8:	8422fe04 	addi	r16,r16,-29704
   12cec:	2023883a 	mov	r17,r4
   12cf0:	2809883a 	mov	r4,r5
   12cf4:	300b883a 	mov	r5,r6
   12cf8:	dfc00215 	stw	ra,8(sp)
   12cfc:	80000015 	stw	zero,0(r16)
   12d00:	00131040 	call	13104 <fstat>
   12d04:	00ffffc4 	movi	r3,-1
   12d08:	10c00526 	beq	r2,r3,12d20 <_fstat_r+0x48>
   12d0c:	dfc00217 	ldw	ra,8(sp)
   12d10:	dc400117 	ldw	r17,4(sp)
   12d14:	dc000017 	ldw	r16,0(sp)
   12d18:	dec00304 	addi	sp,sp,12
   12d1c:	f800283a 	ret
   12d20:	80c00017 	ldw	r3,0(r16)
   12d24:	183ff926 	beq	r3,zero,12d0c <_gp+0xffff3bc4>
   12d28:	88c00015 	stw	r3,0(r17)
   12d2c:	003ff706 	br	12d0c <_gp+0xffff3bc4>

00012d30 <_isatty_r>:
   12d30:	defffd04 	addi	sp,sp,-12
   12d34:	dc000015 	stw	r16,0(sp)
   12d38:	040000b4 	movhi	r16,2
   12d3c:	dc400115 	stw	r17,4(sp)
   12d40:	8422fe04 	addi	r16,r16,-29704
   12d44:	2023883a 	mov	r17,r4
   12d48:	2809883a 	mov	r4,r5
   12d4c:	dfc00215 	stw	ra,8(sp)
   12d50:	80000015 	stw	zero,0(r16)
   12d54:	00132040 	call	13204 <isatty>
   12d58:	00ffffc4 	movi	r3,-1
   12d5c:	10c00526 	beq	r2,r3,12d74 <_isatty_r+0x44>
   12d60:	dfc00217 	ldw	ra,8(sp)
   12d64:	dc400117 	ldw	r17,4(sp)
   12d68:	dc000017 	ldw	r16,0(sp)
   12d6c:	dec00304 	addi	sp,sp,12
   12d70:	f800283a 	ret
   12d74:	80c00017 	ldw	r3,0(r16)
   12d78:	183ff926 	beq	r3,zero,12d60 <_gp+0xffff3c18>
   12d7c:	88c00015 	stw	r3,0(r17)
   12d80:	003ff706 	br	12d60 <_gp+0xffff3c18>

00012d84 <_lseek_r>:
   12d84:	defffd04 	addi	sp,sp,-12
   12d88:	dc000015 	stw	r16,0(sp)
   12d8c:	040000b4 	movhi	r16,2
   12d90:	dc400115 	stw	r17,4(sp)
   12d94:	8422fe04 	addi	r16,r16,-29704
   12d98:	2023883a 	mov	r17,r4
   12d9c:	2809883a 	mov	r4,r5
   12da0:	300b883a 	mov	r5,r6
   12da4:	380d883a 	mov	r6,r7
   12da8:	dfc00215 	stw	ra,8(sp)
   12dac:	80000015 	stw	zero,0(r16)
   12db0:	00133dc0 	call	133dc <lseek>
   12db4:	00ffffc4 	movi	r3,-1
   12db8:	10c00526 	beq	r2,r3,12dd0 <_lseek_r+0x4c>
   12dbc:	dfc00217 	ldw	ra,8(sp)
   12dc0:	dc400117 	ldw	r17,4(sp)
   12dc4:	dc000017 	ldw	r16,0(sp)
   12dc8:	dec00304 	addi	sp,sp,12
   12dcc:	f800283a 	ret
   12dd0:	80c00017 	ldw	r3,0(r16)
   12dd4:	183ff926 	beq	r3,zero,12dbc <_gp+0xffff3c74>
   12dd8:	88c00015 	stw	r3,0(r17)
   12ddc:	003ff706 	br	12dbc <_gp+0xffff3c74>

00012de0 <_read_r>:
   12de0:	defffd04 	addi	sp,sp,-12
   12de4:	dc000015 	stw	r16,0(sp)
   12de8:	040000b4 	movhi	r16,2
   12dec:	dc400115 	stw	r17,4(sp)
   12df0:	8422fe04 	addi	r16,r16,-29704
   12df4:	2023883a 	mov	r17,r4
   12df8:	2809883a 	mov	r4,r5
   12dfc:	300b883a 	mov	r5,r6
   12e00:	380d883a 	mov	r6,r7
   12e04:	dfc00215 	stw	ra,8(sp)
   12e08:	80000015 	stw	zero,0(r16)
   12e0c:	00135b80 	call	135b8 <read>
   12e10:	00ffffc4 	movi	r3,-1
   12e14:	10c00526 	beq	r2,r3,12e2c <_read_r+0x4c>
   12e18:	dfc00217 	ldw	ra,8(sp)
   12e1c:	dc400117 	ldw	r17,4(sp)
   12e20:	dc000017 	ldw	r16,0(sp)
   12e24:	dec00304 	addi	sp,sp,12
   12e28:	f800283a 	ret
   12e2c:	80c00017 	ldw	r3,0(r16)
   12e30:	183ff926 	beq	r3,zero,12e18 <_gp+0xffff3cd0>
   12e34:	88c00015 	stw	r3,0(r17)
   12e38:	003ff706 	br	12e18 <_gp+0xffff3cd0>

00012e3c <udivmodsi4>:
   12e3c:	2900182e 	bgeu	r5,r4,12ea0 <udivmodsi4+0x64>
   12e40:	28001716 	blt	r5,zero,12ea0 <udivmodsi4+0x64>
   12e44:	00800804 	movi	r2,32
   12e48:	00c00044 	movi	r3,1
   12e4c:	00000206 	br	12e58 <udivmodsi4+0x1c>
   12e50:	10001126 	beq	r2,zero,12e98 <udivmodsi4+0x5c>
   12e54:	28000516 	blt	r5,zero,12e6c <udivmodsi4+0x30>
   12e58:	294b883a 	add	r5,r5,r5
   12e5c:	10bfffc4 	addi	r2,r2,-1
   12e60:	18c7883a 	add	r3,r3,r3
   12e64:	293ffa36 	bltu	r5,r4,12e50 <_gp+0xffff3d08>
   12e68:	18000b26 	beq	r3,zero,12e98 <udivmodsi4+0x5c>
   12e6c:	0005883a 	mov	r2,zero
   12e70:	21400236 	bltu	r4,r5,12e7c <udivmodsi4+0x40>
   12e74:	2149c83a 	sub	r4,r4,r5
   12e78:	10c4b03a 	or	r2,r2,r3
   12e7c:	1806d07a 	srli	r3,r3,1
   12e80:	280ad07a 	srli	r5,r5,1
   12e84:	183ffa1e 	bne	r3,zero,12e70 <_gp+0xffff3d28>
   12e88:	3000011e 	bne	r6,zero,12e90 <udivmodsi4+0x54>
   12e8c:	f800283a 	ret
   12e90:	2005883a 	mov	r2,r4
   12e94:	f800283a 	ret
   12e98:	0005883a 	mov	r2,zero
   12e9c:	003ffa06 	br	12e88 <_gp+0xffff3d40>
   12ea0:	00c00044 	movi	r3,1
   12ea4:	003ff106 	br	12e6c <_gp+0xffff3d24>

00012ea8 <__divsi3>:
   12ea8:	defffe04 	addi	sp,sp,-8
   12eac:	dfc00115 	stw	ra,4(sp)
   12eb0:	dc000015 	stw	r16,0(sp)
   12eb4:	20000b16 	blt	r4,zero,12ee4 <__divsi3+0x3c>
   12eb8:	0021883a 	mov	r16,zero
   12ebc:	28000c16 	blt	r5,zero,12ef0 <__divsi3+0x48>
   12ec0:	000d883a 	mov	r6,zero
   12ec4:	0012e3c0 	call	12e3c <udivmodsi4>
   12ec8:	0407c83a 	sub	r3,zero,r16
   12ecc:	1884f03a 	xor	r2,r3,r2
   12ed0:	1405883a 	add	r2,r2,r16
   12ed4:	dfc00117 	ldw	ra,4(sp)
   12ed8:	dc000017 	ldw	r16,0(sp)
   12edc:	dec00204 	addi	sp,sp,8
   12ee0:	f800283a 	ret
   12ee4:	0109c83a 	sub	r4,zero,r4
   12ee8:	04000044 	movi	r16,1
   12eec:	283ff40e 	bge	r5,zero,12ec0 <_gp+0xffff3d78>
   12ef0:	014bc83a 	sub	r5,zero,r5
   12ef4:	8400005c 	xori	r16,r16,1
   12ef8:	003ff106 	br	12ec0 <_gp+0xffff3d78>

00012efc <__modsi3>:
   12efc:	defffd04 	addi	sp,sp,-12
   12f00:	dfc00215 	stw	ra,8(sp)
   12f04:	dc400115 	stw	r17,4(sp)
   12f08:	dc000015 	stw	r16,0(sp)
   12f0c:	20000c16 	blt	r4,zero,12f40 <__modsi3+0x44>
   12f10:	0023883a 	mov	r17,zero
   12f14:	0021883a 	mov	r16,zero
   12f18:	28000d16 	blt	r5,zero,12f50 <__modsi3+0x54>
   12f1c:	01800044 	movi	r6,1
   12f20:	0012e3c0 	call	12e3c <udivmodsi4>
   12f24:	1404f03a 	xor	r2,r2,r16
   12f28:	8885883a 	add	r2,r17,r2
   12f2c:	dfc00217 	ldw	ra,8(sp)
   12f30:	dc400117 	ldw	r17,4(sp)
   12f34:	dc000017 	ldw	r16,0(sp)
   12f38:	dec00304 	addi	sp,sp,12
   12f3c:	f800283a 	ret
   12f40:	0109c83a 	sub	r4,zero,r4
   12f44:	04400044 	movi	r17,1
   12f48:	043fffc4 	movi	r16,-1
   12f4c:	283ff30e 	bge	r5,zero,12f1c <_gp+0xffff3dd4>
   12f50:	014bc83a 	sub	r5,zero,r5
   12f54:	003ff106 	br	12f1c <_gp+0xffff3dd4>

00012f58 <__udivsi3>:
   12f58:	000d883a 	mov	r6,zero
   12f5c:	0012e3c1 	jmpi	12e3c <udivmodsi4>

00012f60 <__umodsi3>:
   12f60:	01800044 	movi	r6,1
   12f64:	0012e3c1 	jmpi	12e3c <udivmodsi4>

00012f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f68:	defffe04 	addi	sp,sp,-8
   12f6c:	dfc00115 	stw	ra,4(sp)
   12f70:	df000015 	stw	fp,0(sp)
   12f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f78:	00800074 	movhi	r2,1
   12f7c:	109c5b04 	addi	r2,r2,29036
   12f80:	10800017 	ldw	r2,0(r2)
   12f84:	10000526 	beq	r2,zero,12f9c <alt_get_errno+0x34>
   12f88:	00800074 	movhi	r2,1
   12f8c:	109c5b04 	addi	r2,r2,29036
   12f90:	10800017 	ldw	r2,0(r2)
   12f94:	103ee83a 	callr	r2
   12f98:	00000206 	br	12fa4 <alt_get_errno+0x3c>
   12f9c:	008000b4 	movhi	r2,2
   12fa0:	10a2fe04 	addi	r2,r2,-29704
}
   12fa4:	e037883a 	mov	sp,fp
   12fa8:	dfc00117 	ldw	ra,4(sp)
   12fac:	df000017 	ldw	fp,0(sp)
   12fb0:	dec00204 	addi	sp,sp,8
   12fb4:	f800283a 	ret

00012fb8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12fb8:	defffb04 	addi	sp,sp,-20
   12fbc:	dfc00415 	stw	ra,16(sp)
   12fc0:	df000315 	stw	fp,12(sp)
   12fc4:	df000304 	addi	fp,sp,12
   12fc8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12fcc:	e0bfff17 	ldw	r2,-4(fp)
   12fd0:	10000616 	blt	r2,zero,12fec <close+0x34>
   12fd4:	e0bfff17 	ldw	r2,-4(fp)
   12fd8:	10c00324 	muli	r3,r2,12
   12fdc:	00800074 	movhi	r2,1
   12fe0:	1097da04 	addi	r2,r2,24424
   12fe4:	1885883a 	add	r2,r3,r2
   12fe8:	00000106 	br	12ff0 <close+0x38>
   12fec:	0005883a 	mov	r2,zero
   12ff0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12ff4:	e0bffd17 	ldw	r2,-12(fp)
   12ff8:	10001926 	beq	r2,zero,13060 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12ffc:	e0bffd17 	ldw	r2,-12(fp)
   13000:	10800017 	ldw	r2,0(r2)
   13004:	10800417 	ldw	r2,16(r2)
   13008:	10000626 	beq	r2,zero,13024 <close+0x6c>
   1300c:	e0bffd17 	ldw	r2,-12(fp)
   13010:	10800017 	ldw	r2,0(r2)
   13014:	10800417 	ldw	r2,16(r2)
   13018:	e13ffd17 	ldw	r4,-12(fp)
   1301c:	103ee83a 	callr	r2
   13020:	00000106 	br	13028 <close+0x70>
   13024:	0005883a 	mov	r2,zero
   13028:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1302c:	e13fff17 	ldw	r4,-4(fp)
   13030:	00136b40 	call	136b4 <alt_release_fd>
    if (rval < 0)
   13034:	e0bffe17 	ldw	r2,-8(fp)
   13038:	1000070e 	bge	r2,zero,13058 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1303c:	0012f680 	call	12f68 <alt_get_errno>
   13040:	1007883a 	mov	r3,r2
   13044:	e0bffe17 	ldw	r2,-8(fp)
   13048:	0085c83a 	sub	r2,zero,r2
   1304c:	18800015 	stw	r2,0(r3)
      return -1;
   13050:	00bfffc4 	movi	r2,-1
   13054:	00000706 	br	13074 <close+0xbc>
    }
    return 0;
   13058:	0005883a 	mov	r2,zero
   1305c:	00000506 	br	13074 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13060:	0012f680 	call	12f68 <alt_get_errno>
   13064:	1007883a 	mov	r3,r2
   13068:	00801444 	movi	r2,81
   1306c:	18800015 	stw	r2,0(r3)
    return -1;
   13070:	00bfffc4 	movi	r2,-1
  }
}
   13074:	e037883a 	mov	sp,fp
   13078:	dfc00117 	ldw	ra,4(sp)
   1307c:	df000017 	ldw	fp,0(sp)
   13080:	dec00204 	addi	sp,sp,8
   13084:	f800283a 	ret

00013088 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13088:	defffc04 	addi	sp,sp,-16
   1308c:	df000315 	stw	fp,12(sp)
   13090:	df000304 	addi	fp,sp,12
   13094:	e13ffd15 	stw	r4,-12(fp)
   13098:	e17ffe15 	stw	r5,-8(fp)
   1309c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   130a0:	e0bfff17 	ldw	r2,-4(fp)
}
   130a4:	e037883a 	mov	sp,fp
   130a8:	df000017 	ldw	fp,0(sp)
   130ac:	dec00104 	addi	sp,sp,4
   130b0:	f800283a 	ret

000130b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130b4:	defffe04 	addi	sp,sp,-8
   130b8:	dfc00115 	stw	ra,4(sp)
   130bc:	df000015 	stw	fp,0(sp)
   130c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   130c4:	00800074 	movhi	r2,1
   130c8:	109c5b04 	addi	r2,r2,29036
   130cc:	10800017 	ldw	r2,0(r2)
   130d0:	10000526 	beq	r2,zero,130e8 <alt_get_errno+0x34>
   130d4:	00800074 	movhi	r2,1
   130d8:	109c5b04 	addi	r2,r2,29036
   130dc:	10800017 	ldw	r2,0(r2)
   130e0:	103ee83a 	callr	r2
   130e4:	00000206 	br	130f0 <alt_get_errno+0x3c>
   130e8:	008000b4 	movhi	r2,2
   130ec:	10a2fe04 	addi	r2,r2,-29704
}
   130f0:	e037883a 	mov	sp,fp
   130f4:	dfc00117 	ldw	ra,4(sp)
   130f8:	df000017 	ldw	fp,0(sp)
   130fc:	dec00204 	addi	sp,sp,8
   13100:	f800283a 	ret

00013104 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13104:	defffb04 	addi	sp,sp,-20
   13108:	dfc00415 	stw	ra,16(sp)
   1310c:	df000315 	stw	fp,12(sp)
   13110:	df000304 	addi	fp,sp,12
   13114:	e13ffe15 	stw	r4,-8(fp)
   13118:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1311c:	e0bffe17 	ldw	r2,-8(fp)
   13120:	10000616 	blt	r2,zero,1313c <fstat+0x38>
   13124:	e0bffe17 	ldw	r2,-8(fp)
   13128:	10c00324 	muli	r3,r2,12
   1312c:	00800074 	movhi	r2,1
   13130:	1097da04 	addi	r2,r2,24424
   13134:	1885883a 	add	r2,r3,r2
   13138:	00000106 	br	13140 <fstat+0x3c>
   1313c:	0005883a 	mov	r2,zero
   13140:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13144:	e0bffd17 	ldw	r2,-12(fp)
   13148:	10001026 	beq	r2,zero,1318c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1314c:	e0bffd17 	ldw	r2,-12(fp)
   13150:	10800017 	ldw	r2,0(r2)
   13154:	10800817 	ldw	r2,32(r2)
   13158:	10000726 	beq	r2,zero,13178 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1315c:	e0bffd17 	ldw	r2,-12(fp)
   13160:	10800017 	ldw	r2,0(r2)
   13164:	10800817 	ldw	r2,32(r2)
   13168:	e13ffd17 	ldw	r4,-12(fp)
   1316c:	e17fff17 	ldw	r5,-4(fp)
   13170:	103ee83a 	callr	r2
   13174:	00000a06 	br	131a0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13178:	e0bfff17 	ldw	r2,-4(fp)
   1317c:	00c80004 	movi	r3,8192
   13180:	10c00115 	stw	r3,4(r2)
      return 0;
   13184:	0005883a 	mov	r2,zero
   13188:	00000506 	br	131a0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1318c:	00130b40 	call	130b4 <alt_get_errno>
   13190:	1007883a 	mov	r3,r2
   13194:	00801444 	movi	r2,81
   13198:	18800015 	stw	r2,0(r3)
    return -1;
   1319c:	00bfffc4 	movi	r2,-1
  }
}
   131a0:	e037883a 	mov	sp,fp
   131a4:	dfc00117 	ldw	ra,4(sp)
   131a8:	df000017 	ldw	fp,0(sp)
   131ac:	dec00204 	addi	sp,sp,8
   131b0:	f800283a 	ret

000131b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131b4:	defffe04 	addi	sp,sp,-8
   131b8:	dfc00115 	stw	ra,4(sp)
   131bc:	df000015 	stw	fp,0(sp)
   131c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131c4:	00800074 	movhi	r2,1
   131c8:	109c5b04 	addi	r2,r2,29036
   131cc:	10800017 	ldw	r2,0(r2)
   131d0:	10000526 	beq	r2,zero,131e8 <alt_get_errno+0x34>
   131d4:	00800074 	movhi	r2,1
   131d8:	109c5b04 	addi	r2,r2,29036
   131dc:	10800017 	ldw	r2,0(r2)
   131e0:	103ee83a 	callr	r2
   131e4:	00000206 	br	131f0 <alt_get_errno+0x3c>
   131e8:	008000b4 	movhi	r2,2
   131ec:	10a2fe04 	addi	r2,r2,-29704
}
   131f0:	e037883a 	mov	sp,fp
   131f4:	dfc00117 	ldw	ra,4(sp)
   131f8:	df000017 	ldw	fp,0(sp)
   131fc:	dec00204 	addi	sp,sp,8
   13200:	f800283a 	ret

00013204 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13204:	deffed04 	addi	sp,sp,-76
   13208:	dfc01215 	stw	ra,72(sp)
   1320c:	df001115 	stw	fp,68(sp)
   13210:	df001104 	addi	fp,sp,68
   13214:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13218:	e0bfff17 	ldw	r2,-4(fp)
   1321c:	10000616 	blt	r2,zero,13238 <isatty+0x34>
   13220:	e0bfff17 	ldw	r2,-4(fp)
   13224:	10c00324 	muli	r3,r2,12
   13228:	00800074 	movhi	r2,1
   1322c:	1097da04 	addi	r2,r2,24424
   13230:	1885883a 	add	r2,r3,r2
   13234:	00000106 	br	1323c <isatty+0x38>
   13238:	0005883a 	mov	r2,zero
   1323c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13240:	e0bfef17 	ldw	r2,-68(fp)
   13244:	10000e26 	beq	r2,zero,13280 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13248:	e0bfef17 	ldw	r2,-68(fp)
   1324c:	10800017 	ldw	r2,0(r2)
   13250:	10800817 	ldw	r2,32(r2)
   13254:	1000021e 	bne	r2,zero,13260 <isatty+0x5c>
    {
      return 1;
   13258:	00800044 	movi	r2,1
   1325c:	00000d06 	br	13294 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13260:	e0bff004 	addi	r2,fp,-64
   13264:	e13fff17 	ldw	r4,-4(fp)
   13268:	100b883a 	mov	r5,r2
   1326c:	00131040 	call	13104 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13270:	e0bff117 	ldw	r2,-60(fp)
   13274:	10880020 	cmpeqi	r2,r2,8192
   13278:	10803fcc 	andi	r2,r2,255
   1327c:	00000506 	br	13294 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13280:	00131b40 	call	131b4 <alt_get_errno>
   13284:	1007883a 	mov	r3,r2
   13288:	00801444 	movi	r2,81
   1328c:	18800015 	stw	r2,0(r3)
    return 0;
   13290:	0005883a 	mov	r2,zero
  }
}
   13294:	e037883a 	mov	sp,fp
   13298:	dfc00117 	ldw	ra,4(sp)
   1329c:	df000017 	ldw	fp,0(sp)
   132a0:	dec00204 	addi	sp,sp,8
   132a4:	f800283a 	ret

000132a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   132a8:	defffc04 	addi	sp,sp,-16
   132ac:	df000315 	stw	fp,12(sp)
   132b0:	df000304 	addi	fp,sp,12
   132b4:	e13ffd15 	stw	r4,-12(fp)
   132b8:	e17ffe15 	stw	r5,-8(fp)
   132bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   132c0:	e0fffe17 	ldw	r3,-8(fp)
   132c4:	e0bffd17 	ldw	r2,-12(fp)
   132c8:	18800c26 	beq	r3,r2,132fc <alt_load_section+0x54>
  {
    while( to != end )
   132cc:	00000806 	br	132f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   132d0:	e0bffe17 	ldw	r2,-8(fp)
   132d4:	10c00104 	addi	r3,r2,4
   132d8:	e0fffe15 	stw	r3,-8(fp)
   132dc:	e0fffd17 	ldw	r3,-12(fp)
   132e0:	19000104 	addi	r4,r3,4
   132e4:	e13ffd15 	stw	r4,-12(fp)
   132e8:	18c00017 	ldw	r3,0(r3)
   132ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   132f0:	e0fffe17 	ldw	r3,-8(fp)
   132f4:	e0bfff17 	ldw	r2,-4(fp)
   132f8:	18bff51e 	bne	r3,r2,132d0 <_gp+0xffff4188>
    {
      *to++ = *from++;
    }
  }
}
   132fc:	e037883a 	mov	sp,fp
   13300:	df000017 	ldw	fp,0(sp)
   13304:	dec00104 	addi	sp,sp,4
   13308:	f800283a 	ret

0001330c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1330c:	defffe04 	addi	sp,sp,-8
   13310:	dfc00115 	stw	ra,4(sp)
   13314:	df000015 	stw	fp,0(sp)
   13318:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1331c:	01000074 	movhi	r4,1
   13320:	211c6004 	addi	r4,r4,29056
   13324:	01400074 	movhi	r5,1
   13328:	2955c504 	addi	r5,r5,22292
   1332c:	01800074 	movhi	r6,1
   13330:	319c6004 	addi	r6,r6,29056
   13334:	00132a80 	call	132a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13338:	01000074 	movhi	r4,1
   1333c:	21000804 	addi	r4,r4,32
   13340:	01400074 	movhi	r5,1
   13344:	29400804 	addi	r5,r5,32
   13348:	01800074 	movhi	r6,1
   1334c:	31809004 	addi	r6,r6,576
   13350:	00132a80 	call	132a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13354:	01000074 	movhi	r4,1
   13358:	2115b104 	addi	r4,r4,22212
   1335c:	01400074 	movhi	r5,1
   13360:	2955b104 	addi	r5,r5,22212
   13364:	01800074 	movhi	r6,1
   13368:	3195c504 	addi	r6,r6,22292
   1336c:	00132a80 	call	132a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13370:	00145480 	call	14548 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13374:	00147380 	call	14738 <alt_icache_flush_all>
}
   13378:	e037883a 	mov	sp,fp
   1337c:	dfc00117 	ldw	ra,4(sp)
   13380:	df000017 	ldw	fp,0(sp)
   13384:	dec00204 	addi	sp,sp,8
   13388:	f800283a 	ret

0001338c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1338c:	defffe04 	addi	sp,sp,-8
   13390:	dfc00115 	stw	ra,4(sp)
   13394:	df000015 	stw	fp,0(sp)
   13398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1339c:	00800074 	movhi	r2,1
   133a0:	109c5b04 	addi	r2,r2,29036
   133a4:	10800017 	ldw	r2,0(r2)
   133a8:	10000526 	beq	r2,zero,133c0 <alt_get_errno+0x34>
   133ac:	00800074 	movhi	r2,1
   133b0:	109c5b04 	addi	r2,r2,29036
   133b4:	10800017 	ldw	r2,0(r2)
   133b8:	103ee83a 	callr	r2
   133bc:	00000206 	br	133c8 <alt_get_errno+0x3c>
   133c0:	008000b4 	movhi	r2,2
   133c4:	10a2fe04 	addi	r2,r2,-29704
}
   133c8:	e037883a 	mov	sp,fp
   133cc:	dfc00117 	ldw	ra,4(sp)
   133d0:	df000017 	ldw	fp,0(sp)
   133d4:	dec00204 	addi	sp,sp,8
   133d8:	f800283a 	ret

000133dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   133dc:	defff904 	addi	sp,sp,-28
   133e0:	dfc00615 	stw	ra,24(sp)
   133e4:	df000515 	stw	fp,20(sp)
   133e8:	df000504 	addi	fp,sp,20
   133ec:	e13ffd15 	stw	r4,-12(fp)
   133f0:	e17ffe15 	stw	r5,-8(fp)
   133f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   133f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	10000616 	blt	r2,zero,1341c <lseek+0x40>
   13404:	e0bffd17 	ldw	r2,-12(fp)
   13408:	10c00324 	muli	r3,r2,12
   1340c:	00800074 	movhi	r2,1
   13410:	1097da04 	addi	r2,r2,24424
   13414:	1885883a 	add	r2,r3,r2
   13418:	00000106 	br	13420 <lseek+0x44>
   1341c:	0005883a 	mov	r2,zero
   13420:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13424:	e0bffc17 	ldw	r2,-16(fp)
   13428:	10001026 	beq	r2,zero,1346c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1342c:	e0bffc17 	ldw	r2,-16(fp)
   13430:	10800017 	ldw	r2,0(r2)
   13434:	10800717 	ldw	r2,28(r2)
   13438:	10000926 	beq	r2,zero,13460 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1343c:	e0bffc17 	ldw	r2,-16(fp)
   13440:	10800017 	ldw	r2,0(r2)
   13444:	10800717 	ldw	r2,28(r2)
   13448:	e13ffc17 	ldw	r4,-16(fp)
   1344c:	e17ffe17 	ldw	r5,-8(fp)
   13450:	e1bfff17 	ldw	r6,-4(fp)
   13454:	103ee83a 	callr	r2
   13458:	e0bffb15 	stw	r2,-20(fp)
   1345c:	00000506 	br	13474 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13460:	00bfde84 	movi	r2,-134
   13464:	e0bffb15 	stw	r2,-20(fp)
   13468:	00000206 	br	13474 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1346c:	00bfebc4 	movi	r2,-81
   13470:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13474:	e0bffb17 	ldw	r2,-20(fp)
   13478:	1000070e 	bge	r2,zero,13498 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1347c:	001338c0 	call	1338c <alt_get_errno>
   13480:	1007883a 	mov	r3,r2
   13484:	e0bffb17 	ldw	r2,-20(fp)
   13488:	0085c83a 	sub	r2,zero,r2
   1348c:	18800015 	stw	r2,0(r3)
    rc = -1;
   13490:	00bfffc4 	movi	r2,-1
   13494:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13498:	e0bffb17 	ldw	r2,-20(fp)
}
   1349c:	e037883a 	mov	sp,fp
   134a0:	dfc00117 	ldw	ra,4(sp)
   134a4:	df000017 	ldw	fp,0(sp)
   134a8:	dec00204 	addi	sp,sp,8
   134ac:	f800283a 	ret

000134b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   134b0:	defffd04 	addi	sp,sp,-12
   134b4:	dfc00215 	stw	ra,8(sp)
   134b8:	df000115 	stw	fp,4(sp)
   134bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   134c0:	0009883a 	mov	r4,zero
   134c4:	00139440 	call	13944 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   134c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   134cc:	00139780 	call	13978 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   134d0:	01000074 	movhi	r4,1
   134d4:	2115bb04 	addi	r4,r4,22252
   134d8:	01400074 	movhi	r5,1
   134dc:	2955bb04 	addi	r5,r5,22252
   134e0:	01800074 	movhi	r6,1
   134e4:	3195bb04 	addi	r6,r6,22252
   134e8:	0014af80 	call	14af8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   134ec:	00146800 	call	14680 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   134f0:	01000074 	movhi	r4,1
   134f4:	2111b704 	addi	r4,r4,18140
   134f8:	00153200 	call	15320 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   134fc:	d126ad17 	ldw	r4,-25932(gp)
   13500:	d0e6ae17 	ldw	r3,-25928(gp)
   13504:	d0a6af17 	ldw	r2,-25924(gp)
   13508:	180b883a 	mov	r5,r3
   1350c:	100d883a 	mov	r6,r2
   13510:	001028c0 	call	1028c <main>
   13514:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13518:	01000044 	movi	r4,1
   1351c:	0012fb80 	call	12fb8 <close>
  exit (result);
   13520:	e13fff17 	ldw	r4,-4(fp)
   13524:	00153340 	call	15334 <exit>

00013528 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13528:	defffe04 	addi	sp,sp,-8
   1352c:	df000115 	stw	fp,4(sp)
   13530:	df000104 	addi	fp,sp,4
   13534:	e13fff15 	stw	r4,-4(fp)
}
   13538:	e037883a 	mov	sp,fp
   1353c:	df000017 	ldw	fp,0(sp)
   13540:	dec00104 	addi	sp,sp,4
   13544:	f800283a 	ret

00013548 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13548:	defffe04 	addi	sp,sp,-8
   1354c:	df000115 	stw	fp,4(sp)
   13550:	df000104 	addi	fp,sp,4
   13554:	e13fff15 	stw	r4,-4(fp)
}
   13558:	e037883a 	mov	sp,fp
   1355c:	df000017 	ldw	fp,0(sp)
   13560:	dec00104 	addi	sp,sp,4
   13564:	f800283a 	ret

00013568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13568:	defffe04 	addi	sp,sp,-8
   1356c:	dfc00115 	stw	ra,4(sp)
   13570:	df000015 	stw	fp,0(sp)
   13574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13578:	00800074 	movhi	r2,1
   1357c:	109c5b04 	addi	r2,r2,29036
   13580:	10800017 	ldw	r2,0(r2)
   13584:	10000526 	beq	r2,zero,1359c <alt_get_errno+0x34>
   13588:	00800074 	movhi	r2,1
   1358c:	109c5b04 	addi	r2,r2,29036
   13590:	10800017 	ldw	r2,0(r2)
   13594:	103ee83a 	callr	r2
   13598:	00000206 	br	135a4 <alt_get_errno+0x3c>
   1359c:	008000b4 	movhi	r2,2
   135a0:	10a2fe04 	addi	r2,r2,-29704
}
   135a4:	e037883a 	mov	sp,fp
   135a8:	dfc00117 	ldw	ra,4(sp)
   135ac:	df000017 	ldw	fp,0(sp)
   135b0:	dec00204 	addi	sp,sp,8
   135b4:	f800283a 	ret

000135b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   135b8:	defff904 	addi	sp,sp,-28
   135bc:	dfc00615 	stw	ra,24(sp)
   135c0:	df000515 	stw	fp,20(sp)
   135c4:	df000504 	addi	fp,sp,20
   135c8:	e13ffd15 	stw	r4,-12(fp)
   135cc:	e17ffe15 	stw	r5,-8(fp)
   135d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   135d4:	e0bffd17 	ldw	r2,-12(fp)
   135d8:	10000616 	blt	r2,zero,135f4 <read+0x3c>
   135dc:	e0bffd17 	ldw	r2,-12(fp)
   135e0:	10c00324 	muli	r3,r2,12
   135e4:	00800074 	movhi	r2,1
   135e8:	1097da04 	addi	r2,r2,24424
   135ec:	1885883a 	add	r2,r3,r2
   135f0:	00000106 	br	135f8 <read+0x40>
   135f4:	0005883a 	mov	r2,zero
   135f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   135fc:	e0bffb17 	ldw	r2,-20(fp)
   13600:	10002226 	beq	r2,zero,1368c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13604:	e0bffb17 	ldw	r2,-20(fp)
   13608:	10800217 	ldw	r2,8(r2)
   1360c:	108000cc 	andi	r2,r2,3
   13610:	10800060 	cmpeqi	r2,r2,1
   13614:	1000181e 	bne	r2,zero,13678 <read+0xc0>
        (fd->dev->read))
   13618:	e0bffb17 	ldw	r2,-20(fp)
   1361c:	10800017 	ldw	r2,0(r2)
   13620:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13624:	10001426 	beq	r2,zero,13678 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13628:	e0bffb17 	ldw	r2,-20(fp)
   1362c:	10800017 	ldw	r2,0(r2)
   13630:	10800517 	ldw	r2,20(r2)
   13634:	e0ffff17 	ldw	r3,-4(fp)
   13638:	e13ffb17 	ldw	r4,-20(fp)
   1363c:	e17ffe17 	ldw	r5,-8(fp)
   13640:	180d883a 	mov	r6,r3
   13644:	103ee83a 	callr	r2
   13648:	e0bffc15 	stw	r2,-16(fp)
   1364c:	e0bffc17 	ldw	r2,-16(fp)
   13650:	1000070e 	bge	r2,zero,13670 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13654:	00135680 	call	13568 <alt_get_errno>
   13658:	1007883a 	mov	r3,r2
   1365c:	e0bffc17 	ldw	r2,-16(fp)
   13660:	0085c83a 	sub	r2,zero,r2
   13664:	18800015 	stw	r2,0(r3)
          return -1;
   13668:	00bfffc4 	movi	r2,-1
   1366c:	00000c06 	br	136a0 <read+0xe8>
        }
        return rval;
   13670:	e0bffc17 	ldw	r2,-16(fp)
   13674:	00000a06 	br	136a0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13678:	00135680 	call	13568 <alt_get_errno>
   1367c:	1007883a 	mov	r3,r2
   13680:	00800344 	movi	r2,13
   13684:	18800015 	stw	r2,0(r3)
   13688:	00000406 	br	1369c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1368c:	00135680 	call	13568 <alt_get_errno>
   13690:	1007883a 	mov	r3,r2
   13694:	00801444 	movi	r2,81
   13698:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1369c:	00bfffc4 	movi	r2,-1
}
   136a0:	e037883a 	mov	sp,fp
   136a4:	dfc00117 	ldw	ra,4(sp)
   136a8:	df000017 	ldw	fp,0(sp)
   136ac:	dec00204 	addi	sp,sp,8
   136b0:	f800283a 	ret

000136b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   136b4:	defffe04 	addi	sp,sp,-8
   136b8:	df000115 	stw	fp,4(sp)
   136bc:	df000104 	addi	fp,sp,4
   136c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   136c4:	e0bfff17 	ldw	r2,-4(fp)
   136c8:	108000d0 	cmplti	r2,r2,3
   136cc:	10000d1e 	bne	r2,zero,13704 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   136d0:	00800074 	movhi	r2,1
   136d4:	1097da04 	addi	r2,r2,24424
   136d8:	e0ffff17 	ldw	r3,-4(fp)
   136dc:	18c00324 	muli	r3,r3,12
   136e0:	18c00204 	addi	r3,r3,8
   136e4:	10c5883a 	add	r2,r2,r3
   136e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   136ec:	00800074 	movhi	r2,1
   136f0:	1097da04 	addi	r2,r2,24424
   136f4:	e0ffff17 	ldw	r3,-4(fp)
   136f8:	18c00324 	muli	r3,r3,12
   136fc:	10c5883a 	add	r2,r2,r3
   13700:	10000015 	stw	zero,0(r2)
  }
}
   13704:	e037883a 	mov	sp,fp
   13708:	df000017 	ldw	fp,0(sp)
   1370c:	dec00104 	addi	sp,sp,4
   13710:	f800283a 	ret

00013714 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13714:	defff904 	addi	sp,sp,-28
   13718:	df000615 	stw	fp,24(sp)
   1371c:	df000604 	addi	fp,sp,24
   13720:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13724:	0005303a 	rdctl	r2,status
   13728:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1372c:	e0fffc17 	ldw	r3,-16(fp)
   13730:	00bfff84 	movi	r2,-2
   13734:	1884703a 	and	r2,r3,r2
   13738:	1001703a 	wrctl	status,r2
  
  return context;
   1373c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13740:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13744:	d0a00a17 	ldw	r2,-32728(gp)
   13748:	10c000c4 	addi	r3,r2,3
   1374c:	00bfff04 	movi	r2,-4
   13750:	1884703a 	and	r2,r3,r2
   13754:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13758:	d0e00a17 	ldw	r3,-32728(gp)
   1375c:	e0bfff17 	ldw	r2,-4(fp)
   13760:	1887883a 	add	r3,r3,r2
   13764:	008000b4 	movhi	r2,2
   13768:	10aee004 	addi	r2,r2,-17536
   1376c:	10c0062e 	bgeu	r2,r3,13788 <sbrk+0x74>
   13770:	e0bffa17 	ldw	r2,-24(fp)
   13774:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13778:	e0bffd17 	ldw	r2,-12(fp)
   1377c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13780:	00bfffc4 	movi	r2,-1
   13784:	00000b06 	br	137b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13788:	d0a00a17 	ldw	r2,-32728(gp)
   1378c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13790:	d0e00a17 	ldw	r3,-32728(gp)
   13794:	e0bfff17 	ldw	r2,-4(fp)
   13798:	1885883a 	add	r2,r3,r2
   1379c:	d0a00a15 	stw	r2,-32728(gp)
   137a0:	e0bffa17 	ldw	r2,-24(fp)
   137a4:	e0bffe15 	stw	r2,-8(fp)
   137a8:	e0bffe17 	ldw	r2,-8(fp)
   137ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   137b0:	e0bffb17 	ldw	r2,-20(fp)
} 
   137b4:	e037883a 	mov	sp,fp
   137b8:	df000017 	ldw	fp,0(sp)
   137bc:	dec00104 	addi	sp,sp,4
   137c0:	f800283a 	ret

000137c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137c4:	defffe04 	addi	sp,sp,-8
   137c8:	dfc00115 	stw	ra,4(sp)
   137cc:	df000015 	stw	fp,0(sp)
   137d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137d4:	00800074 	movhi	r2,1
   137d8:	109c5b04 	addi	r2,r2,29036
   137dc:	10800017 	ldw	r2,0(r2)
   137e0:	10000526 	beq	r2,zero,137f8 <alt_get_errno+0x34>
   137e4:	00800074 	movhi	r2,1
   137e8:	109c5b04 	addi	r2,r2,29036
   137ec:	10800017 	ldw	r2,0(r2)
   137f0:	103ee83a 	callr	r2
   137f4:	00000206 	br	13800 <alt_get_errno+0x3c>
   137f8:	008000b4 	movhi	r2,2
   137fc:	10a2fe04 	addi	r2,r2,-29704
}
   13800:	e037883a 	mov	sp,fp
   13804:	dfc00117 	ldw	ra,4(sp)
   13808:	df000017 	ldw	fp,0(sp)
   1380c:	dec00204 	addi	sp,sp,8
   13810:	f800283a 	ret

00013814 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13814:	defff904 	addi	sp,sp,-28
   13818:	dfc00615 	stw	ra,24(sp)
   1381c:	df000515 	stw	fp,20(sp)
   13820:	df000504 	addi	fp,sp,20
   13824:	e13ffd15 	stw	r4,-12(fp)
   13828:	e17ffe15 	stw	r5,-8(fp)
   1382c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13830:	e0bffd17 	ldw	r2,-12(fp)
   13834:	10000616 	blt	r2,zero,13850 <write+0x3c>
   13838:	e0bffd17 	ldw	r2,-12(fp)
   1383c:	10c00324 	muli	r3,r2,12
   13840:	00800074 	movhi	r2,1
   13844:	1097da04 	addi	r2,r2,24424
   13848:	1885883a 	add	r2,r3,r2
   1384c:	00000106 	br	13854 <write+0x40>
   13850:	0005883a 	mov	r2,zero
   13854:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13858:	e0bffb17 	ldw	r2,-20(fp)
   1385c:	10002126 	beq	r2,zero,138e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13860:	e0bffb17 	ldw	r2,-20(fp)
   13864:	10800217 	ldw	r2,8(r2)
   13868:	108000cc 	andi	r2,r2,3
   1386c:	10001826 	beq	r2,zero,138d0 <write+0xbc>
   13870:	e0bffb17 	ldw	r2,-20(fp)
   13874:	10800017 	ldw	r2,0(r2)
   13878:	10800617 	ldw	r2,24(r2)
   1387c:	10001426 	beq	r2,zero,138d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13880:	e0bffb17 	ldw	r2,-20(fp)
   13884:	10800017 	ldw	r2,0(r2)
   13888:	10800617 	ldw	r2,24(r2)
   1388c:	e0ffff17 	ldw	r3,-4(fp)
   13890:	e13ffb17 	ldw	r4,-20(fp)
   13894:	e17ffe17 	ldw	r5,-8(fp)
   13898:	180d883a 	mov	r6,r3
   1389c:	103ee83a 	callr	r2
   138a0:	e0bffc15 	stw	r2,-16(fp)
   138a4:	e0bffc17 	ldw	r2,-16(fp)
   138a8:	1000070e 	bge	r2,zero,138c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   138ac:	00137c40 	call	137c4 <alt_get_errno>
   138b0:	1007883a 	mov	r3,r2
   138b4:	e0bffc17 	ldw	r2,-16(fp)
   138b8:	0085c83a 	sub	r2,zero,r2
   138bc:	18800015 	stw	r2,0(r3)
        return -1;
   138c0:	00bfffc4 	movi	r2,-1
   138c4:	00000c06 	br	138f8 <write+0xe4>
      }
      return rval;
   138c8:	e0bffc17 	ldw	r2,-16(fp)
   138cc:	00000a06 	br	138f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   138d0:	00137c40 	call	137c4 <alt_get_errno>
   138d4:	1007883a 	mov	r3,r2
   138d8:	00800344 	movi	r2,13
   138dc:	18800015 	stw	r2,0(r3)
   138e0:	00000406 	br	138f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   138e4:	00137c40 	call	137c4 <alt_get_errno>
   138e8:	1007883a 	mov	r3,r2
   138ec:	00801444 	movi	r2,81
   138f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   138f4:	00bfffc4 	movi	r2,-1
}
   138f8:	e037883a 	mov	sp,fp
   138fc:	dfc00117 	ldw	ra,4(sp)
   13900:	df000017 	ldw	fp,0(sp)
   13904:	dec00204 	addi	sp,sp,8
   13908:	f800283a 	ret

0001390c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1390c:	defffd04 	addi	sp,sp,-12
   13910:	dfc00215 	stw	ra,8(sp)
   13914:	df000115 	stw	fp,4(sp)
   13918:	df000104 	addi	fp,sp,4
   1391c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13920:	e13fff17 	ldw	r4,-4(fp)
   13924:	01400074 	movhi	r5,1
   13928:	295c5804 	addi	r5,r5,29024
   1392c:	00145dc0 	call	145dc <alt_dev_llist_insert>
}
   13930:	e037883a 	mov	sp,fp
   13934:	dfc00117 	ldw	ra,4(sp)
   13938:	df000017 	ldw	fp,0(sp)
   1393c:	dec00204 	addi	sp,sp,8
   13940:	f800283a 	ret

00013944 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13944:	defffd04 	addi	sp,sp,-12
   13948:	dfc00215 	stw	ra,8(sp)
   1394c:	df000115 	stw	fp,4(sp)
   13950:	df000104 	addi	fp,sp,4
   13954:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   13958:	0014f800 	call	14f80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1395c:	00800044 	movi	r2,1
   13960:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13964:	e037883a 	mov	sp,fp
   13968:	dfc00117 	ldw	ra,4(sp)
   1396c:	df000017 	ldw	fp,0(sp)
   13970:	dec00204 	addi	sp,sp,8
   13974:	f800283a 	ret

00013978 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13978:	defffe04 	addi	sp,sp,-8
   1397c:	dfc00115 	stw	ra,4(sp)
   13980:	df000015 	stw	fp,0(sp)
   13984:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13988:	01000074 	movhi	r4,1
   1398c:	21184404 	addi	r4,r4,24848
   13990:	000b883a 	mov	r5,zero
   13994:	000d883a 	mov	r6,zero
   13998:	0013b200 	call	13b20 <altera_avalon_jtag_uart_init>
   1399c:	01000074 	movhi	r4,1
   139a0:	21183a04 	addi	r4,r4,24808
   139a4:	001390c0 	call	1390c <alt_dev_reg>
}
   139a8:	e037883a 	mov	sp,fp
   139ac:	dfc00117 	ldw	ra,4(sp)
   139b0:	df000017 	ldw	fp,0(sp)
   139b4:	dec00204 	addi	sp,sp,8
   139b8:	f800283a 	ret

000139bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   139bc:	defffa04 	addi	sp,sp,-24
   139c0:	dfc00515 	stw	ra,20(sp)
   139c4:	df000415 	stw	fp,16(sp)
   139c8:	df000404 	addi	fp,sp,16
   139cc:	e13ffd15 	stw	r4,-12(fp)
   139d0:	e17ffe15 	stw	r5,-8(fp)
   139d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   139d8:	e0bffd17 	ldw	r2,-12(fp)
   139dc:	10800017 	ldw	r2,0(r2)
   139e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   139e4:	e0bffc17 	ldw	r2,-16(fp)
   139e8:	10c00a04 	addi	r3,r2,40
   139ec:	e0bffd17 	ldw	r2,-12(fp)
   139f0:	10800217 	ldw	r2,8(r2)
   139f4:	1809883a 	mov	r4,r3
   139f8:	e17ffe17 	ldw	r5,-8(fp)
   139fc:	e1bfff17 	ldw	r6,-4(fp)
   13a00:	100f883a 	mov	r7,r2
   13a04:	0013fe40 	call	13fe4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13a08:	e037883a 	mov	sp,fp
   13a0c:	dfc00117 	ldw	ra,4(sp)
   13a10:	df000017 	ldw	fp,0(sp)
   13a14:	dec00204 	addi	sp,sp,8
   13a18:	f800283a 	ret

00013a1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13a1c:	defffa04 	addi	sp,sp,-24
   13a20:	dfc00515 	stw	ra,20(sp)
   13a24:	df000415 	stw	fp,16(sp)
   13a28:	df000404 	addi	fp,sp,16
   13a2c:	e13ffd15 	stw	r4,-12(fp)
   13a30:	e17ffe15 	stw	r5,-8(fp)
   13a34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a38:	e0bffd17 	ldw	r2,-12(fp)
   13a3c:	10800017 	ldw	r2,0(r2)
   13a40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13a44:	e0bffc17 	ldw	r2,-16(fp)
   13a48:	10c00a04 	addi	r3,r2,40
   13a4c:	e0bffd17 	ldw	r2,-12(fp)
   13a50:	10800217 	ldw	r2,8(r2)
   13a54:	1809883a 	mov	r4,r3
   13a58:	e17ffe17 	ldw	r5,-8(fp)
   13a5c:	e1bfff17 	ldw	r6,-4(fp)
   13a60:	100f883a 	mov	r7,r2
   13a64:	00141f00 	call	141f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13a68:	e037883a 	mov	sp,fp
   13a6c:	dfc00117 	ldw	ra,4(sp)
   13a70:	df000017 	ldw	fp,0(sp)
   13a74:	dec00204 	addi	sp,sp,8
   13a78:	f800283a 	ret

00013a7c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13a7c:	defffc04 	addi	sp,sp,-16
   13a80:	dfc00315 	stw	ra,12(sp)
   13a84:	df000215 	stw	fp,8(sp)
   13a88:	df000204 	addi	fp,sp,8
   13a8c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a90:	e0bfff17 	ldw	r2,-4(fp)
   13a94:	10800017 	ldw	r2,0(r2)
   13a98:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13a9c:	e0bffe17 	ldw	r2,-8(fp)
   13aa0:	10c00a04 	addi	r3,r2,40
   13aa4:	e0bfff17 	ldw	r2,-4(fp)
   13aa8:	10800217 	ldw	r2,8(r2)
   13aac:	1809883a 	mov	r4,r3
   13ab0:	100b883a 	mov	r5,r2
   13ab4:	0013e900 	call	13e90 <altera_avalon_jtag_uart_close>
}
   13ab8:	e037883a 	mov	sp,fp
   13abc:	dfc00117 	ldw	ra,4(sp)
   13ac0:	df000017 	ldw	fp,0(sp)
   13ac4:	dec00204 	addi	sp,sp,8
   13ac8:	f800283a 	ret

00013acc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13acc:	defffa04 	addi	sp,sp,-24
   13ad0:	dfc00515 	stw	ra,20(sp)
   13ad4:	df000415 	stw	fp,16(sp)
   13ad8:	df000404 	addi	fp,sp,16
   13adc:	e13ffd15 	stw	r4,-12(fp)
   13ae0:	e17ffe15 	stw	r5,-8(fp)
   13ae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13ae8:	e0bffd17 	ldw	r2,-12(fp)
   13aec:	10800017 	ldw	r2,0(r2)
   13af0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13af4:	e0bffc17 	ldw	r2,-16(fp)
   13af8:	10800a04 	addi	r2,r2,40
   13afc:	1009883a 	mov	r4,r2
   13b00:	e17ffe17 	ldw	r5,-8(fp)
   13b04:	e1bfff17 	ldw	r6,-4(fp)
   13b08:	0013ef80 	call	13ef8 <altera_avalon_jtag_uart_ioctl>
}
   13b0c:	e037883a 	mov	sp,fp
   13b10:	dfc00117 	ldw	ra,4(sp)
   13b14:	df000017 	ldw	fp,0(sp)
   13b18:	dec00204 	addi	sp,sp,8
   13b1c:	f800283a 	ret

00013b20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13b20:	defffa04 	addi	sp,sp,-24
   13b24:	dfc00515 	stw	ra,20(sp)
   13b28:	df000415 	stw	fp,16(sp)
   13b2c:	df000404 	addi	fp,sp,16
   13b30:	e13ffd15 	stw	r4,-12(fp)
   13b34:	e17ffe15 	stw	r5,-8(fp)
   13b38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13b3c:	e0bffd17 	ldw	r2,-12(fp)
   13b40:	00c00044 	movi	r3,1
   13b44:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13b48:	e0bffd17 	ldw	r2,-12(fp)
   13b4c:	10800017 	ldw	r2,0(r2)
   13b50:	10800104 	addi	r2,r2,4
   13b54:	1007883a 	mov	r3,r2
   13b58:	e0bffd17 	ldw	r2,-12(fp)
   13b5c:	10800817 	ldw	r2,32(r2)
   13b60:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13b64:	e0fffe17 	ldw	r3,-8(fp)
   13b68:	e0bfff17 	ldw	r2,-4(fp)
   13b6c:	d8000015 	stw	zero,0(sp)
   13b70:	1809883a 	mov	r4,r3
   13b74:	100b883a 	mov	r5,r2
   13b78:	01800074 	movhi	r6,1
   13b7c:	318ef904 	addi	r6,r6,15332
   13b80:	e1fffd17 	ldw	r7,-12(fp)
   13b84:	00147680 	call	14768 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13b90:	e0bffd17 	ldw	r2,-12(fp)
   13b94:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13b98:	008000b4 	movhi	r2,2
   13b9c:	10a30304 	addi	r2,r2,-29684
   13ba0:	10800017 	ldw	r2,0(r2)
   13ba4:	1809883a 	mov	r4,r3
   13ba8:	100b883a 	mov	r5,r2
   13bac:	01800074 	movhi	r6,1
   13bb0:	318f7a04 	addi	r6,r6,15848
   13bb4:	e1fffd17 	ldw	r7,-12(fp)
   13bb8:	00144080 	call	14408 <alt_alarm_start>
   13bbc:	1000040e 	bge	r2,zero,13bd0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13bc0:	e0fffd17 	ldw	r3,-12(fp)
   13bc4:	00a00034 	movhi	r2,32768
   13bc8:	10bfffc4 	addi	r2,r2,-1
   13bcc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13bd0:	e037883a 	mov	sp,fp
   13bd4:	dfc00117 	ldw	ra,4(sp)
   13bd8:	df000017 	ldw	fp,0(sp)
   13bdc:	dec00204 	addi	sp,sp,8
   13be0:	f800283a 	ret

00013be4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13be4:	defff804 	addi	sp,sp,-32
   13be8:	df000715 	stw	fp,28(sp)
   13bec:	df000704 	addi	fp,sp,28
   13bf0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13bf4:	e0bfff17 	ldw	r2,-4(fp)
   13bf8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13bfc:	e0bffb17 	ldw	r2,-20(fp)
   13c00:	10800017 	ldw	r2,0(r2)
   13c04:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13c08:	e0bffc17 	ldw	r2,-16(fp)
   13c0c:	10800104 	addi	r2,r2,4
   13c10:	10800037 	ldwio	r2,0(r2)
   13c14:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13c18:	e0bffd17 	ldw	r2,-12(fp)
   13c1c:	1080c00c 	andi	r2,r2,768
   13c20:	1000011e 	bne	r2,zero,13c28 <altera_avalon_jtag_uart_irq+0x44>
      break;
   13c24:	00006c06 	br	13dd8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13c28:	e0bffd17 	ldw	r2,-12(fp)
   13c2c:	1080400c 	andi	r2,r2,256
   13c30:	10003426 	beq	r2,zero,13d04 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13c34:	00800074 	movhi	r2,1
   13c38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13c3c:	e0bffb17 	ldw	r2,-20(fp)
   13c40:	10800a17 	ldw	r2,40(r2)
   13c44:	10800044 	addi	r2,r2,1
   13c48:	1081ffcc 	andi	r2,r2,2047
   13c4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13c50:	e0bffb17 	ldw	r2,-20(fp)
   13c54:	10c00b17 	ldw	r3,44(r2)
   13c58:	e0bffe17 	ldw	r2,-8(fp)
   13c5c:	1880011e 	bne	r3,r2,13c64 <altera_avalon_jtag_uart_irq+0x80>
          break;
   13c60:	00001606 	br	13cbc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13c64:	e0bffc17 	ldw	r2,-16(fp)
   13c68:	10800037 	ldwio	r2,0(r2)
   13c6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13c70:	e0bff917 	ldw	r2,-28(fp)
   13c74:	10a0000c 	andi	r2,r2,32768
   13c78:	1000011e 	bne	r2,zero,13c80 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   13c7c:	00000f06 	br	13cbc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13c80:	e0bffb17 	ldw	r2,-20(fp)
   13c84:	10800a17 	ldw	r2,40(r2)
   13c88:	e0fff917 	ldw	r3,-28(fp)
   13c8c:	1809883a 	mov	r4,r3
   13c90:	e0fffb17 	ldw	r3,-20(fp)
   13c94:	1885883a 	add	r2,r3,r2
   13c98:	10800e04 	addi	r2,r2,56
   13c9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ca0:	e0bffb17 	ldw	r2,-20(fp)
   13ca4:	10800a17 	ldw	r2,40(r2)
   13ca8:	10800044 	addi	r2,r2,1
   13cac:	10c1ffcc 	andi	r3,r2,2047
   13cb0:	e0bffb17 	ldw	r2,-20(fp)
   13cb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13cb8:	003fe006 	br	13c3c <_gp+0xffff4af4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13cbc:	e0bff917 	ldw	r2,-28(fp)
   13cc0:	10bfffec 	andhi	r2,r2,65535
   13cc4:	10000f26 	beq	r2,zero,13d04 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13cc8:	e0bffb17 	ldw	r2,-20(fp)
   13ccc:	10c00817 	ldw	r3,32(r2)
   13cd0:	00bfff84 	movi	r2,-2
   13cd4:	1886703a 	and	r3,r3,r2
   13cd8:	e0bffb17 	ldw	r2,-20(fp)
   13cdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13ce0:	e0bffc17 	ldw	r2,-16(fp)
   13ce4:	10800104 	addi	r2,r2,4
   13ce8:	1007883a 	mov	r3,r2
   13cec:	e0bffb17 	ldw	r2,-20(fp)
   13cf0:	10800817 	ldw	r2,32(r2)
   13cf4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13cf8:	e0bffc17 	ldw	r2,-16(fp)
   13cfc:	10800104 	addi	r2,r2,4
   13d00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13d04:	e0bffd17 	ldw	r2,-12(fp)
   13d08:	1080800c 	andi	r2,r2,512
   13d0c:	10003126 	beq	r2,zero,13dd4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13d10:	e0bffd17 	ldw	r2,-12(fp)
   13d14:	1004d43a 	srli	r2,r2,16
   13d18:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13d1c:	00001406 	br	13d70 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13d20:	e0bffc17 	ldw	r2,-16(fp)
   13d24:	e0fffb17 	ldw	r3,-20(fp)
   13d28:	18c00d17 	ldw	r3,52(r3)
   13d2c:	e13ffb17 	ldw	r4,-20(fp)
   13d30:	20c7883a 	add	r3,r4,r3
   13d34:	18c20e04 	addi	r3,r3,2104
   13d38:	18c00003 	ldbu	r3,0(r3)
   13d3c:	18c03fcc 	andi	r3,r3,255
   13d40:	18c0201c 	xori	r3,r3,128
   13d44:	18ffe004 	addi	r3,r3,-128
   13d48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13d4c:	e0bffb17 	ldw	r2,-20(fp)
   13d50:	10800d17 	ldw	r2,52(r2)
   13d54:	10800044 	addi	r2,r2,1
   13d58:	10c1ffcc 	andi	r3,r2,2047
   13d5c:	e0bffb17 	ldw	r2,-20(fp)
   13d60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13d64:	e0bffa17 	ldw	r2,-24(fp)
   13d68:	10bfffc4 	addi	r2,r2,-1
   13d6c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13d70:	e0bffa17 	ldw	r2,-24(fp)
   13d74:	10000526 	beq	r2,zero,13d8c <altera_avalon_jtag_uart_irq+0x1a8>
   13d78:	e0bffb17 	ldw	r2,-20(fp)
   13d7c:	10c00d17 	ldw	r3,52(r2)
   13d80:	e0bffb17 	ldw	r2,-20(fp)
   13d84:	10800c17 	ldw	r2,48(r2)
   13d88:	18bfe51e 	bne	r3,r2,13d20 <_gp+0xffff4bd8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13d8c:	e0bffa17 	ldw	r2,-24(fp)
   13d90:	10001026 	beq	r2,zero,13dd4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13d94:	e0bffb17 	ldw	r2,-20(fp)
   13d98:	10c00817 	ldw	r3,32(r2)
   13d9c:	00bfff44 	movi	r2,-3
   13da0:	1886703a 	and	r3,r3,r2
   13da4:	e0bffb17 	ldw	r2,-20(fp)
   13da8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13dac:	e0bffb17 	ldw	r2,-20(fp)
   13db0:	10800017 	ldw	r2,0(r2)
   13db4:	10800104 	addi	r2,r2,4
   13db8:	1007883a 	mov	r3,r2
   13dbc:	e0bffb17 	ldw	r2,-20(fp)
   13dc0:	10800817 	ldw	r2,32(r2)
   13dc4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13dc8:	e0bffc17 	ldw	r2,-16(fp)
   13dcc:	10800104 	addi	r2,r2,4
   13dd0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13dd4:	003f8c06 	br	13c08 <_gp+0xffff4ac0>
}
   13dd8:	e037883a 	mov	sp,fp
   13ddc:	df000017 	ldw	fp,0(sp)
   13de0:	dec00104 	addi	sp,sp,4
   13de4:	f800283a 	ret

00013de8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13de8:	defff804 	addi	sp,sp,-32
   13dec:	df000715 	stw	fp,28(sp)
   13df0:	df000704 	addi	fp,sp,28
   13df4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13df8:	e0bffb17 	ldw	r2,-20(fp)
   13dfc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13e00:	e0bff917 	ldw	r2,-28(fp)
   13e04:	10800017 	ldw	r2,0(r2)
   13e08:	10800104 	addi	r2,r2,4
   13e0c:	10800037 	ldwio	r2,0(r2)
   13e10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13e14:	e0bffa17 	ldw	r2,-24(fp)
   13e18:	1081000c 	andi	r2,r2,1024
   13e1c:	10000b26 	beq	r2,zero,13e4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13e20:	e0bff917 	ldw	r2,-28(fp)
   13e24:	10800017 	ldw	r2,0(r2)
   13e28:	10800104 	addi	r2,r2,4
   13e2c:	1007883a 	mov	r3,r2
   13e30:	e0bff917 	ldw	r2,-28(fp)
   13e34:	10800817 	ldw	r2,32(r2)
   13e38:	10810014 	ori	r2,r2,1024
   13e3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13e40:	e0bff917 	ldw	r2,-28(fp)
   13e44:	10000915 	stw	zero,36(r2)
   13e48:	00000a06 	br	13e74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13e4c:	e0bff917 	ldw	r2,-28(fp)
   13e50:	10c00917 	ldw	r3,36(r2)
   13e54:	00a00034 	movhi	r2,32768
   13e58:	10bfff04 	addi	r2,r2,-4
   13e5c:	10c00536 	bltu	r2,r3,13e74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13e60:	e0bff917 	ldw	r2,-28(fp)
   13e64:	10800917 	ldw	r2,36(r2)
   13e68:	10c00044 	addi	r3,r2,1
   13e6c:	e0bff917 	ldw	r2,-28(fp)
   13e70:	10c00915 	stw	r3,36(r2)
   13e74:	008000b4 	movhi	r2,2
   13e78:	10a30304 	addi	r2,r2,-29684
   13e7c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13e80:	e037883a 	mov	sp,fp
   13e84:	df000017 	ldw	fp,0(sp)
   13e88:	dec00104 	addi	sp,sp,4
   13e8c:	f800283a 	ret

00013e90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13e90:	defffd04 	addi	sp,sp,-12
   13e94:	df000215 	stw	fp,8(sp)
   13e98:	df000204 	addi	fp,sp,8
   13e9c:	e13ffe15 	stw	r4,-8(fp)
   13ea0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13ea4:	00000506 	br	13ebc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13ea8:	e0bfff17 	ldw	r2,-4(fp)
   13eac:	1090000c 	andi	r2,r2,16384
   13eb0:	10000226 	beq	r2,zero,13ebc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13eb4:	00bffd44 	movi	r2,-11
   13eb8:	00000b06 	br	13ee8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13ebc:	e0bffe17 	ldw	r2,-8(fp)
   13ec0:	10c00d17 	ldw	r3,52(r2)
   13ec4:	e0bffe17 	ldw	r2,-8(fp)
   13ec8:	10800c17 	ldw	r2,48(r2)
   13ecc:	18800526 	beq	r3,r2,13ee4 <altera_avalon_jtag_uart_close+0x54>
   13ed0:	e0bffe17 	ldw	r2,-8(fp)
   13ed4:	10c00917 	ldw	r3,36(r2)
   13ed8:	e0bffe17 	ldw	r2,-8(fp)
   13edc:	10800117 	ldw	r2,4(r2)
   13ee0:	18bff136 	bltu	r3,r2,13ea8 <_gp+0xffff4d60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13ee4:	0005883a 	mov	r2,zero
}
   13ee8:	e037883a 	mov	sp,fp
   13eec:	df000017 	ldw	fp,0(sp)
   13ef0:	dec00104 	addi	sp,sp,4
   13ef4:	f800283a 	ret

00013ef8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13ef8:	defffa04 	addi	sp,sp,-24
   13efc:	df000515 	stw	fp,20(sp)
   13f00:	df000504 	addi	fp,sp,20
   13f04:	e13ffd15 	stw	r4,-12(fp)
   13f08:	e17ffe15 	stw	r5,-8(fp)
   13f0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13f10:	00bff9c4 	movi	r2,-25
   13f14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13f18:	e0bffe17 	ldw	r2,-8(fp)
   13f1c:	10da8060 	cmpeqi	r3,r2,27137
   13f20:	1800031e 	bne	r3,zero,13f30 <altera_avalon_jtag_uart_ioctl+0x38>
   13f24:	109a80a0 	cmpeqi	r2,r2,27138
   13f28:	1000191e 	bne	r2,zero,13f90 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   13f2c:	00002806 	br	13fd0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13f30:	e0bffd17 	ldw	r2,-12(fp)
   13f34:	10c00117 	ldw	r3,4(r2)
   13f38:	00a00034 	movhi	r2,32768
   13f3c:	10bfffc4 	addi	r2,r2,-1
   13f40:	18801226 	beq	r3,r2,13f8c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   13f44:	e0bfff17 	ldw	r2,-4(fp)
   13f48:	10800017 	ldw	r2,0(r2)
   13f4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13f50:	e0bffc17 	ldw	r2,-16(fp)
   13f54:	10800090 	cmplti	r2,r2,2
   13f58:	1000061e 	bne	r2,zero,13f74 <altera_avalon_jtag_uart_ioctl+0x7c>
   13f5c:	e0fffc17 	ldw	r3,-16(fp)
   13f60:	00a00034 	movhi	r2,32768
   13f64:	10bfffc4 	addi	r2,r2,-1
   13f68:	18800226 	beq	r3,r2,13f74 <altera_avalon_jtag_uart_ioctl+0x7c>
   13f6c:	e0bffc17 	ldw	r2,-16(fp)
   13f70:	00000206 	br	13f7c <altera_avalon_jtag_uart_ioctl+0x84>
   13f74:	00a00034 	movhi	r2,32768
   13f78:	10bfff84 	addi	r2,r2,-2
   13f7c:	e0fffd17 	ldw	r3,-12(fp)
   13f80:	18800115 	stw	r2,4(r3)
      rc = 0;
   13f84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13f88:	00001106 	br	13fd0 <altera_avalon_jtag_uart_ioctl+0xd8>
   13f8c:	00001006 	br	13fd0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13f90:	e0bffd17 	ldw	r2,-12(fp)
   13f94:	10c00117 	ldw	r3,4(r2)
   13f98:	00a00034 	movhi	r2,32768
   13f9c:	10bfffc4 	addi	r2,r2,-1
   13fa0:	18800a26 	beq	r3,r2,13fcc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13fa4:	e0bffd17 	ldw	r2,-12(fp)
   13fa8:	10c00917 	ldw	r3,36(r2)
   13fac:	e0bffd17 	ldw	r2,-12(fp)
   13fb0:	10800117 	ldw	r2,4(r2)
   13fb4:	1885803a 	cmpltu	r2,r3,r2
   13fb8:	10c03fcc 	andi	r3,r2,255
   13fbc:	e0bfff17 	ldw	r2,-4(fp)
   13fc0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13fc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13fc8:	00000006 	br	13fcc <altera_avalon_jtag_uart_ioctl+0xd4>
   13fcc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13fd0:	e0bffb17 	ldw	r2,-20(fp)
}
   13fd4:	e037883a 	mov	sp,fp
   13fd8:	df000017 	ldw	fp,0(sp)
   13fdc:	dec00104 	addi	sp,sp,4
   13fe0:	f800283a 	ret

00013fe4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13fe4:	defff304 	addi	sp,sp,-52
   13fe8:	dfc00c15 	stw	ra,48(sp)
   13fec:	df000b15 	stw	fp,44(sp)
   13ff0:	df000b04 	addi	fp,sp,44
   13ff4:	e13ffc15 	stw	r4,-16(fp)
   13ff8:	e17ffd15 	stw	r5,-12(fp)
   13ffc:	e1bffe15 	stw	r6,-8(fp)
   14000:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14004:	e0bffd17 	ldw	r2,-12(fp)
   14008:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1400c:	00004906 	br	14134 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14010:	e0bffc17 	ldw	r2,-16(fp)
   14014:	10800a17 	ldw	r2,40(r2)
   14018:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1401c:	e0bffc17 	ldw	r2,-16(fp)
   14020:	10800b17 	ldw	r2,44(r2)
   14024:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14028:	e0fff717 	ldw	r3,-36(fp)
   1402c:	e0bff817 	ldw	r2,-32(fp)
   14030:	18800536 	bltu	r3,r2,14048 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14034:	e0fff717 	ldw	r3,-36(fp)
   14038:	e0bff817 	ldw	r2,-32(fp)
   1403c:	1885c83a 	sub	r2,r3,r2
   14040:	e0bff615 	stw	r2,-40(fp)
   14044:	00000406 	br	14058 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14048:	00c20004 	movi	r3,2048
   1404c:	e0bff817 	ldw	r2,-32(fp)
   14050:	1885c83a 	sub	r2,r3,r2
   14054:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14058:	e0bff617 	ldw	r2,-40(fp)
   1405c:	1000011e 	bne	r2,zero,14064 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   14060:	00001d06 	br	140d8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   14064:	e0fffe17 	ldw	r3,-8(fp)
   14068:	e0bff617 	ldw	r2,-40(fp)
   1406c:	1880022e 	bgeu	r3,r2,14078 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   14070:	e0bffe17 	ldw	r2,-8(fp)
   14074:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14078:	e0bff817 	ldw	r2,-32(fp)
   1407c:	10800e04 	addi	r2,r2,56
   14080:	e0fffc17 	ldw	r3,-16(fp)
   14084:	1885883a 	add	r2,r3,r2
   14088:	e13ff517 	ldw	r4,-44(fp)
   1408c:	100b883a 	mov	r5,r2
   14090:	e1bff617 	ldw	r6,-40(fp)
   14094:	00111980 	call	11198 <memcpy>
      ptr   += n;
   14098:	e0fff517 	ldw	r3,-44(fp)
   1409c:	e0bff617 	ldw	r2,-40(fp)
   140a0:	1885883a 	add	r2,r3,r2
   140a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   140a8:	e0fffe17 	ldw	r3,-8(fp)
   140ac:	e0bff617 	ldw	r2,-40(fp)
   140b0:	1885c83a 	sub	r2,r3,r2
   140b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140b8:	e0fff817 	ldw	r3,-32(fp)
   140bc:	e0bff617 	ldw	r2,-40(fp)
   140c0:	1885883a 	add	r2,r3,r2
   140c4:	10c1ffcc 	andi	r3,r2,2047
   140c8:	e0bffc17 	ldw	r2,-16(fp)
   140cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   140d0:	e0bffe17 	ldw	r2,-8(fp)
   140d4:	00bfce16 	blt	zero,r2,14010 <_gp+0xffff4ec8>

    /* If we read any data then return it */
    if (ptr != buffer)
   140d8:	e0fff517 	ldw	r3,-44(fp)
   140dc:	e0bffd17 	ldw	r2,-12(fp)
   140e0:	18800126 	beq	r3,r2,140e8 <altera_avalon_jtag_uart_read+0x104>
      break;
   140e4:	00001506 	br	1413c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   140e8:	e0bfff17 	ldw	r2,-4(fp)
   140ec:	1090000c 	andi	r2,r2,16384
   140f0:	10000126 	beq	r2,zero,140f8 <altera_avalon_jtag_uart_read+0x114>
      break;
   140f4:	00001106 	br	1413c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   140f8:	0001883a 	nop
   140fc:	e0bffc17 	ldw	r2,-16(fp)
   14100:	10c00a17 	ldw	r3,40(r2)
   14104:	e0bff717 	ldw	r2,-36(fp)
   14108:	1880051e 	bne	r3,r2,14120 <altera_avalon_jtag_uart_read+0x13c>
   1410c:	e0bffc17 	ldw	r2,-16(fp)
   14110:	10c00917 	ldw	r3,36(r2)
   14114:	e0bffc17 	ldw	r2,-16(fp)
   14118:	10800117 	ldw	r2,4(r2)
   1411c:	18bff736 	bltu	r3,r2,140fc <_gp+0xffff4fb4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14120:	e0bffc17 	ldw	r2,-16(fp)
   14124:	10c00a17 	ldw	r3,40(r2)
   14128:	e0bff717 	ldw	r2,-36(fp)
   1412c:	1880011e 	bne	r3,r2,14134 <altera_avalon_jtag_uart_read+0x150>
      break;
   14130:	00000206 	br	1413c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14134:	e0bffe17 	ldw	r2,-8(fp)
   14138:	00bfb516 	blt	zero,r2,14010 <_gp+0xffff4ec8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1413c:	e0fff517 	ldw	r3,-44(fp)
   14140:	e0bffd17 	ldw	r2,-12(fp)
   14144:	18801826 	beq	r3,r2,141a8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14148:	0005303a 	rdctl	r2,status
   1414c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14150:	e0fffa17 	ldw	r3,-24(fp)
   14154:	00bfff84 	movi	r2,-2
   14158:	1884703a 	and	r2,r3,r2
   1415c:	1001703a 	wrctl	status,r2
  
  return context;
   14160:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14164:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14168:	e0bffc17 	ldw	r2,-16(fp)
   1416c:	10800817 	ldw	r2,32(r2)
   14170:	10c00054 	ori	r3,r2,1
   14174:	e0bffc17 	ldw	r2,-16(fp)
   14178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1417c:	e0bffc17 	ldw	r2,-16(fp)
   14180:	10800017 	ldw	r2,0(r2)
   14184:	10800104 	addi	r2,r2,4
   14188:	1007883a 	mov	r3,r2
   1418c:	e0bffc17 	ldw	r2,-16(fp)
   14190:	10800817 	ldw	r2,32(r2)
   14194:	18800035 	stwio	r2,0(r3)
   14198:	e0bff917 	ldw	r2,-28(fp)
   1419c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141a0:	e0bffb17 	ldw	r2,-20(fp)
   141a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   141a8:	e0fff517 	ldw	r3,-44(fp)
   141ac:	e0bffd17 	ldw	r2,-12(fp)
   141b0:	18800426 	beq	r3,r2,141c4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   141b4:	e0fff517 	ldw	r3,-44(fp)
   141b8:	e0bffd17 	ldw	r2,-12(fp)
   141bc:	1885c83a 	sub	r2,r3,r2
   141c0:	00000606 	br	141dc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   141c4:	e0bfff17 	ldw	r2,-4(fp)
   141c8:	1090000c 	andi	r2,r2,16384
   141cc:	10000226 	beq	r2,zero,141d8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   141d0:	00bffd44 	movi	r2,-11
   141d4:	00000106 	br	141dc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   141d8:	00bffec4 	movi	r2,-5
}
   141dc:	e037883a 	mov	sp,fp
   141e0:	dfc00117 	ldw	ra,4(sp)
   141e4:	df000017 	ldw	fp,0(sp)
   141e8:	dec00204 	addi	sp,sp,8
   141ec:	f800283a 	ret

000141f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   141f0:	defff304 	addi	sp,sp,-52
   141f4:	dfc00c15 	stw	ra,48(sp)
   141f8:	df000b15 	stw	fp,44(sp)
   141fc:	df000b04 	addi	fp,sp,44
   14200:	e13ffc15 	stw	r4,-16(fp)
   14204:	e17ffd15 	stw	r5,-12(fp)
   14208:	e1bffe15 	stw	r6,-8(fp)
   1420c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14210:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14214:	e0bffd17 	ldw	r2,-12(fp)
   14218:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1421c:	00003806 	br	14300 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14220:	e0bffc17 	ldw	r2,-16(fp)
   14224:	10800c17 	ldw	r2,48(r2)
   14228:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1422c:	e0bffc17 	ldw	r2,-16(fp)
   14230:	10800d17 	ldw	r2,52(r2)
   14234:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14238:	e0fff817 	ldw	r3,-32(fp)
   1423c:	e0bff517 	ldw	r2,-44(fp)
   14240:	1880062e 	bgeu	r3,r2,1425c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14244:	e0fff517 	ldw	r3,-44(fp)
   14248:	e0bff817 	ldw	r2,-32(fp)
   1424c:	1885c83a 	sub	r2,r3,r2
   14250:	10bfffc4 	addi	r2,r2,-1
   14254:	e0bff615 	stw	r2,-40(fp)
   14258:	00000b06 	br	14288 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1425c:	e0bff517 	ldw	r2,-44(fp)
   14260:	10000526 	beq	r2,zero,14278 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14264:	00c20004 	movi	r3,2048
   14268:	e0bff817 	ldw	r2,-32(fp)
   1426c:	1885c83a 	sub	r2,r3,r2
   14270:	e0bff615 	stw	r2,-40(fp)
   14274:	00000406 	br	14288 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14278:	00c1ffc4 	movi	r3,2047
   1427c:	e0bff817 	ldw	r2,-32(fp)
   14280:	1885c83a 	sub	r2,r3,r2
   14284:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14288:	e0bff617 	ldw	r2,-40(fp)
   1428c:	1000011e 	bne	r2,zero,14294 <altera_avalon_jtag_uart_write+0xa4>
        break;
   14290:	00001d06 	br	14308 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   14294:	e0fffe17 	ldw	r3,-8(fp)
   14298:	e0bff617 	ldw	r2,-40(fp)
   1429c:	1880022e 	bgeu	r3,r2,142a8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   142a0:	e0bffe17 	ldw	r2,-8(fp)
   142a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   142a8:	e0bff817 	ldw	r2,-32(fp)
   142ac:	10820e04 	addi	r2,r2,2104
   142b0:	e0fffc17 	ldw	r3,-16(fp)
   142b4:	1885883a 	add	r2,r3,r2
   142b8:	1009883a 	mov	r4,r2
   142bc:	e17ffd17 	ldw	r5,-12(fp)
   142c0:	e1bff617 	ldw	r6,-40(fp)
   142c4:	00111980 	call	11198 <memcpy>
      ptr   += n;
   142c8:	e0fffd17 	ldw	r3,-12(fp)
   142cc:	e0bff617 	ldw	r2,-40(fp)
   142d0:	1885883a 	add	r2,r3,r2
   142d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   142d8:	e0fffe17 	ldw	r3,-8(fp)
   142dc:	e0bff617 	ldw	r2,-40(fp)
   142e0:	1885c83a 	sub	r2,r3,r2
   142e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   142e8:	e0fff817 	ldw	r3,-32(fp)
   142ec:	e0bff617 	ldw	r2,-40(fp)
   142f0:	1885883a 	add	r2,r3,r2
   142f4:	10c1ffcc 	andi	r3,r2,2047
   142f8:	e0bffc17 	ldw	r2,-16(fp)
   142fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14300:	e0bffe17 	ldw	r2,-8(fp)
   14304:	00bfc616 	blt	zero,r2,14220 <_gp+0xffff50d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14308:	0005303a 	rdctl	r2,status
   1430c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14310:	e0fffa17 	ldw	r3,-24(fp)
   14314:	00bfff84 	movi	r2,-2
   14318:	1884703a 	and	r2,r3,r2
   1431c:	1001703a 	wrctl	status,r2
  
  return context;
   14320:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14324:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14328:	e0bffc17 	ldw	r2,-16(fp)
   1432c:	10800817 	ldw	r2,32(r2)
   14330:	10c00094 	ori	r3,r2,2
   14334:	e0bffc17 	ldw	r2,-16(fp)
   14338:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1433c:	e0bffc17 	ldw	r2,-16(fp)
   14340:	10800017 	ldw	r2,0(r2)
   14344:	10800104 	addi	r2,r2,4
   14348:	1007883a 	mov	r3,r2
   1434c:	e0bffc17 	ldw	r2,-16(fp)
   14350:	10800817 	ldw	r2,32(r2)
   14354:	18800035 	stwio	r2,0(r3)
   14358:	e0bff917 	ldw	r2,-28(fp)
   1435c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14360:	e0bffb17 	ldw	r2,-20(fp)
   14364:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14368:	e0bffe17 	ldw	r2,-8(fp)
   1436c:	0080120e 	bge	zero,r2,143b8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   14370:	e0bfff17 	ldw	r2,-4(fp)
   14374:	1090000c 	andi	r2,r2,16384
   14378:	10000126 	beq	r2,zero,14380 <altera_avalon_jtag_uart_write+0x190>
        break;
   1437c:	00001006 	br	143c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14380:	0001883a 	nop
   14384:	e0bffc17 	ldw	r2,-16(fp)
   14388:	10c00d17 	ldw	r3,52(r2)
   1438c:	e0bff517 	ldw	r2,-44(fp)
   14390:	1880051e 	bne	r3,r2,143a8 <altera_avalon_jtag_uart_write+0x1b8>
   14394:	e0bffc17 	ldw	r2,-16(fp)
   14398:	10c00917 	ldw	r3,36(r2)
   1439c:	e0bffc17 	ldw	r2,-16(fp)
   143a0:	10800117 	ldw	r2,4(r2)
   143a4:	18bff736 	bltu	r3,r2,14384 <_gp+0xffff523c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	10800917 	ldw	r2,36(r2)
   143b0:	10000126 	beq	r2,zero,143b8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   143b4:	00000206 	br	143c0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   143b8:	e0bffe17 	ldw	r2,-8(fp)
   143bc:	00bf9716 	blt	zero,r2,1421c <_gp+0xffff50d4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   143c0:	e0fffd17 	ldw	r3,-12(fp)
   143c4:	e0bff717 	ldw	r2,-36(fp)
   143c8:	18800426 	beq	r3,r2,143dc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   143cc:	e0fffd17 	ldw	r3,-12(fp)
   143d0:	e0bff717 	ldw	r2,-36(fp)
   143d4:	1885c83a 	sub	r2,r3,r2
   143d8:	00000606 	br	143f4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   143dc:	e0bfff17 	ldw	r2,-4(fp)
   143e0:	1090000c 	andi	r2,r2,16384
   143e4:	10000226 	beq	r2,zero,143f0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   143e8:	00bffd44 	movi	r2,-11
   143ec:	00000106 	br	143f4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   143f0:	00bffec4 	movi	r2,-5
}
   143f4:	e037883a 	mov	sp,fp
   143f8:	dfc00117 	ldw	ra,4(sp)
   143fc:	df000017 	ldw	fp,0(sp)
   14400:	dec00204 	addi	sp,sp,8
   14404:	f800283a 	ret

00014408 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14408:	defff504 	addi	sp,sp,-44
   1440c:	df000a15 	stw	fp,40(sp)
   14410:	df000a04 	addi	fp,sp,40
   14414:	e13ffc15 	stw	r4,-16(fp)
   14418:	e17ffd15 	stw	r5,-12(fp)
   1441c:	e1bffe15 	stw	r6,-8(fp)
   14420:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14424:	e03ff615 	stw	zero,-40(fp)
   14428:	008000b4 	movhi	r2,2
   1442c:	10a30304 	addi	r2,r2,-29684
   14430:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14434:	10003f26 	beq	r2,zero,14534 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14438:	e0bffc17 	ldw	r2,-16(fp)
   1443c:	10003b26 	beq	r2,zero,1452c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   14440:	e0bffc17 	ldw	r2,-16(fp)
   14444:	e0fffe17 	ldw	r3,-8(fp)
   14448:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1444c:	e0bffc17 	ldw	r2,-16(fp)
   14450:	e0ffff17 	ldw	r3,-4(fp)
   14454:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14458:	0005303a 	rdctl	r2,status
   1445c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14460:	e0fff817 	ldw	r3,-32(fp)
   14464:	00bfff84 	movi	r2,-2
   14468:	1884703a 	and	r2,r3,r2
   1446c:	1001703a 	wrctl	status,r2
  
  return context;
   14470:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14474:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14478:	008000b4 	movhi	r2,2
   1447c:	10a30404 	addi	r2,r2,-29680
   14480:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14484:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14488:	e0fffd17 	ldw	r3,-12(fp)
   1448c:	e0bff617 	ldw	r2,-40(fp)
   14490:	1885883a 	add	r2,r3,r2
   14494:	10c00044 	addi	r3,r2,1
   14498:	e0bffc17 	ldw	r2,-16(fp)
   1449c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   144a0:	e0bffc17 	ldw	r2,-16(fp)
   144a4:	10c00217 	ldw	r3,8(r2)
   144a8:	e0bff617 	ldw	r2,-40(fp)
   144ac:	1880042e 	bgeu	r3,r2,144c0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   144b0:	e0bffc17 	ldw	r2,-16(fp)
   144b4:	00c00044 	movi	r3,1
   144b8:	10c00405 	stb	r3,16(r2)
   144bc:	00000206 	br	144c8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   144c0:	e0bffc17 	ldw	r2,-16(fp)
   144c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   144c8:	e0fffc17 	ldw	r3,-16(fp)
   144cc:	00800074 	movhi	r2,1
   144d0:	109c5e04 	addi	r2,r2,29048
   144d4:	e0bff915 	stw	r2,-28(fp)
   144d8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   144dc:	e0bffa17 	ldw	r2,-24(fp)
   144e0:	e0fff917 	ldw	r3,-28(fp)
   144e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   144e8:	e0bff917 	ldw	r2,-28(fp)
   144ec:	10c00017 	ldw	r3,0(r2)
   144f0:	e0bffa17 	ldw	r2,-24(fp)
   144f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   144f8:	e0bff917 	ldw	r2,-28(fp)
   144fc:	10800017 	ldw	r2,0(r2)
   14500:	e0fffa17 	ldw	r3,-24(fp)
   14504:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14508:	e0bff917 	ldw	r2,-28(fp)
   1450c:	e0fffa17 	ldw	r3,-24(fp)
   14510:	10c00015 	stw	r3,0(r2)
   14514:	e0bff717 	ldw	r2,-36(fp)
   14518:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1451c:	e0bffb17 	ldw	r2,-20(fp)
   14520:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14524:	0005883a 	mov	r2,zero
   14528:	00000306 	br	14538 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1452c:	00bffa84 	movi	r2,-22
   14530:	00000106 	br	14538 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   14534:	00bfde84 	movi	r2,-134
  }
}
   14538:	e037883a 	mov	sp,fp
   1453c:	df000017 	ldw	fp,0(sp)
   14540:	dec00104 	addi	sp,sp,4
   14544:	f800283a 	ret

00014548 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14548:	defffe04 	addi	sp,sp,-8
   1454c:	df000115 	stw	fp,4(sp)
   14550:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14554:	e03fff15 	stw	zero,-4(fp)
   14558:	00000506 	br	14570 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1455c:	e0bfff17 	ldw	r2,-4(fp)
   14560:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14564:	e0bfff17 	ldw	r2,-4(fp)
   14568:	10800804 	addi	r2,r2,32
   1456c:	e0bfff15 	stw	r2,-4(fp)
   14570:	e0bfff17 	ldw	r2,-4(fp)
   14574:	10820030 	cmpltui	r2,r2,2048
   14578:	103ff81e 	bne	r2,zero,1455c <_gp+0xffff5414>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1457c:	e037883a 	mov	sp,fp
   14580:	df000017 	ldw	fp,0(sp)
   14584:	dec00104 	addi	sp,sp,4
   14588:	f800283a 	ret

0001458c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1458c:	defffe04 	addi	sp,sp,-8
   14590:	dfc00115 	stw	ra,4(sp)
   14594:	df000015 	stw	fp,0(sp)
   14598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1459c:	00800074 	movhi	r2,1
   145a0:	109c5b04 	addi	r2,r2,29036
   145a4:	10800017 	ldw	r2,0(r2)
   145a8:	10000526 	beq	r2,zero,145c0 <alt_get_errno+0x34>
   145ac:	00800074 	movhi	r2,1
   145b0:	109c5b04 	addi	r2,r2,29036
   145b4:	10800017 	ldw	r2,0(r2)
   145b8:	103ee83a 	callr	r2
   145bc:	00000206 	br	145c8 <alt_get_errno+0x3c>
   145c0:	008000b4 	movhi	r2,2
   145c4:	10a2fe04 	addi	r2,r2,-29704
}
   145c8:	e037883a 	mov	sp,fp
   145cc:	dfc00117 	ldw	ra,4(sp)
   145d0:	df000017 	ldw	fp,0(sp)
   145d4:	dec00204 	addi	sp,sp,8
   145d8:	f800283a 	ret

000145dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   145dc:	defffa04 	addi	sp,sp,-24
   145e0:	dfc00515 	stw	ra,20(sp)
   145e4:	df000415 	stw	fp,16(sp)
   145e8:	df000404 	addi	fp,sp,16
   145ec:	e13ffe15 	stw	r4,-8(fp)
   145f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   145f4:	e0bffe17 	ldw	r2,-8(fp)
   145f8:	10000326 	beq	r2,zero,14608 <alt_dev_llist_insert+0x2c>
   145fc:	e0bffe17 	ldw	r2,-8(fp)
   14600:	10800217 	ldw	r2,8(r2)
   14604:	1000061e 	bne	r2,zero,14620 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14608:	001458c0 	call	1458c <alt_get_errno>
   1460c:	1007883a 	mov	r3,r2
   14610:	00800584 	movi	r2,22
   14614:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14618:	00bffa84 	movi	r2,-22
   1461c:	00001306 	br	1466c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14620:	e0bffe17 	ldw	r2,-8(fp)
   14624:	e0ffff17 	ldw	r3,-4(fp)
   14628:	e0fffc15 	stw	r3,-16(fp)
   1462c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14630:	e0bffd17 	ldw	r2,-12(fp)
   14634:	e0fffc17 	ldw	r3,-16(fp)
   14638:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1463c:	e0bffc17 	ldw	r2,-16(fp)
   14640:	10c00017 	ldw	r3,0(r2)
   14644:	e0bffd17 	ldw	r2,-12(fp)
   14648:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1464c:	e0bffc17 	ldw	r2,-16(fp)
   14650:	10800017 	ldw	r2,0(r2)
   14654:	e0fffd17 	ldw	r3,-12(fp)
   14658:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1465c:	e0bffc17 	ldw	r2,-16(fp)
   14660:	e0fffd17 	ldw	r3,-12(fp)
   14664:	10c00015 	stw	r3,0(r2)

  return 0;  
   14668:	0005883a 	mov	r2,zero
}
   1466c:	e037883a 	mov	sp,fp
   14670:	dfc00117 	ldw	ra,4(sp)
   14674:	df000017 	ldw	fp,0(sp)
   14678:	dec00204 	addi	sp,sp,8
   1467c:	f800283a 	ret

00014680 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14680:	defffd04 	addi	sp,sp,-12
   14684:	dfc00215 	stw	ra,8(sp)
   14688:	df000115 	stw	fp,4(sp)
   1468c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14690:	00800074 	movhi	r2,1
   14694:	1095b004 	addi	r2,r2,22208
   14698:	e0bfff15 	stw	r2,-4(fp)
   1469c:	00000606 	br	146b8 <_do_ctors+0x38>
        (*ctor) (); 
   146a0:	e0bfff17 	ldw	r2,-4(fp)
   146a4:	10800017 	ldw	r2,0(r2)
   146a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   146ac:	e0bfff17 	ldw	r2,-4(fp)
   146b0:	10bfff04 	addi	r2,r2,-4
   146b4:	e0bfff15 	stw	r2,-4(fp)
   146b8:	e0ffff17 	ldw	r3,-4(fp)
   146bc:	00800074 	movhi	r2,1
   146c0:	1095b104 	addi	r2,r2,22212
   146c4:	18bff62e 	bgeu	r3,r2,146a0 <_gp+0xffff5558>
        (*ctor) (); 
}
   146c8:	e037883a 	mov	sp,fp
   146cc:	dfc00117 	ldw	ra,4(sp)
   146d0:	df000017 	ldw	fp,0(sp)
   146d4:	dec00204 	addi	sp,sp,8
   146d8:	f800283a 	ret

000146dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   146dc:	defffd04 	addi	sp,sp,-12
   146e0:	dfc00215 	stw	ra,8(sp)
   146e4:	df000115 	stw	fp,4(sp)
   146e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   146ec:	00800074 	movhi	r2,1
   146f0:	1095b004 	addi	r2,r2,22208
   146f4:	e0bfff15 	stw	r2,-4(fp)
   146f8:	00000606 	br	14714 <_do_dtors+0x38>
        (*dtor) (); 
   146fc:	e0bfff17 	ldw	r2,-4(fp)
   14700:	10800017 	ldw	r2,0(r2)
   14704:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14708:	e0bfff17 	ldw	r2,-4(fp)
   1470c:	10bfff04 	addi	r2,r2,-4
   14710:	e0bfff15 	stw	r2,-4(fp)
   14714:	e0ffff17 	ldw	r3,-4(fp)
   14718:	00800074 	movhi	r2,1
   1471c:	1095b104 	addi	r2,r2,22212
   14720:	18bff62e 	bgeu	r3,r2,146fc <_gp+0xffff55b4>
        (*dtor) (); 
}
   14724:	e037883a 	mov	sp,fp
   14728:	dfc00117 	ldw	ra,4(sp)
   1472c:	df000017 	ldw	fp,0(sp)
   14730:	dec00204 	addi	sp,sp,8
   14734:	f800283a 	ret

00014738 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14738:	defffe04 	addi	sp,sp,-8
   1473c:	dfc00115 	stw	ra,4(sp)
   14740:	df000015 	stw	fp,0(sp)
   14744:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14748:	0009883a 	mov	r4,zero
   1474c:	01440004 	movi	r5,4096
   14750:	00151f80 	call	151f8 <alt_icache_flush>
#endif
}
   14754:	e037883a 	mov	sp,fp
   14758:	dfc00117 	ldw	ra,4(sp)
   1475c:	df000017 	ldw	fp,0(sp)
   14760:	dec00204 	addi	sp,sp,8
   14764:	f800283a 	ret

00014768 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14768:	defff904 	addi	sp,sp,-28
   1476c:	dfc00615 	stw	ra,24(sp)
   14770:	df000515 	stw	fp,20(sp)
   14774:	df000504 	addi	fp,sp,20
   14778:	e13ffc15 	stw	r4,-16(fp)
   1477c:	e17ffd15 	stw	r5,-12(fp)
   14780:	e1bffe15 	stw	r6,-8(fp)
   14784:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14788:	e0800217 	ldw	r2,8(fp)
   1478c:	d8800015 	stw	r2,0(sp)
   14790:	e13ffc17 	ldw	r4,-16(fp)
   14794:	e17ffd17 	ldw	r5,-12(fp)
   14798:	e1bffe17 	ldw	r6,-8(fp)
   1479c:	e1ffff17 	ldw	r7,-4(fp)
   147a0:	00149480 	call	14948 <alt_iic_isr_register>
}  
   147a4:	e037883a 	mov	sp,fp
   147a8:	dfc00117 	ldw	ra,4(sp)
   147ac:	df000017 	ldw	fp,0(sp)
   147b0:	dec00204 	addi	sp,sp,8
   147b4:	f800283a 	ret

000147b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   147b8:	defff904 	addi	sp,sp,-28
   147bc:	df000615 	stw	fp,24(sp)
   147c0:	df000604 	addi	fp,sp,24
   147c4:	e13ffe15 	stw	r4,-8(fp)
   147c8:	e17fff15 	stw	r5,-4(fp)
   147cc:	e0bfff17 	ldw	r2,-4(fp)
   147d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147d4:	0005303a 	rdctl	r2,status
   147d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147dc:	e0fffb17 	ldw	r3,-20(fp)
   147e0:	00bfff84 	movi	r2,-2
   147e4:	1884703a 	and	r2,r3,r2
   147e8:	1001703a 	wrctl	status,r2
  
  return context;
   147ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   147f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   147f4:	e0bffa17 	ldw	r2,-24(fp)
   147f8:	00c00044 	movi	r3,1
   147fc:	1884983a 	sll	r2,r3,r2
   14800:	1007883a 	mov	r3,r2
   14804:	008000b4 	movhi	r2,2
   14808:	10a30204 	addi	r2,r2,-29688
   1480c:	10800017 	ldw	r2,0(r2)
   14810:	1886b03a 	or	r3,r3,r2
   14814:	008000b4 	movhi	r2,2
   14818:	10a30204 	addi	r2,r2,-29688
   1481c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14820:	008000b4 	movhi	r2,2
   14824:	10a30204 	addi	r2,r2,-29688
   14828:	10800017 	ldw	r2,0(r2)
   1482c:	100170fa 	wrctl	ienable,r2
   14830:	e0bffc17 	ldw	r2,-16(fp)
   14834:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14838:	e0bffd17 	ldw	r2,-12(fp)
   1483c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14840:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14844:	0001883a 	nop
}
   14848:	e037883a 	mov	sp,fp
   1484c:	df000017 	ldw	fp,0(sp)
   14850:	dec00104 	addi	sp,sp,4
   14854:	f800283a 	ret

00014858 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14858:	defff904 	addi	sp,sp,-28
   1485c:	df000615 	stw	fp,24(sp)
   14860:	df000604 	addi	fp,sp,24
   14864:	e13ffe15 	stw	r4,-8(fp)
   14868:	e17fff15 	stw	r5,-4(fp)
   1486c:	e0bfff17 	ldw	r2,-4(fp)
   14870:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14874:	0005303a 	rdctl	r2,status
   14878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1487c:	e0fffb17 	ldw	r3,-20(fp)
   14880:	00bfff84 	movi	r2,-2
   14884:	1884703a 	and	r2,r3,r2
   14888:	1001703a 	wrctl	status,r2
  
  return context;
   1488c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14890:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14894:	e0bffa17 	ldw	r2,-24(fp)
   14898:	00c00044 	movi	r3,1
   1489c:	1884983a 	sll	r2,r3,r2
   148a0:	0084303a 	nor	r2,zero,r2
   148a4:	1007883a 	mov	r3,r2
   148a8:	008000b4 	movhi	r2,2
   148ac:	10a30204 	addi	r2,r2,-29688
   148b0:	10800017 	ldw	r2,0(r2)
   148b4:	1886703a 	and	r3,r3,r2
   148b8:	008000b4 	movhi	r2,2
   148bc:	10a30204 	addi	r2,r2,-29688
   148c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   148c4:	008000b4 	movhi	r2,2
   148c8:	10a30204 	addi	r2,r2,-29688
   148cc:	10800017 	ldw	r2,0(r2)
   148d0:	100170fa 	wrctl	ienable,r2
   148d4:	e0bffc17 	ldw	r2,-16(fp)
   148d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148dc:	e0bffd17 	ldw	r2,-12(fp)
   148e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   148e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   148e8:	0001883a 	nop
}
   148ec:	e037883a 	mov	sp,fp
   148f0:	df000017 	ldw	fp,0(sp)
   148f4:	dec00104 	addi	sp,sp,4
   148f8:	f800283a 	ret

000148fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   148fc:	defffc04 	addi	sp,sp,-16
   14900:	df000315 	stw	fp,12(sp)
   14904:	df000304 	addi	fp,sp,12
   14908:	e13ffe15 	stw	r4,-8(fp)
   1490c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14910:	000530fa 	rdctl	r2,ienable
   14914:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14918:	e0bfff17 	ldw	r2,-4(fp)
   1491c:	00c00044 	movi	r3,1
   14920:	1884983a 	sll	r2,r3,r2
   14924:	1007883a 	mov	r3,r2
   14928:	e0bffd17 	ldw	r2,-12(fp)
   1492c:	1884703a 	and	r2,r3,r2
   14930:	1004c03a 	cmpne	r2,r2,zero
   14934:	10803fcc 	andi	r2,r2,255
}
   14938:	e037883a 	mov	sp,fp
   1493c:	df000017 	ldw	fp,0(sp)
   14940:	dec00104 	addi	sp,sp,4
   14944:	f800283a 	ret

00014948 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14948:	defff504 	addi	sp,sp,-44
   1494c:	dfc00a15 	stw	ra,40(sp)
   14950:	df000915 	stw	fp,36(sp)
   14954:	df000904 	addi	fp,sp,36
   14958:	e13ffc15 	stw	r4,-16(fp)
   1495c:	e17ffd15 	stw	r5,-12(fp)
   14960:	e1bffe15 	stw	r6,-8(fp)
   14964:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14968:	00bffa84 	movi	r2,-22
   1496c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14970:	e0bffd17 	ldw	r2,-12(fp)
   14974:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14978:	e0bff817 	ldw	r2,-32(fp)
   1497c:	10800808 	cmpgei	r2,r2,32
   14980:	1000271e 	bne	r2,zero,14a20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14984:	0005303a 	rdctl	r2,status
   14988:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1498c:	e0fffa17 	ldw	r3,-24(fp)
   14990:	00bfff84 	movi	r2,-2
   14994:	1884703a 	and	r2,r3,r2
   14998:	1001703a 	wrctl	status,r2
  
  return context;
   1499c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   149a0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   149a4:	008000b4 	movhi	r2,2
   149a8:	10a31004 	addi	r2,r2,-29632
   149ac:	e0fff817 	ldw	r3,-32(fp)
   149b0:	180690fa 	slli	r3,r3,3
   149b4:	10c5883a 	add	r2,r2,r3
   149b8:	e0fffe17 	ldw	r3,-8(fp)
   149bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   149c0:	008000b4 	movhi	r2,2
   149c4:	10a31004 	addi	r2,r2,-29632
   149c8:	e0fff817 	ldw	r3,-32(fp)
   149cc:	180690fa 	slli	r3,r3,3
   149d0:	18c00104 	addi	r3,r3,4
   149d4:	10c5883a 	add	r2,r2,r3
   149d8:	e0ffff17 	ldw	r3,-4(fp)
   149dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   149e0:	e0bffe17 	ldw	r2,-8(fp)
   149e4:	10000526 	beq	r2,zero,149fc <alt_iic_isr_register+0xb4>
   149e8:	e0bff817 	ldw	r2,-32(fp)
   149ec:	e13ffc17 	ldw	r4,-16(fp)
   149f0:	100b883a 	mov	r5,r2
   149f4:	00147b80 	call	147b8 <alt_ic_irq_enable>
   149f8:	00000406 	br	14a0c <alt_iic_isr_register+0xc4>
   149fc:	e0bff817 	ldw	r2,-32(fp)
   14a00:	e13ffc17 	ldw	r4,-16(fp)
   14a04:	100b883a 	mov	r5,r2
   14a08:	00148580 	call	14858 <alt_ic_irq_disable>
   14a0c:	e0bff715 	stw	r2,-36(fp)
   14a10:	e0bff917 	ldw	r2,-28(fp)
   14a14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a18:	e0bffb17 	ldw	r2,-20(fp)
   14a1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14a20:	e0bff717 	ldw	r2,-36(fp)
}
   14a24:	e037883a 	mov	sp,fp
   14a28:	dfc00117 	ldw	ra,4(sp)
   14a2c:	df000017 	ldw	fp,0(sp)
   14a30:	dec00204 	addi	sp,sp,8
   14a34:	f800283a 	ret

00014a38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14a38:	defff904 	addi	sp,sp,-28
   14a3c:	dfc00615 	stw	ra,24(sp)
   14a40:	df000515 	stw	fp,20(sp)
   14a44:	df000504 	addi	fp,sp,20
   14a48:	e13ffc15 	stw	r4,-16(fp)
   14a4c:	e17ffd15 	stw	r5,-12(fp)
   14a50:	e1bffe15 	stw	r6,-8(fp)
   14a54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14a58:	e13ffd17 	ldw	r4,-12(fp)
   14a5c:	e17ffe17 	ldw	r5,-8(fp)
   14a60:	e1bfff17 	ldw	r6,-4(fp)
   14a64:	0014c8c0 	call	14c8c <open>
   14a68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14a6c:	e0bffb17 	ldw	r2,-20(fp)
   14a70:	10001c16 	blt	r2,zero,14ae4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   14a74:	00800074 	movhi	r2,1
   14a78:	1097da04 	addi	r2,r2,24424
   14a7c:	e0fffb17 	ldw	r3,-20(fp)
   14a80:	18c00324 	muli	r3,r3,12
   14a84:	10c5883a 	add	r2,r2,r3
   14a88:	10c00017 	ldw	r3,0(r2)
   14a8c:	e0bffc17 	ldw	r2,-16(fp)
   14a90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14a94:	00800074 	movhi	r2,1
   14a98:	1097da04 	addi	r2,r2,24424
   14a9c:	e0fffb17 	ldw	r3,-20(fp)
   14aa0:	18c00324 	muli	r3,r3,12
   14aa4:	18c00104 	addi	r3,r3,4
   14aa8:	10c5883a 	add	r2,r2,r3
   14aac:	10c00017 	ldw	r3,0(r2)
   14ab0:	e0bffc17 	ldw	r2,-16(fp)
   14ab4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14ab8:	00800074 	movhi	r2,1
   14abc:	1097da04 	addi	r2,r2,24424
   14ac0:	e0fffb17 	ldw	r3,-20(fp)
   14ac4:	18c00324 	muli	r3,r3,12
   14ac8:	18c00204 	addi	r3,r3,8
   14acc:	10c5883a 	add	r2,r2,r3
   14ad0:	10c00017 	ldw	r3,0(r2)
   14ad4:	e0bffc17 	ldw	r2,-16(fp)
   14ad8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14adc:	e13ffb17 	ldw	r4,-20(fp)
   14ae0:	00136b40 	call	136b4 <alt_release_fd>
  }
} 
   14ae4:	e037883a 	mov	sp,fp
   14ae8:	dfc00117 	ldw	ra,4(sp)
   14aec:	df000017 	ldw	fp,0(sp)
   14af0:	dec00204 	addi	sp,sp,8
   14af4:	f800283a 	ret

00014af8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14af8:	defffb04 	addi	sp,sp,-20
   14afc:	dfc00415 	stw	ra,16(sp)
   14b00:	df000315 	stw	fp,12(sp)
   14b04:	df000304 	addi	fp,sp,12
   14b08:	e13ffd15 	stw	r4,-12(fp)
   14b0c:	e17ffe15 	stw	r5,-8(fp)
   14b10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14b14:	01000074 	movhi	r4,1
   14b18:	2117dd04 	addi	r4,r4,24436
   14b1c:	e17ffd17 	ldw	r5,-12(fp)
   14b20:	01800044 	movi	r6,1
   14b24:	01c07fc4 	movi	r7,511
   14b28:	0014a380 	call	14a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14b2c:	01000074 	movhi	r4,1
   14b30:	2117da04 	addi	r4,r4,24424
   14b34:	e17ffe17 	ldw	r5,-8(fp)
   14b38:	000d883a 	mov	r6,zero
   14b3c:	01c07fc4 	movi	r7,511
   14b40:	0014a380 	call	14a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14b44:	01000074 	movhi	r4,1
   14b48:	2117e004 	addi	r4,r4,24448
   14b4c:	e17fff17 	ldw	r5,-4(fp)
   14b50:	01800044 	movi	r6,1
   14b54:	01c07fc4 	movi	r7,511
   14b58:	0014a380 	call	14a38 <alt_open_fd>
}  
   14b5c:	e037883a 	mov	sp,fp
   14b60:	dfc00117 	ldw	ra,4(sp)
   14b64:	df000017 	ldw	fp,0(sp)
   14b68:	dec00204 	addi	sp,sp,8
   14b6c:	f800283a 	ret

00014b70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b70:	defffe04 	addi	sp,sp,-8
   14b74:	dfc00115 	stw	ra,4(sp)
   14b78:	df000015 	stw	fp,0(sp)
   14b7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b80:	00800074 	movhi	r2,1
   14b84:	109c5b04 	addi	r2,r2,29036
   14b88:	10800017 	ldw	r2,0(r2)
   14b8c:	10000526 	beq	r2,zero,14ba4 <alt_get_errno+0x34>
   14b90:	00800074 	movhi	r2,1
   14b94:	109c5b04 	addi	r2,r2,29036
   14b98:	10800017 	ldw	r2,0(r2)
   14b9c:	103ee83a 	callr	r2
   14ba0:	00000206 	br	14bac <alt_get_errno+0x3c>
   14ba4:	008000b4 	movhi	r2,2
   14ba8:	10a2fe04 	addi	r2,r2,-29704
}
   14bac:	e037883a 	mov	sp,fp
   14bb0:	dfc00117 	ldw	ra,4(sp)
   14bb4:	df000017 	ldw	fp,0(sp)
   14bb8:	dec00204 	addi	sp,sp,8
   14bbc:	f800283a 	ret

00014bc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14bc0:	defffd04 	addi	sp,sp,-12
   14bc4:	df000215 	stw	fp,8(sp)
   14bc8:	df000204 	addi	fp,sp,8
   14bcc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14bd0:	e0bfff17 	ldw	r2,-4(fp)
   14bd4:	10800217 	ldw	r2,8(r2)
   14bd8:	10d00034 	orhi	r3,r2,16384
   14bdc:	e0bfff17 	ldw	r2,-4(fp)
   14be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14be4:	e03ffe15 	stw	zero,-8(fp)
   14be8:	00001d06 	br	14c60 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14bec:	00800074 	movhi	r2,1
   14bf0:	1097da04 	addi	r2,r2,24424
   14bf4:	e0fffe17 	ldw	r3,-8(fp)
   14bf8:	18c00324 	muli	r3,r3,12
   14bfc:	10c5883a 	add	r2,r2,r3
   14c00:	10c00017 	ldw	r3,0(r2)
   14c04:	e0bfff17 	ldw	r2,-4(fp)
   14c08:	10800017 	ldw	r2,0(r2)
   14c0c:	1880111e 	bne	r3,r2,14c54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14c10:	00800074 	movhi	r2,1
   14c14:	1097da04 	addi	r2,r2,24424
   14c18:	e0fffe17 	ldw	r3,-8(fp)
   14c1c:	18c00324 	muli	r3,r3,12
   14c20:	18c00204 	addi	r3,r3,8
   14c24:	10c5883a 	add	r2,r2,r3
   14c28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14c2c:	1000090e 	bge	r2,zero,14c54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14c30:	e0bffe17 	ldw	r2,-8(fp)
   14c34:	10c00324 	muli	r3,r2,12
   14c38:	00800074 	movhi	r2,1
   14c3c:	1097da04 	addi	r2,r2,24424
   14c40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14c44:	e0bfff17 	ldw	r2,-4(fp)
   14c48:	18800226 	beq	r3,r2,14c54 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14c4c:	00bffcc4 	movi	r2,-13
   14c50:	00000a06 	br	14c7c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	10800044 	addi	r2,r2,1
   14c5c:	e0bffe15 	stw	r2,-8(fp)
   14c60:	00800074 	movhi	r2,1
   14c64:	109c5a04 	addi	r2,r2,29032
   14c68:	10800017 	ldw	r2,0(r2)
   14c6c:	1007883a 	mov	r3,r2
   14c70:	e0bffe17 	ldw	r2,-8(fp)
   14c74:	18bfdd2e 	bgeu	r3,r2,14bec <_gp+0xffff5aa4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14c78:	0005883a 	mov	r2,zero
}
   14c7c:	e037883a 	mov	sp,fp
   14c80:	df000017 	ldw	fp,0(sp)
   14c84:	dec00104 	addi	sp,sp,4
   14c88:	f800283a 	ret

00014c8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14c8c:	defff604 	addi	sp,sp,-40
   14c90:	dfc00915 	stw	ra,36(sp)
   14c94:	df000815 	stw	fp,32(sp)
   14c98:	df000804 	addi	fp,sp,32
   14c9c:	e13ffd15 	stw	r4,-12(fp)
   14ca0:	e17ffe15 	stw	r5,-8(fp)
   14ca4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14ca8:	00bfffc4 	movi	r2,-1
   14cac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14cb0:	00bffb44 	movi	r2,-19
   14cb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14cb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14cbc:	e13ffd17 	ldw	r4,-12(fp)
   14cc0:	01400074 	movhi	r5,1
   14cc4:	295c5804 	addi	r5,r5,29024
   14cc8:	0014fa00 	call	14fa0 <alt_find_dev>
   14ccc:	e0bff815 	stw	r2,-32(fp)
   14cd0:	e0bff817 	ldw	r2,-32(fp)
   14cd4:	1000051e 	bne	r2,zero,14cec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14cd8:	e13ffd17 	ldw	r4,-12(fp)
   14cdc:	00150300 	call	15030 <alt_find_file>
   14ce0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14ce4:	00800044 	movi	r2,1
   14ce8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14cec:	e0bff817 	ldw	r2,-32(fp)
   14cf0:	10002926 	beq	r2,zero,14d98 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14cf4:	e13ff817 	ldw	r4,-32(fp)
   14cf8:	00151440 	call	15144 <alt_get_fd>
   14cfc:	e0bff915 	stw	r2,-28(fp)
   14d00:	e0bff917 	ldw	r2,-28(fp)
   14d04:	1000030e 	bge	r2,zero,14d14 <open+0x88>
    {
      status = index;
   14d08:	e0bff917 	ldw	r2,-28(fp)
   14d0c:	e0bffa15 	stw	r2,-24(fp)
   14d10:	00002306 	br	14da0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   14d14:	e0bff917 	ldw	r2,-28(fp)
   14d18:	10c00324 	muli	r3,r2,12
   14d1c:	00800074 	movhi	r2,1
   14d20:	1097da04 	addi	r2,r2,24424
   14d24:	1885883a 	add	r2,r3,r2
   14d28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14d2c:	e0fffe17 	ldw	r3,-8(fp)
   14d30:	00900034 	movhi	r2,16384
   14d34:	10bfffc4 	addi	r2,r2,-1
   14d38:	1886703a 	and	r3,r3,r2
   14d3c:	e0bffc17 	ldw	r2,-16(fp)
   14d40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14d44:	e0bffb17 	ldw	r2,-20(fp)
   14d48:	1000051e 	bne	r2,zero,14d60 <open+0xd4>
   14d4c:	e13ffc17 	ldw	r4,-16(fp)
   14d50:	0014bc00 	call	14bc0 <alt_file_locked>
   14d54:	e0bffa15 	stw	r2,-24(fp)
   14d58:	e0bffa17 	ldw	r2,-24(fp)
   14d5c:	10001016 	blt	r2,zero,14da0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14d60:	e0bff817 	ldw	r2,-32(fp)
   14d64:	10800317 	ldw	r2,12(r2)
   14d68:	10000826 	beq	r2,zero,14d8c <open+0x100>
   14d6c:	e0bff817 	ldw	r2,-32(fp)
   14d70:	10800317 	ldw	r2,12(r2)
   14d74:	e13ffc17 	ldw	r4,-16(fp)
   14d78:	e17ffd17 	ldw	r5,-12(fp)
   14d7c:	e1bffe17 	ldw	r6,-8(fp)
   14d80:	e1ffff17 	ldw	r7,-4(fp)
   14d84:	103ee83a 	callr	r2
   14d88:	00000106 	br	14d90 <open+0x104>
   14d8c:	0005883a 	mov	r2,zero
   14d90:	e0bffa15 	stw	r2,-24(fp)
   14d94:	00000206 	br	14da0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14d98:	00bffb44 	movi	r2,-19
   14d9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14da0:	e0bffa17 	ldw	r2,-24(fp)
   14da4:	1000090e 	bge	r2,zero,14dcc <open+0x140>
  {
    alt_release_fd (index);  
   14da8:	e13ff917 	ldw	r4,-28(fp)
   14dac:	00136b40 	call	136b4 <alt_release_fd>
    ALT_ERRNO = -status;
   14db0:	0014b700 	call	14b70 <alt_get_errno>
   14db4:	1007883a 	mov	r3,r2
   14db8:	e0bffa17 	ldw	r2,-24(fp)
   14dbc:	0085c83a 	sub	r2,zero,r2
   14dc0:	18800015 	stw	r2,0(r3)
    return -1;
   14dc4:	00bfffc4 	movi	r2,-1
   14dc8:	00000106 	br	14dd0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   14dcc:	e0bff917 	ldw	r2,-28(fp)
}
   14dd0:	e037883a 	mov	sp,fp
   14dd4:	dfc00117 	ldw	ra,4(sp)
   14dd8:	df000017 	ldw	fp,0(sp)
   14ddc:	dec00204 	addi	sp,sp,8
   14de0:	f800283a 	ret

00014de4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14de4:	defffa04 	addi	sp,sp,-24
   14de8:	df000515 	stw	fp,20(sp)
   14dec:	df000504 	addi	fp,sp,20
   14df0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14df4:	0005303a 	rdctl	r2,status
   14df8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dfc:	e0fffc17 	ldw	r3,-16(fp)
   14e00:	00bfff84 	movi	r2,-2
   14e04:	1884703a 	and	r2,r3,r2
   14e08:	1001703a 	wrctl	status,r2
  
  return context;
   14e0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14e10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
   14e20:	10800017 	ldw	r2,0(r2)
   14e24:	e0fffd17 	ldw	r3,-12(fp)
   14e28:	18c00117 	ldw	r3,4(r3)
   14e2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14e30:	e0bffd17 	ldw	r2,-12(fp)
   14e34:	10800117 	ldw	r2,4(r2)
   14e38:	e0fffd17 	ldw	r3,-12(fp)
   14e3c:	18c00017 	ldw	r3,0(r3)
   14e40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14e44:	e0bffd17 	ldw	r2,-12(fp)
   14e48:	e0fffd17 	ldw	r3,-12(fp)
   14e4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14e50:	e0bffd17 	ldw	r2,-12(fp)
   14e54:	e0fffd17 	ldw	r3,-12(fp)
   14e58:	10c00015 	stw	r3,0(r2)
   14e5c:	e0bffb17 	ldw	r2,-20(fp)
   14e60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e64:	e0bffe17 	ldw	r2,-8(fp)
   14e68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14e6c:	e037883a 	mov	sp,fp
   14e70:	df000017 	ldw	fp,0(sp)
   14e74:	dec00104 	addi	sp,sp,4
   14e78:	f800283a 	ret

00014e7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14e7c:	defffb04 	addi	sp,sp,-20
   14e80:	dfc00415 	stw	ra,16(sp)
   14e84:	df000315 	stw	fp,12(sp)
   14e88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14e8c:	d0a00c17 	ldw	r2,-32720(gp)
   14e90:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14e94:	d0a6b217 	ldw	r2,-25912(gp)
   14e98:	10800044 	addi	r2,r2,1
   14e9c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14ea0:	00002e06 	br	14f5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14ea4:	e0bffd17 	ldw	r2,-12(fp)
   14ea8:	10800017 	ldw	r2,0(r2)
   14eac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14eb0:	e0bffd17 	ldw	r2,-12(fp)
   14eb4:	10800403 	ldbu	r2,16(r2)
   14eb8:	10803fcc 	andi	r2,r2,255
   14ebc:	10000426 	beq	r2,zero,14ed0 <alt_tick+0x54>
   14ec0:	d0a6b217 	ldw	r2,-25912(gp)
   14ec4:	1000021e 	bne	r2,zero,14ed0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14ec8:	e0bffd17 	ldw	r2,-12(fp)
   14ecc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14ed0:	e0bffd17 	ldw	r2,-12(fp)
   14ed4:	10800217 	ldw	r2,8(r2)
   14ed8:	d0e6b217 	ldw	r3,-25912(gp)
   14edc:	18801d36 	bltu	r3,r2,14f54 <alt_tick+0xd8>
   14ee0:	e0bffd17 	ldw	r2,-12(fp)
   14ee4:	10800403 	ldbu	r2,16(r2)
   14ee8:	10803fcc 	andi	r2,r2,255
   14eec:	1000191e 	bne	r2,zero,14f54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	10800317 	ldw	r2,12(r2)
   14ef8:	e0fffd17 	ldw	r3,-12(fp)
   14efc:	18c00517 	ldw	r3,20(r3)
   14f00:	1809883a 	mov	r4,r3
   14f04:	103ee83a 	callr	r2
   14f08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14f0c:	e0bfff17 	ldw	r2,-4(fp)
   14f10:	1000031e 	bne	r2,zero,14f20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14f14:	e13ffd17 	ldw	r4,-12(fp)
   14f18:	0014de40 	call	14de4 <alt_alarm_stop>
   14f1c:	00000d06 	br	14f54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14f20:	e0bffd17 	ldw	r2,-12(fp)
   14f24:	10c00217 	ldw	r3,8(r2)
   14f28:	e0bfff17 	ldw	r2,-4(fp)
   14f2c:	1887883a 	add	r3,r3,r2
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14f38:	e0bffd17 	ldw	r2,-12(fp)
   14f3c:	10c00217 	ldw	r3,8(r2)
   14f40:	d0a6b217 	ldw	r2,-25912(gp)
   14f44:	1880032e 	bgeu	r3,r2,14f54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   14f48:	e0bffd17 	ldw	r2,-12(fp)
   14f4c:	00c00044 	movi	r3,1
   14f50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14f54:	e0bffe17 	ldw	r2,-8(fp)
   14f58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14f5c:	e0fffd17 	ldw	r3,-12(fp)
   14f60:	d0a00c04 	addi	r2,gp,-32720
   14f64:	18bfcf1e 	bne	r3,r2,14ea4 <_gp+0xffff5d5c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14f68:	0001883a 	nop
}
   14f6c:	e037883a 	mov	sp,fp
   14f70:	dfc00117 	ldw	ra,4(sp)
   14f74:	df000017 	ldw	fp,0(sp)
   14f78:	dec00204 	addi	sp,sp,8
   14f7c:	f800283a 	ret

00014f80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14f80:	deffff04 	addi	sp,sp,-4
   14f84:	df000015 	stw	fp,0(sp)
   14f88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14f8c:	000170fa 	wrctl	ienable,zero
}
   14f90:	e037883a 	mov	sp,fp
   14f94:	df000017 	ldw	fp,0(sp)
   14f98:	dec00104 	addi	sp,sp,4
   14f9c:	f800283a 	ret

00014fa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14fa0:	defffa04 	addi	sp,sp,-24
   14fa4:	dfc00515 	stw	ra,20(sp)
   14fa8:	df000415 	stw	fp,16(sp)
   14fac:	df000404 	addi	fp,sp,16
   14fb0:	e13ffe15 	stw	r4,-8(fp)
   14fb4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14fb8:	e0bfff17 	ldw	r2,-4(fp)
   14fbc:	10800017 	ldw	r2,0(r2)
   14fc0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14fc4:	e13ffe17 	ldw	r4,-8(fp)
   14fc8:	00103b00 	call	103b0 <strlen>
   14fcc:	10800044 	addi	r2,r2,1
   14fd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14fd4:	00000d06 	br	1500c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14fd8:	e0bffc17 	ldw	r2,-16(fp)
   14fdc:	10c00217 	ldw	r3,8(r2)
   14fe0:	e0bffd17 	ldw	r2,-12(fp)
   14fe4:	1809883a 	mov	r4,r3
   14fe8:	e17ffe17 	ldw	r5,-8(fp)
   14fec:	100d883a 	mov	r6,r2
   14ff0:	001536c0 	call	1536c <memcmp>
   14ff4:	1000021e 	bne	r2,zero,15000 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14ff8:	e0bffc17 	ldw	r2,-16(fp)
   14ffc:	00000706 	br	1501c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15000:	e0bffc17 	ldw	r2,-16(fp)
   15004:	10800017 	ldw	r2,0(r2)
   15008:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1500c:	e0fffc17 	ldw	r3,-16(fp)
   15010:	e0bfff17 	ldw	r2,-4(fp)
   15014:	18bff01e 	bne	r3,r2,14fd8 <_gp+0xffff5e90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15018:	0005883a 	mov	r2,zero
}
   1501c:	e037883a 	mov	sp,fp
   15020:	dfc00117 	ldw	ra,4(sp)
   15024:	df000017 	ldw	fp,0(sp)
   15028:	dec00204 	addi	sp,sp,8
   1502c:	f800283a 	ret

00015030 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15030:	defffb04 	addi	sp,sp,-20
   15034:	dfc00415 	stw	ra,16(sp)
   15038:	df000315 	stw	fp,12(sp)
   1503c:	df000304 	addi	fp,sp,12
   15040:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15044:	00800074 	movhi	r2,1
   15048:	109c5604 	addi	r2,r2,29016
   1504c:	10800017 	ldw	r2,0(r2)
   15050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15054:	00003106 	br	1511c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   15058:	e0bffd17 	ldw	r2,-12(fp)
   1505c:	10800217 	ldw	r2,8(r2)
   15060:	1009883a 	mov	r4,r2
   15064:	00103b00 	call	103b0 <strlen>
   15068:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1506c:	e0bffd17 	ldw	r2,-12(fp)
   15070:	10c00217 	ldw	r3,8(r2)
   15074:	e0bffe17 	ldw	r2,-8(fp)
   15078:	10bfffc4 	addi	r2,r2,-1
   1507c:	1885883a 	add	r2,r3,r2
   15080:	10800003 	ldbu	r2,0(r2)
   15084:	10803fcc 	andi	r2,r2,255
   15088:	1080201c 	xori	r2,r2,128
   1508c:	10bfe004 	addi	r2,r2,-128
   15090:	10800bd8 	cmpnei	r2,r2,47
   15094:	1000031e 	bne	r2,zero,150a4 <alt_find_file+0x74>
    {
      len -= 1;
   15098:	e0bffe17 	ldw	r2,-8(fp)
   1509c:	10bfffc4 	addi	r2,r2,-1
   150a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   150a4:	e0bffe17 	ldw	r2,-8(fp)
   150a8:	e0ffff17 	ldw	r3,-4(fp)
   150ac:	1885883a 	add	r2,r3,r2
   150b0:	10800003 	ldbu	r2,0(r2)
   150b4:	10803fcc 	andi	r2,r2,255
   150b8:	1080201c 	xori	r2,r2,128
   150bc:	10bfe004 	addi	r2,r2,-128
   150c0:	10800be0 	cmpeqi	r2,r2,47
   150c4:	1000081e 	bne	r2,zero,150e8 <alt_find_file+0xb8>
   150c8:	e0bffe17 	ldw	r2,-8(fp)
   150cc:	e0ffff17 	ldw	r3,-4(fp)
   150d0:	1885883a 	add	r2,r3,r2
   150d4:	10800003 	ldbu	r2,0(r2)
   150d8:	10803fcc 	andi	r2,r2,255
   150dc:	1080201c 	xori	r2,r2,128
   150e0:	10bfe004 	addi	r2,r2,-128
   150e4:	10000a1e 	bne	r2,zero,15110 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   150e8:	e0bffd17 	ldw	r2,-12(fp)
   150ec:	10c00217 	ldw	r3,8(r2)
   150f0:	e0bffe17 	ldw	r2,-8(fp)
   150f4:	1809883a 	mov	r4,r3
   150f8:	e17fff17 	ldw	r5,-4(fp)
   150fc:	100d883a 	mov	r6,r2
   15100:	001536c0 	call	1536c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15104:	1000021e 	bne	r2,zero,15110 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15108:	e0bffd17 	ldw	r2,-12(fp)
   1510c:	00000806 	br	15130 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   15110:	e0bffd17 	ldw	r2,-12(fp)
   15114:	10800017 	ldw	r2,0(r2)
   15118:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1511c:	e0fffd17 	ldw	r3,-12(fp)
   15120:	00800074 	movhi	r2,1
   15124:	109c5604 	addi	r2,r2,29016
   15128:	18bfcb1e 	bne	r3,r2,15058 <_gp+0xffff5f10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1512c:	0005883a 	mov	r2,zero
}
   15130:	e037883a 	mov	sp,fp
   15134:	dfc00117 	ldw	ra,4(sp)
   15138:	df000017 	ldw	fp,0(sp)
   1513c:	dec00204 	addi	sp,sp,8
   15140:	f800283a 	ret

00015144 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15144:	defffc04 	addi	sp,sp,-16
   15148:	df000315 	stw	fp,12(sp)
   1514c:	df000304 	addi	fp,sp,12
   15150:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15154:	00bffa04 	movi	r2,-24
   15158:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1515c:	e03ffd15 	stw	zero,-12(fp)
   15160:	00001d06 	br	151d8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   15164:	00800074 	movhi	r2,1
   15168:	1097da04 	addi	r2,r2,24424
   1516c:	e0fffd17 	ldw	r3,-12(fp)
   15170:	18c00324 	muli	r3,r3,12
   15174:	10c5883a 	add	r2,r2,r3
   15178:	10800017 	ldw	r2,0(r2)
   1517c:	1000131e 	bne	r2,zero,151cc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   15180:	00800074 	movhi	r2,1
   15184:	1097da04 	addi	r2,r2,24424
   15188:	e0fffd17 	ldw	r3,-12(fp)
   1518c:	18c00324 	muli	r3,r3,12
   15190:	10c5883a 	add	r2,r2,r3
   15194:	e0ffff17 	ldw	r3,-4(fp)
   15198:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1519c:	00800074 	movhi	r2,1
   151a0:	109c5a04 	addi	r2,r2,29032
   151a4:	10c00017 	ldw	r3,0(r2)
   151a8:	e0bffd17 	ldw	r2,-12(fp)
   151ac:	1880040e 	bge	r3,r2,151c0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   151b0:	00800074 	movhi	r2,1
   151b4:	109c5a04 	addi	r2,r2,29032
   151b8:	e0fffd17 	ldw	r3,-12(fp)
   151bc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   151c0:	e0bffd17 	ldw	r2,-12(fp)
   151c4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   151c8:	00000606 	br	151e4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   151cc:	e0bffd17 	ldw	r2,-12(fp)
   151d0:	10800044 	addi	r2,r2,1
   151d4:	e0bffd15 	stw	r2,-12(fp)
   151d8:	e0bffd17 	ldw	r2,-12(fp)
   151dc:	10800810 	cmplti	r2,r2,32
   151e0:	103fe01e 	bne	r2,zero,15164 <_gp+0xffff601c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   151e4:	e0bffe17 	ldw	r2,-8(fp)
}
   151e8:	e037883a 	mov	sp,fp
   151ec:	df000017 	ldw	fp,0(sp)
   151f0:	dec00104 	addi	sp,sp,4
   151f4:	f800283a 	ret

000151f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   151f8:	defffb04 	addi	sp,sp,-20
   151fc:	df000415 	stw	fp,16(sp)
   15200:	df000404 	addi	fp,sp,16
   15204:	e13ffe15 	stw	r4,-8(fp)
   15208:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1520c:	e0bfff17 	ldw	r2,-4(fp)
   15210:	10840070 	cmpltui	r2,r2,4097
   15214:	1000021e 	bne	r2,zero,15220 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15218:	00840004 	movi	r2,4096
   1521c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15220:	e0fffe17 	ldw	r3,-8(fp)
   15224:	e0bfff17 	ldw	r2,-4(fp)
   15228:	1885883a 	add	r2,r3,r2
   1522c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15230:	e0bffe17 	ldw	r2,-8(fp)
   15234:	e0bffc15 	stw	r2,-16(fp)
   15238:	00000506 	br	15250 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1523c:	e0bffc17 	ldw	r2,-16(fp)
   15240:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15244:	e0bffc17 	ldw	r2,-16(fp)
   15248:	10800804 	addi	r2,r2,32
   1524c:	e0bffc15 	stw	r2,-16(fp)
   15250:	e0fffc17 	ldw	r3,-16(fp)
   15254:	e0bffd17 	ldw	r2,-12(fp)
   15258:	18bff836 	bltu	r3,r2,1523c <_gp+0xffff60f4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1525c:	e0bffe17 	ldw	r2,-8(fp)
   15260:	108007cc 	andi	r2,r2,31
   15264:	10000226 	beq	r2,zero,15270 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   15268:	e0bffc17 	ldw	r2,-16(fp)
   1526c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   15270:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   15274:	e037883a 	mov	sp,fp
   15278:	df000017 	ldw	fp,0(sp)
   1527c:	dec00104 	addi	sp,sp,4
   15280:	f800283a 	ret

00015284 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15284:	defffe04 	addi	sp,sp,-8
   15288:	df000115 	stw	fp,4(sp)
   1528c:	df000104 	addi	fp,sp,4
   15290:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15294:	e0bfff17 	ldw	r2,-4(fp)
   15298:	10bffe84 	addi	r2,r2,-6
   1529c:	10c00428 	cmpgeui	r3,r2,16
   152a0:	18001a1e 	bne	r3,zero,1530c <alt_exception_cause_generated_bad_addr+0x88>
   152a4:	100690ba 	slli	r3,r2,2
   152a8:	00800074 	movhi	r2,1
   152ac:	1094af04 	addi	r2,r2,21180
   152b0:	1885883a 	add	r2,r3,r2
   152b4:	10800017 	ldw	r2,0(r2)
   152b8:	1000683a 	jmp	r2
   152bc:	000152fc 	xorhi	zero,zero,1355
   152c0:	000152fc 	xorhi	zero,zero,1355
   152c4:	0001530c 	andi	zero,zero,1356
   152c8:	0001530c 	andi	zero,zero,1356
   152cc:	0001530c 	andi	zero,zero,1356
   152d0:	000152fc 	xorhi	zero,zero,1355
   152d4:	00015304 	movi	zero,1356
   152d8:	0001530c 	andi	zero,zero,1356
   152dc:	000152fc 	xorhi	zero,zero,1355
   152e0:	000152fc 	xorhi	zero,zero,1355
   152e4:	0001530c 	andi	zero,zero,1356
   152e8:	000152fc 	xorhi	zero,zero,1355
   152ec:	00015304 	movi	zero,1356
   152f0:	0001530c 	andi	zero,zero,1356
   152f4:	0001530c 	andi	zero,zero,1356
   152f8:	000152fc 	xorhi	zero,zero,1355
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   152fc:	00800044 	movi	r2,1
   15300:	00000306 	br	15310 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15304:	0005883a 	mov	r2,zero
   15308:	00000106 	br	15310 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1530c:	0005883a 	mov	r2,zero
  }
}
   15310:	e037883a 	mov	sp,fp
   15314:	df000017 	ldw	fp,0(sp)
   15318:	dec00104 	addi	sp,sp,4
   1531c:	f800283a 	ret

00015320 <atexit>:
   15320:	200b883a 	mov	r5,r4
   15324:	000d883a 	mov	r6,zero
   15328:	0009883a 	mov	r4,zero
   1532c:	000f883a 	mov	r7,zero
   15330:	00153e81 	jmpi	153e8 <__register_exitproc>

00015334 <exit>:
   15334:	defffe04 	addi	sp,sp,-8
   15338:	000b883a 	mov	r5,zero
   1533c:	dc000015 	stw	r16,0(sp)
   15340:	dfc00115 	stw	ra,4(sp)
   15344:	2021883a 	mov	r16,r4
   15348:	00154fc0 	call	154fc <__call_exitprocs>
   1534c:	00800074 	movhi	r2,1
   15350:	109c5204 	addi	r2,r2,29000
   15354:	11000017 	ldw	r4,0(r2)
   15358:	20800f17 	ldw	r2,60(r4)
   1535c:	10000126 	beq	r2,zero,15364 <exit+0x30>
   15360:	103ee83a 	callr	r2
   15364:	8009883a 	mov	r4,r16
   15368:	00156900 	call	15690 <_exit>

0001536c <memcmp>:
   1536c:	01c000c4 	movi	r7,3
   15370:	3980192e 	bgeu	r7,r6,153d8 <memcmp+0x6c>
   15374:	2144b03a 	or	r2,r4,r5
   15378:	11c4703a 	and	r2,r2,r7
   1537c:	10000f26 	beq	r2,zero,153bc <memcmp+0x50>
   15380:	20800003 	ldbu	r2,0(r4)
   15384:	28c00003 	ldbu	r3,0(r5)
   15388:	10c0151e 	bne	r2,r3,153e0 <memcmp+0x74>
   1538c:	31bfff84 	addi	r6,r6,-2
   15390:	01ffffc4 	movi	r7,-1
   15394:	00000406 	br	153a8 <memcmp+0x3c>
   15398:	20800003 	ldbu	r2,0(r4)
   1539c:	28c00003 	ldbu	r3,0(r5)
   153a0:	31bfffc4 	addi	r6,r6,-1
   153a4:	10c00e1e 	bne	r2,r3,153e0 <memcmp+0x74>
   153a8:	21000044 	addi	r4,r4,1
   153ac:	29400044 	addi	r5,r5,1
   153b0:	31fff91e 	bne	r6,r7,15398 <_gp+0xffff6250>
   153b4:	0005883a 	mov	r2,zero
   153b8:	f800283a 	ret
   153bc:	20c00017 	ldw	r3,0(r4)
   153c0:	28800017 	ldw	r2,0(r5)
   153c4:	1880041e 	bne	r3,r2,153d8 <memcmp+0x6c>
   153c8:	31bfff04 	addi	r6,r6,-4
   153cc:	21000104 	addi	r4,r4,4
   153d0:	29400104 	addi	r5,r5,4
   153d4:	39bff936 	bltu	r7,r6,153bc <_gp+0xffff6274>
   153d8:	303fe91e 	bne	r6,zero,15380 <_gp+0xffff6238>
   153dc:	003ff506 	br	153b4 <_gp+0xffff626c>
   153e0:	10c5c83a 	sub	r2,r2,r3
   153e4:	f800283a 	ret

000153e8 <__register_exitproc>:
   153e8:	00800074 	movhi	r2,1
   153ec:	defffa04 	addi	sp,sp,-24
   153f0:	109c5204 	addi	r2,r2,29000
   153f4:	dc000315 	stw	r16,12(sp)
   153f8:	14000017 	ldw	r16,0(r2)
   153fc:	dc400415 	stw	r17,16(sp)
   15400:	dfc00515 	stw	ra,20(sp)
   15404:	80805217 	ldw	r2,328(r16)
   15408:	2023883a 	mov	r17,r4
   1540c:	10003626 	beq	r2,zero,154e8 <__register_exitproc+0x100>
   15410:	10c00117 	ldw	r3,4(r2)
   15414:	010007c4 	movi	r4,31
   15418:	20c00e16 	blt	r4,r3,15454 <__register_exitproc+0x6c>
   1541c:	1a400044 	addi	r9,r3,1
   15420:	8800211e 	bne	r17,zero,154a8 <__register_exitproc+0xc0>
   15424:	18c00084 	addi	r3,r3,2
   15428:	18c7883a 	add	r3,r3,r3
   1542c:	18c7883a 	add	r3,r3,r3
   15430:	12400115 	stw	r9,4(r2)
   15434:	10c7883a 	add	r3,r2,r3
   15438:	19400015 	stw	r5,0(r3)
   1543c:	0005883a 	mov	r2,zero
   15440:	dfc00517 	ldw	ra,20(sp)
   15444:	dc400417 	ldw	r17,16(sp)
   15448:	dc000317 	ldw	r16,12(sp)
   1544c:	dec00604 	addi	sp,sp,24
   15450:	f800283a 	ret
   15454:	00800034 	movhi	r2,0
   15458:	10800004 	addi	r2,r2,0
   1545c:	10002526 	beq	r2,zero,154f4 <__register_exitproc+0x10c>
   15460:	01006404 	movi	r4,400
   15464:	d9400015 	stw	r5,0(sp)
   15468:	d9800115 	stw	r6,4(sp)
   1546c:	d9c00215 	stw	r7,8(sp)
   15470:	00000000 	call	0 <__reset-0x10000>
   15474:	d9400017 	ldw	r5,0(sp)
   15478:	d9800117 	ldw	r6,4(sp)
   1547c:	d9c00217 	ldw	r7,8(sp)
   15480:	10001c26 	beq	r2,zero,154f4 <__register_exitproc+0x10c>
   15484:	80c05217 	ldw	r3,328(r16)
   15488:	10000115 	stw	zero,4(r2)
   1548c:	02400044 	movi	r9,1
   15490:	10c00015 	stw	r3,0(r2)
   15494:	80805215 	stw	r2,328(r16)
   15498:	10006215 	stw	zero,392(r2)
   1549c:	10006315 	stw	zero,396(r2)
   154a0:	0007883a 	mov	r3,zero
   154a4:	883fdf26 	beq	r17,zero,15424 <_gp+0xffff62dc>
   154a8:	18d1883a 	add	r8,r3,r3
   154ac:	4211883a 	add	r8,r8,r8
   154b0:	1211883a 	add	r8,r2,r8
   154b4:	41802215 	stw	r6,136(r8)
   154b8:	01000044 	movi	r4,1
   154bc:	11806217 	ldw	r6,392(r2)
   154c0:	20c8983a 	sll	r4,r4,r3
   154c4:	310cb03a 	or	r6,r6,r4
   154c8:	11806215 	stw	r6,392(r2)
   154cc:	41c04215 	stw	r7,264(r8)
   154d0:	01800084 	movi	r6,2
   154d4:	89bfd31e 	bne	r17,r6,15424 <_gp+0xffff62dc>
   154d8:	11806317 	ldw	r6,396(r2)
   154dc:	3108b03a 	or	r4,r6,r4
   154e0:	11006315 	stw	r4,396(r2)
   154e4:	003fcf06 	br	15424 <_gp+0xffff62dc>
   154e8:	80805304 	addi	r2,r16,332
   154ec:	80805215 	stw	r2,328(r16)
   154f0:	003fc706 	br	15410 <_gp+0xffff62c8>
   154f4:	00bfffc4 	movi	r2,-1
   154f8:	003fd106 	br	15440 <_gp+0xffff62f8>

000154fc <__call_exitprocs>:
   154fc:	00800074 	movhi	r2,1
   15500:	109c5204 	addi	r2,r2,29000
   15504:	10800017 	ldw	r2,0(r2)
   15508:	defff404 	addi	sp,sp,-48
   1550c:	dd800815 	stw	r22,32(sp)
   15510:	d8800015 	stw	r2,0(sp)
   15514:	10805204 	addi	r2,r2,328
   15518:	dd000615 	stw	r20,24(sp)
   1551c:	dc800415 	stw	r18,16(sp)
   15520:	dfc00b15 	stw	ra,44(sp)
   15524:	df000a15 	stw	fp,40(sp)
   15528:	ddc00915 	stw	r23,36(sp)
   1552c:	dd400715 	stw	r21,28(sp)
   15530:	dcc00515 	stw	r19,20(sp)
   15534:	dc400315 	stw	r17,12(sp)
   15538:	dc000215 	stw	r16,8(sp)
   1553c:	2025883a 	mov	r18,r4
   15540:	2829883a 	mov	r20,r5
   15544:	d8800115 	stw	r2,4(sp)
   15548:	05bfffc4 	movi	r22,-1
   1554c:	d8800017 	ldw	r2,0(sp)
   15550:	14c05217 	ldw	r19,328(r2)
   15554:	98001d26 	beq	r19,zero,155cc <__call_exitprocs+0xd0>
   15558:	dd400117 	ldw	r21,4(sp)
   1555c:	98800117 	ldw	r2,4(r19)
   15560:	173fffc4 	addi	fp,r2,-1
   15564:	e0000d16 	blt	fp,zero,1559c <__call_exitprocs+0xa0>
   15568:	14000044 	addi	r16,r2,1
   1556c:	8421883a 	add	r16,r16,r16
   15570:	8421883a 	add	r16,r16,r16
   15574:	84402004 	addi	r17,r16,128
   15578:	9c63883a 	add	r17,r19,r17
   1557c:	9c21883a 	add	r16,r19,r16
   15580:	a0001e26 	beq	r20,zero,155fc <__call_exitprocs+0x100>
   15584:	80804017 	ldw	r2,256(r16)
   15588:	15001c26 	beq	r2,r20,155fc <__call_exitprocs+0x100>
   1558c:	e73fffc4 	addi	fp,fp,-1
   15590:	843fff04 	addi	r16,r16,-4
   15594:	8c7fff04 	addi	r17,r17,-4
   15598:	e5bff91e 	bne	fp,r22,15580 <_gp+0xffff6438>
   1559c:	00800034 	movhi	r2,0
   155a0:	10800004 	addi	r2,r2,0
   155a4:	10000926 	beq	r2,zero,155cc <__call_exitprocs+0xd0>
   155a8:	98800117 	ldw	r2,4(r19)
   155ac:	1000311e 	bne	r2,zero,15674 <__call_exitprocs+0x178>
   155b0:	98800017 	ldw	r2,0(r19)
   155b4:	10003426 	beq	r2,zero,15688 <__call_exitprocs+0x18c>
   155b8:	9809883a 	mov	r4,r19
   155bc:	a8800015 	stw	r2,0(r21)
   155c0:	00000000 	call	0 <__reset-0x10000>
   155c4:	acc00017 	ldw	r19,0(r21)
   155c8:	983fe41e 	bne	r19,zero,1555c <_gp+0xffff6414>
   155cc:	dfc00b17 	ldw	ra,44(sp)
   155d0:	df000a17 	ldw	fp,40(sp)
   155d4:	ddc00917 	ldw	r23,36(sp)
   155d8:	dd800817 	ldw	r22,32(sp)
   155dc:	dd400717 	ldw	r21,28(sp)
   155e0:	dd000617 	ldw	r20,24(sp)
   155e4:	dcc00517 	ldw	r19,20(sp)
   155e8:	dc800417 	ldw	r18,16(sp)
   155ec:	dc400317 	ldw	r17,12(sp)
   155f0:	dc000217 	ldw	r16,8(sp)
   155f4:	dec00c04 	addi	sp,sp,48
   155f8:	f800283a 	ret
   155fc:	98800117 	ldw	r2,4(r19)
   15600:	80c00017 	ldw	r3,0(r16)
   15604:	10bfffc4 	addi	r2,r2,-1
   15608:	17001526 	beq	r2,fp,15660 <__call_exitprocs+0x164>
   1560c:	80000015 	stw	zero,0(r16)
   15610:	183fde26 	beq	r3,zero,1558c <_gp+0xffff6444>
   15614:	00800044 	movi	r2,1
   15618:	1708983a 	sll	r4,r2,fp
   1561c:	98806217 	ldw	r2,392(r19)
   15620:	9dc00117 	ldw	r23,4(r19)
   15624:	2084703a 	and	r2,r4,r2
   15628:	1000061e 	bne	r2,zero,15644 <__call_exitprocs+0x148>
   1562c:	183ee83a 	callr	r3
   15630:	98800117 	ldw	r2,4(r19)
   15634:	15ffc51e 	bne	r2,r23,1554c <_gp+0xffff6404>
   15638:	a8800017 	ldw	r2,0(r21)
   1563c:	14ffd326 	beq	r2,r19,1558c <_gp+0xffff6444>
   15640:	003fc206 	br	1554c <_gp+0xffff6404>
   15644:	98806317 	ldw	r2,396(r19)
   15648:	2084703a 	and	r2,r4,r2
   1564c:	1000061e 	bne	r2,zero,15668 <__call_exitprocs+0x16c>
   15650:	89400017 	ldw	r5,0(r17)
   15654:	9009883a 	mov	r4,r18
   15658:	183ee83a 	callr	r3
   1565c:	003ff406 	br	15630 <_gp+0xffff64e8>
   15660:	9f000115 	stw	fp,4(r19)
   15664:	003fea06 	br	15610 <_gp+0xffff64c8>
   15668:	89000017 	ldw	r4,0(r17)
   1566c:	183ee83a 	callr	r3
   15670:	003fef06 	br	15630 <_gp+0xffff64e8>
   15674:	98800017 	ldw	r2,0(r19)
   15678:	982b883a 	mov	r21,r19
   1567c:	1027883a 	mov	r19,r2
   15680:	983fb61e 	bne	r19,zero,1555c <_gp+0xffff6414>
   15684:	003fd106 	br	155cc <_gp+0xffff6484>
   15688:	0005883a 	mov	r2,zero
   1568c:	003ffa06 	br	15678 <_gp+0xffff6530>

00015690 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15690:	defffd04 	addi	sp,sp,-12
   15694:	df000215 	stw	fp,8(sp)
   15698:	df000204 	addi	fp,sp,8
   1569c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   156a0:	0001883a 	nop
   156a4:	e0bfff17 	ldw	r2,-4(fp)
   156a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   156ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   156b0:	10000226 	beq	r2,zero,156bc <_exit+0x2c>
    ALT_SIM_FAIL();
   156b4:	002af070 	cmpltui	zero,zero,43969
   156b8:	00000106 	br	156c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   156bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   156c0:	003fff06 	br	156c0 <_gp+0xffff6578>
