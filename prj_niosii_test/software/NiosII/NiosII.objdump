
NiosII.elf:     file format elf32-littlenios2
NiosII.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0200022c

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000570c memsz 0x0000570c flags r-x
    LOAD off    0x0000672c vaddr 0x0200572c paddr 0x02007198 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c04 vaddr 0x02008c04 paddr 0x02008c04 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054b0  0200022c  0200022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  020056dc  020056dc  000066dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0200572c  02007198  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  02008c04  02008c04  00008c04  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  02008d58  02008d58  00008198  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04010000  04010000  00008198  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008198  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  000081c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001635a  00000000  00000000  00008bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005f41  00000000  00000000  0001ef4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000683b  00000000  00000000  00024e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001568  00000000  00000000  0002b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000271b  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000047be  00000000  00000000  0002f34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00033b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005d8  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003668a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003668d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00036699  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003669a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0003669b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000366a6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000366b1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  000366bc  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000035  00000000  00000000  000366c2  2**0
                  CONTENTS, READONLY
 27 .jdi          00003e87  00000000  00000000  000366f7  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003d548  00000000  00000000  0003a57e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
0200022c l    d  .text	00000000 .text
020056dc l    d  .rodata	00000000 .rodata
0200572c l    d  .rwdata	00000000 .rwdata
02008c04 l    d  .bss	00000000 .bss
02008d58 l    d  .sdram_controller_0	00000000 .sdram_controller_0
04010000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NiosII_bsp//obj/HAL/src/crt0.o
02000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0200572c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02001db8 l     F .text	00000008 __fp_lock
02001dc0 l     F .text	00000008 __fp_unlock
02001dd4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02002e34 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
02002f88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
020030b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
020030dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
020031e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
020032e0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020033c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
020035a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02007188 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0200382c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200397c l     F .text	00000038 alt_dev_reg
02006100 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02003c54 l     F .text	00000204 altera_avalon_jtag_uart_irq
02003e58 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020045d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02004a6c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02004bc4 l     F .text	00000050 alt_get_errno
02004c14 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02008c2c g     O .bss	00000004 alt_instruction_exception_handler
02002d28 g     F .text	00000054 _isatty_r
020034f0 g     F .text	00000078 alt_main
020002d0 g     F .text	000000a8 _puts_r
02008c58 g     O .bss	00000100 alt_irq
02002d7c g     F .text	0000005c _lseek_r
02007198 g       *ABS*	00000000 __flash_rwdata_start
02008d58 g       *ABS*	00000000 __alt_heap_start
02002ab8 g     F .text	0000005c __sseek
02002118 g     F .text	00000010 __sinit
02001f70 g     F .text	00000078 __sfmoreglue
02003588 g     F .text	00000020 __malloc_unlock
020012b8 g     F .text	0000015c memmove
02002100 g     F .text	00000018 _cleanup
02005004 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02002cd0 g     F .text	00000058 _fstat_r
02008c10 g     O .bss	00000004 errno
02002a34 g     F .text	00000008 __seofread
02008c18 g     O .bss	00000004 alt_argv
0200f160 g       *ABS*	00000000 _gp
02005f80 g     O .rwdata	00000180 alt_fd_list
02005024 g     F .text	00000090 alt_find_dev
02001180 g     F .text	00000138 memcpy
02001dc8 g     F .text	0000000c _cleanup_r
02004b4c g     F .text	00000078 alt_io_redirect
020056dc g       *ABS*	00000000 __DTOR_END__
02000378 g     F .text	00000014 puts
0200529c g     F .text	0000009c alt_exception_cause_generated_bad_addr
02004054 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
02002f50 g     F .text	00000008 .hidden __udivsi3
02003234 g     F .text	000000ac isatty
02008c0c g     O .bss	00000004 __malloc_top_pad
02000424 g     F .text	000004cc __sfvwrite_r
0200197c g     F .text	00000054 _sbrk_r
02002dd8 g     F .text	0000005c _read_r
02007180 g     O .rwdata	00000004 alt_max_fd
02002bcc g     F .text	000000f0 _fclose_r
02001d88 g     F .text	00000030 fflush
02008c08 g     O .bss	00000004 __malloc_max_sbrked_mem
02003414 g     F .text	000000dc lseek
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
02007160 g     O .rwdata	00000004 _global_impure_ptr
02001414 g     F .text	00000568 _realloc_r
02008d58 g       *ABS*	00000000 __bss_end
0200497c g     F .text	000000f0 alt_iic_isr_register
02004f00 g     F .text	00000104 alt_tick
02002138 g     F .text	00000018 __fp_lock_all
02004930 g     F .text	0000004c alt_ic_irq_enabled
02004e68 g     F .text	00000098 alt_alarm_stop
02008c20 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d0 alt_irq_handler
02005f58 g     O .rwdata	00000028 alt_dev_null
020045b8 g     F .text	0000001c alt_dcache_flush_all
02007198 g       *ABS*	00000000 __ram_rwdata_end
02007178 g     O .rwdata	00000008 alt_dev_list
0200387c g     F .text	00000100 write
0200572c g       *ABS*	00000000 __ram_rodata_end
0200312c g     F .text	000000b8 fstat
02002f58 g     F .text	00000008 .hidden __umodsi3
02008d58 g       *ABS*	00000000 end
02003b90 g     F .text	000000c4 altera_avalon_jtag_uart_init
020001cc g     F .exceptions	00000060 alt_instruction_exception_entry
020056dc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02004260 g     F .text	00000218 altera_avalon_jtag_uart_write
02002128 g     F .text	00000004 __sfp_lock_acquire
02001098 g     F .text	000000e8 memchr
0200228c g     F .text	000002f0 _free_r
02005514 g     F .text	00000194 __call_exitprocs
02007168 g     O .rwdata	00000004 __malloc_sbrk_base
0200022c g     F .text	0000003c _start
02008c24 g     O .bss	00000004 _alt_tick_rate
02008c28 g     O .bss	00000004 _alt_nticks
020035f8 g     F .text	00000104 read
020039e8 g     F .text	00000044 alt_sys_init
02005400 g     F .text	00000114 __register_exitproc
02003f00 g     F .text	00000068 altera_avalon_jtag_uart_close
02002f60 g     F .text	00000028 .hidden __mulsi3
0200572c g       *ABS*	00000000 __ram_rwdata_start
020056dc g       *ABS*	00000000 __ram_rodata_start
02008c30 g     O .bss	00000028 __malloc_current_mallinfo
02003a2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020051c8 g     F .text	000000d4 alt_get_fd
02002b78 g     F .text	00000054 _close_r
02005384 g     F .text	0000007c memcmp
02003aec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02008d58 g       *ABS*	00000000 __alt_stack_base
02003b3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020019d0 g     F .text	00000154 __swsetup_r
02001fe8 g     F .text	00000118 __sfp
02005b50 g     O .rwdata	00000408 __malloc_av_
02002134 g     F .text	00000004 __sinit_lock_release
020029e0 g     F .text	00000054 __sread
020050b4 g     F .text	00000114 alt_find_file
02004624 g     F .text	000000a4 alt_dev_llist_insert
02003568 g     F .text	00000020 __malloc_lock
0200377c g     F .text	000000b0 sbrk
02001d2c g     F .text	0000005c _fflush_r
02008c04 g       *ABS*	00000000 __bss_start
020028bc g     F .text	00000124 memset
02000268 g     F .text	00000068 main
02008c1c g     O .bss	00000004 alt_envp
02008c04 g     O .bss	00000004 __malloc_max_total_mem
02003a8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02002b14 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02002cbc g     F .text	00000014 fclose
020008f0 g     F .text	000007a8 _malloc_r
02007184 g     O .rwdata	00000004 alt_errno
0200257c g     F .text	000000c4 _fwalk
02002ea0 g     F .text	00000054 .hidden __divsi3
02002168 g     F .text	00000124 _malloc_trim_r
020056dc g       *ABS*	00000000 __CTOR_END__
020056dc g       *ABS*	00000000 __flash_rodata_start
020056dc g       *ABS*	00000000 __DTOR_LIST__
020039b4 g     F .text	00000034 alt_irq_init
020036fc g     F .text	00000080 alt_release_fd
02005338 g     F .text	00000014 atexit
02002b1c g     F .text	0000005c _write_r
02007164 g     O .rwdata	00000004 _impure_ptr
02008c14 g     O .bss	00000004 alt_argc
02001b24 g     F .text	00000208 __sflush_r
02004724 g     F .text	0000005c _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02002150 g     F .text	00000018 __fp_unlock_all
02007170 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
0200479c g     F .text	00000050 alt_ic_isr_register
02007198 g       *ABS*	00000000 _edata
02008d58 g       *ABS*	00000000 _end
0200022c g       *ABS*	00000000 __ram_exceptions_end
02003f68 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0200488c g     F .text	000000a4 alt_ic_irq_disable
02002a3c g     F .text	0000007c __swrite
0200716c g     O .rwdata	00000004 __malloc_trim_threshold
0200534c g     F .text	00000038 exit
02002640 g     F .text	000000c4 _fwalk_reent
02002ef4 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200212c g     F .text	00000004 __sfp_lock_release
020056a8 g     F .text	00000034 _exit
02004478 g     F .text	00000140 alt_alarm_start
02002704 g     F .text	000001b8 __smakebuf_r
0200038c g     F .text	00000098 strlen
02004d08 g     F .text	00000160 open
02004780 g     F .text	0000001c alt_icache_flush_all
0200718c g     O .rwdata	00000004 alt_priority_mask
020047ec g     F .text	000000a0 alt_ic_irq_enable
02007190 g     O .rwdata	00000008 alt_alarm_list
020046c8 g     F .text	0000005c _do_ctors
02002fd8 g     F .text	000000d8 close
02003344 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
02002130 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408b14 	ori	at,at,556
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001cc0 	call	20001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808074 	movhi	r2,513
 2000140:	10a31604 	addi	r2,r2,-29608
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	10a31604 	addi	r2,r2,-29608
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	21000104 	addi	r4,r4,4
 2000168:	1105883a 	add	r2,r2,r4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_mem_onchip_memory2_0+0xfdff012c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_mem_onchip_memory2_0+0xfdff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	e037883a 	mov	sp,fp
 20001bc:	dfc00117 	ldw	ra,4(sp)
 20001c0:	df000017 	ldw	fp,0(sp)
 20001c4:	dec00204 	addi	sp,sp,8
 20001c8:	f800283a 	ret

020001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001cc:	defffb04 	addi	sp,sp,-20
 20001d0:	dfc00415 	stw	ra,16(sp)
 20001d4:	df000315 	stw	fp,12(sp)
 20001d8:	df000304 	addi	fp,sp,12
 20001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e0:	00bfffc4 	movi	r2,-1
 20001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001ec:	d0a6b317 	ldw	r2,-25908(gp)
 20001f0:	10000726 	beq	r2,zero,2000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f4:	d0a6b317 	ldw	r2,-25908(gp)
 20001f8:	e0fffd17 	ldw	r3,-12(fp)
 20001fc:	1809883a 	mov	r4,r3
 2000200:	e17fff17 	ldw	r5,-4(fp)
 2000204:	e1bffe17 	ldw	r6,-8(fp)
 2000208:	103ee83a 	callr	r2
 200020c:	00000206 	br	2000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000214:	0005883a 	mov	r2,zero
}
 2000218:	e037883a 	mov	sp,fp
 200021c:	dfc00117 	ldw	ra,4(sp)
 2000220:	df000017 	ldw	fp,0(sp)
 2000224:	dec00204 	addi	sp,sp,8
 2000228:	f800283a 	ret

Disassembly of section .text:

0200022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 200022c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000234:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 2000238:	d6bc5814 	ori	gp,gp,61792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 200023c:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000240:	10a30114 	ori	r2,r2,35844

    movhi r3, %hi(__bss_end)
 2000244:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 2000248:	18e35614 	ori	r3,r3,36184

    beq r2, r3, 1f
 200024c:	10c00326 	beq	r2,r3,200025c <_start+0x30>

0:
    stw zero, (r2)
 2000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000258:	10fffd36 	bltu	r2,r3,2000250 <__alt_mem_onchip_memory2_0+0xfdff0250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 200025c:	20033440 	call	2003344 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000260:	20034f00 	call	20034f0 <alt_main>

02000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000264:	003fff06 	br	2000264 <__alt_mem_onchip_memory2_0+0xfdff0264>

02000268 <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
 2000268:	defffc04 	addi	sp,sp,-16
 200026c:	dfc00315 	stw	ra,12(sp)
 2000270:	df000215 	stw	fp,8(sp)
 2000274:	df000204 	addi	fp,sp,8
	int count = 0;
 2000278:	e03ffe15 	stw	zero,-8(fp)
	int delay;

	printf("Hello from Nios II!\n");
 200027c:	01008034 	movhi	r4,512
 2000280:	2115b704 	addi	r4,r4,22236
 2000284:	20003780 	call	2000378 <puts>
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count & 0x03);
 2000288:	e0bffe17 	ldw	r2,-8(fp)
 200028c:	10c000cc 	andi	r3,r2,3
 2000290:	008100b4 	movhi	r2,1026
 2000294:	10840804 	addi	r2,r2,4128
 2000298:	10c00035 	stwio	r3,0(r2)
		delay = 0;
 200029c:	e03fff15 	stw	zero,-4(fp)
		while(delay < 2000000)
 20002a0:	00000306 	br	20002b0 <main+0x48>
		{
			delay++;
 20002a4:	e0bfff17 	ldw	r2,-4(fp)
 20002a8:	10800044 	addi	r2,r2,1
 20002ac:	e0bfff15 	stw	r2,-4(fp)
	printf("Hello from Nios II!\n");
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count & 0x03);
		delay = 0;
		while(delay < 2000000)
 20002b0:	e0ffff17 	ldw	r3,-4(fp)
 20002b4:	008007f4 	movhi	r2,31
 20002b8:	10a11fc4 	addi	r2,r2,-31617
 20002bc:	10fff90e 	bge	r2,r3,20002a4 <__alt_mem_onchip_memory2_0+0xfdff02a4>
		{
			delay++;
		}
		count++;
 20002c0:	e0bffe17 	ldw	r2,-8(fp)
 20002c4:	10800044 	addi	r2,r2,1
 20002c8:	e0bffe15 	stw	r2,-8(fp)
	}
 20002cc:	003fee06 	br	2000288 <__alt_mem_onchip_memory2_0+0xfdff0288>

020002d0 <_puts_r>:
 20002d0:	defff604 	addi	sp,sp,-40
 20002d4:	dc000715 	stw	r16,28(sp)
 20002d8:	2021883a 	mov	r16,r4
 20002dc:	2809883a 	mov	r4,r5
 20002e0:	dc400815 	stw	r17,32(sp)
 20002e4:	dfc00915 	stw	ra,36(sp)
 20002e8:	2823883a 	mov	r17,r5
 20002ec:	200038c0 	call	200038c <strlen>
 20002f0:	81400217 	ldw	r5,8(r16)
 20002f4:	11000044 	addi	r4,r2,1
 20002f8:	d8800115 	stw	r2,4(sp)
 20002fc:	00808034 	movhi	r2,512
 2000300:	2980030b 	ldhu	r6,12(r5)
 2000304:	1095bc04 	addi	r2,r2,22256
 2000308:	d8800215 	stw	r2,8(sp)
 200030c:	00800044 	movi	r2,1
 2000310:	d8800315 	stw	r2,12(sp)
 2000314:	00800084 	movi	r2,2
 2000318:	d8800515 	stw	r2,20(sp)
 200031c:	dc400015 	stw	r17,0(sp)
 2000320:	d9000615 	stw	r4,24(sp)
 2000324:	dec00415 	stw	sp,16(sp)
 2000328:	3088000c 	andi	r2,r6,8192
 200032c:	1000061e 	bne	r2,zero,2000348 <_puts_r+0x78>
 2000330:	29001917 	ldw	r4,100(r5)
 2000334:	00b7ffc4 	movi	r2,-8193
 2000338:	31880014 	ori	r6,r6,8192
 200033c:	2084703a 	and	r2,r4,r2
 2000340:	2980030d 	sth	r6,12(r5)
 2000344:	28801915 	stw	r2,100(r5)
 2000348:	8009883a 	mov	r4,r16
 200034c:	d9800404 	addi	r6,sp,16
 2000350:	20004240 	call	2000424 <__sfvwrite_r>
 2000354:	1000061e 	bne	r2,zero,2000370 <_puts_r+0xa0>
 2000358:	00800284 	movi	r2,10
 200035c:	dfc00917 	ldw	ra,36(sp)
 2000360:	dc400817 	ldw	r17,32(sp)
 2000364:	dc000717 	ldw	r16,28(sp)
 2000368:	dec00a04 	addi	sp,sp,40
 200036c:	f800283a 	ret
 2000370:	00bfffc4 	movi	r2,-1
 2000374:	003ff906 	br	200035c <__alt_mem_onchip_memory2_0+0xfdff035c>

02000378 <puts>:
 2000378:	00808034 	movhi	r2,512
 200037c:	109c5904 	addi	r2,r2,29028
 2000380:	200b883a 	mov	r5,r4
 2000384:	11000017 	ldw	r4,0(r2)
 2000388:	20002d01 	jmpi	20002d0 <_puts_r>

0200038c <strlen>:
 200038c:	208000cc 	andi	r2,r4,3
 2000390:	10002026 	beq	r2,zero,2000414 <strlen+0x88>
 2000394:	20800007 	ldb	r2,0(r4)
 2000398:	10002026 	beq	r2,zero,200041c <strlen+0x90>
 200039c:	2005883a 	mov	r2,r4
 20003a0:	00000206 	br	20003ac <strlen+0x20>
 20003a4:	10c00007 	ldb	r3,0(r2)
 20003a8:	18001826 	beq	r3,zero,200040c <strlen+0x80>
 20003ac:	10800044 	addi	r2,r2,1
 20003b0:	10c000cc 	andi	r3,r2,3
 20003b4:	183ffb1e 	bne	r3,zero,20003a4 <__alt_mem_onchip_memory2_0+0xfdff03a4>
 20003b8:	10c00017 	ldw	r3,0(r2)
 20003bc:	01ffbff4 	movhi	r7,65279
 20003c0:	39ffbfc4 	addi	r7,r7,-257
 20003c4:	00ca303a 	nor	r5,zero,r3
 20003c8:	01a02074 	movhi	r6,32897
 20003cc:	19c7883a 	add	r3,r3,r7
 20003d0:	31a02004 	addi	r6,r6,-32640
 20003d4:	1946703a 	and	r3,r3,r5
 20003d8:	1986703a 	and	r3,r3,r6
 20003dc:	1800091e 	bne	r3,zero,2000404 <strlen+0x78>
 20003e0:	10800104 	addi	r2,r2,4
 20003e4:	10c00017 	ldw	r3,0(r2)
 20003e8:	19cb883a 	add	r5,r3,r7
 20003ec:	00c6303a 	nor	r3,zero,r3
 20003f0:	28c6703a 	and	r3,r5,r3
 20003f4:	1986703a 	and	r3,r3,r6
 20003f8:	183ff926 	beq	r3,zero,20003e0 <__alt_mem_onchip_memory2_0+0xfdff03e0>
 20003fc:	00000106 	br	2000404 <strlen+0x78>
 2000400:	10800044 	addi	r2,r2,1
 2000404:	10c00007 	ldb	r3,0(r2)
 2000408:	183ffd1e 	bne	r3,zero,2000400 <__alt_mem_onchip_memory2_0+0xfdff0400>
 200040c:	1105c83a 	sub	r2,r2,r4
 2000410:	f800283a 	ret
 2000414:	2005883a 	mov	r2,r4
 2000418:	003fe706 	br	20003b8 <__alt_mem_onchip_memory2_0+0xfdff03b8>
 200041c:	0005883a 	mov	r2,zero
 2000420:	f800283a 	ret

02000424 <__sfvwrite_r>:
 2000424:	30800217 	ldw	r2,8(r6)
 2000428:	10006726 	beq	r2,zero,20005c8 <__sfvwrite_r+0x1a4>
 200042c:	defff404 	addi	sp,sp,-48
 2000430:	dd000615 	stw	r20,24(sp)
 2000434:	2029883a 	mov	r20,r4
 2000438:	2900030b 	ldhu	r4,12(r5)
 200043c:	ddc00915 	stw	r23,36(sp)
 2000440:	dc000215 	stw	r16,8(sp)
 2000444:	dfc00b15 	stw	ra,44(sp)
 2000448:	df000a15 	stw	fp,40(sp)
 200044c:	dd800815 	stw	r22,32(sp)
 2000450:	dd400715 	stw	r21,28(sp)
 2000454:	dcc00515 	stw	r19,20(sp)
 2000458:	dc800415 	stw	r18,16(sp)
 200045c:	dc400315 	stw	r17,12(sp)
 2000460:	2080020c 	andi	r2,r4,8
 2000464:	2821883a 	mov	r16,r5
 2000468:	302f883a 	mov	r23,r6
 200046c:	10002726 	beq	r2,zero,200050c <__sfvwrite_r+0xe8>
 2000470:	28800417 	ldw	r2,16(r5)
 2000474:	10002526 	beq	r2,zero,200050c <__sfvwrite_r+0xe8>
 2000478:	2080008c 	andi	r2,r4,2
 200047c:	bc400017 	ldw	r17,0(r23)
 2000480:	10002a26 	beq	r2,zero,200052c <__sfvwrite_r+0x108>
 2000484:	05600034 	movhi	r21,32768
 2000488:	0027883a 	mov	r19,zero
 200048c:	0025883a 	mov	r18,zero
 2000490:	ad7f0004 	addi	r21,r21,-1024
 2000494:	980d883a 	mov	r6,r19
 2000498:	a009883a 	mov	r4,r20
 200049c:	90004626 	beq	r18,zero,20005b8 <__sfvwrite_r+0x194>
 20004a0:	900f883a 	mov	r7,r18
 20004a4:	81400717 	ldw	r5,28(r16)
 20004a8:	ac80022e 	bgeu	r21,r18,20004b4 <__sfvwrite_r+0x90>
 20004ac:	01e00034 	movhi	r7,32768
 20004b0:	39ff0004 	addi	r7,r7,-1024
 20004b4:	80800917 	ldw	r2,36(r16)
 20004b8:	103ee83a 	callr	r2
 20004bc:	0080550e 	bge	zero,r2,2000614 <__sfvwrite_r+0x1f0>
 20004c0:	b8c00217 	ldw	r3,8(r23)
 20004c4:	98a7883a 	add	r19,r19,r2
 20004c8:	90a5c83a 	sub	r18,r18,r2
 20004cc:	1885c83a 	sub	r2,r3,r2
 20004d0:	b8800215 	stw	r2,8(r23)
 20004d4:	103fef1e 	bne	r2,zero,2000494 <__alt_mem_onchip_memory2_0+0xfdff0494>
 20004d8:	0005883a 	mov	r2,zero
 20004dc:	dfc00b17 	ldw	ra,44(sp)
 20004e0:	df000a17 	ldw	fp,40(sp)
 20004e4:	ddc00917 	ldw	r23,36(sp)
 20004e8:	dd800817 	ldw	r22,32(sp)
 20004ec:	dd400717 	ldw	r21,28(sp)
 20004f0:	dd000617 	ldw	r20,24(sp)
 20004f4:	dcc00517 	ldw	r19,20(sp)
 20004f8:	dc800417 	ldw	r18,16(sp)
 20004fc:	dc400317 	ldw	r17,12(sp)
 2000500:	dc000217 	ldw	r16,8(sp)
 2000504:	dec00c04 	addi	sp,sp,48
 2000508:	f800283a 	ret
 200050c:	a009883a 	mov	r4,r20
 2000510:	800b883a 	mov	r5,r16
 2000514:	20019d00 	call	20019d0 <__swsetup_r>
 2000518:	1000ef1e 	bne	r2,zero,20008d8 <__sfvwrite_r+0x4b4>
 200051c:	8100030b 	ldhu	r4,12(r16)
 2000520:	bc400017 	ldw	r17,0(r23)
 2000524:	2080008c 	andi	r2,r4,2
 2000528:	103fd61e 	bne	r2,zero,2000484 <__alt_mem_onchip_memory2_0+0xfdff0484>
 200052c:	2080004c 	andi	r2,r4,1
 2000530:	10003d1e 	bne	r2,zero,2000628 <__sfvwrite_r+0x204>
 2000534:	0039883a 	mov	fp,zero
 2000538:	0025883a 	mov	r18,zero
 200053c:	90001a26 	beq	r18,zero,20005a8 <__sfvwrite_r+0x184>
 2000540:	2080800c 	andi	r2,r4,512
 2000544:	85800217 	ldw	r22,8(r16)
 2000548:	10007926 	beq	r2,zero,2000730 <__sfvwrite_r+0x30c>
 200054c:	b027883a 	mov	r19,r22
 2000550:	95809736 	bltu	r18,r22,20007b0 <__sfvwrite_r+0x38c>
 2000554:	2081200c 	andi	r2,r4,1152
 2000558:	1000a21e 	bne	r2,zero,20007e4 <__sfvwrite_r+0x3c0>
 200055c:	81000017 	ldw	r4,0(r16)
 2000560:	e00b883a 	mov	r5,fp
 2000564:	980d883a 	mov	r6,r19
 2000568:	20012b80 	call	20012b8 <memmove>
 200056c:	81000217 	ldw	r4,8(r16)
 2000570:	81400017 	ldw	r5,0(r16)
 2000574:	9005883a 	mov	r2,r18
 2000578:	2587c83a 	sub	r3,r4,r22
 200057c:	2ce7883a 	add	r19,r5,r19
 2000580:	80c00215 	stw	r3,8(r16)
 2000584:	84c00015 	stw	r19,0(r16)
 2000588:	b8c00217 	ldw	r3,8(r23)
 200058c:	e0b9883a 	add	fp,fp,r2
 2000590:	90a5c83a 	sub	r18,r18,r2
 2000594:	1885c83a 	sub	r2,r3,r2
 2000598:	b8800215 	stw	r2,8(r23)
 200059c:	103fce26 	beq	r2,zero,20004d8 <__alt_mem_onchip_memory2_0+0xfdff04d8>
 20005a0:	8100030b 	ldhu	r4,12(r16)
 20005a4:	903fe61e 	bne	r18,zero,2000540 <__alt_mem_onchip_memory2_0+0xfdff0540>
 20005a8:	8f000017 	ldw	fp,0(r17)
 20005ac:	8c800117 	ldw	r18,4(r17)
 20005b0:	8c400204 	addi	r17,r17,8
 20005b4:	003fe106 	br	200053c <__alt_mem_onchip_memory2_0+0xfdff053c>
 20005b8:	8cc00017 	ldw	r19,0(r17)
 20005bc:	8c800117 	ldw	r18,4(r17)
 20005c0:	8c400204 	addi	r17,r17,8
 20005c4:	003fb306 	br	2000494 <__alt_mem_onchip_memory2_0+0xfdff0494>
 20005c8:	0005883a 	mov	r2,zero
 20005cc:	f800283a 	ret
 20005d0:	00a00034 	movhi	r2,32768
 20005d4:	10bfffc4 	addi	r2,r2,-1
 20005d8:	9009883a 	mov	r4,r18
 20005dc:	1480012e 	bgeu	r2,r18,20005e4 <__sfvwrite_r+0x1c0>
 20005e0:	1009883a 	mov	r4,r2
 20005e4:	980b883a 	mov	r5,r19
 20005e8:	2002ea00 	call	2002ea0 <__divsi3>
 20005ec:	9809883a 	mov	r4,r19
 20005f0:	100b883a 	mov	r5,r2
 20005f4:	2002f600 	call	2002f60 <__mulsi3>
 20005f8:	81400717 	ldw	r5,28(r16)
 20005fc:	80c00917 	ldw	r3,36(r16)
 2000600:	a009883a 	mov	r4,r20
 2000604:	e00d883a 	mov	r6,fp
 2000608:	100f883a 	mov	r7,r2
 200060c:	183ee83a 	callr	r3
 2000610:	00bfdd16 	blt	zero,r2,2000588 <__alt_mem_onchip_memory2_0+0xfdff0588>
 2000614:	8080030b 	ldhu	r2,12(r16)
 2000618:	10801014 	ori	r2,r2,64
 200061c:	8080030d 	sth	r2,12(r16)
 2000620:	00bfffc4 	movi	r2,-1
 2000624:	003fad06 	br	20004dc <__alt_mem_onchip_memory2_0+0xfdff04dc>
 2000628:	0027883a 	mov	r19,zero
 200062c:	0011883a 	mov	r8,zero
 2000630:	0039883a 	mov	fp,zero
 2000634:	0025883a 	mov	r18,zero
 2000638:	90001f26 	beq	r18,zero,20006b8 <__sfvwrite_r+0x294>
 200063c:	40006026 	beq	r8,zero,20007c0 <__sfvwrite_r+0x39c>
 2000640:	982b883a 	mov	r21,r19
 2000644:	94c0012e 	bgeu	r18,r19,200064c <__sfvwrite_r+0x228>
 2000648:	902b883a 	mov	r21,r18
 200064c:	81000017 	ldw	r4,0(r16)
 2000650:	80800417 	ldw	r2,16(r16)
 2000654:	a82d883a 	mov	r22,r21
 2000658:	81800217 	ldw	r6,8(r16)
 200065c:	81c00517 	ldw	r7,20(r16)
 2000660:	1100022e 	bgeu	r2,r4,200066c <__sfvwrite_r+0x248>
 2000664:	31c7883a 	add	r3,r6,r7
 2000668:	1d401816 	blt	r3,r21,20006cc <__sfvwrite_r+0x2a8>
 200066c:	a9c04416 	blt	r21,r7,2000780 <__sfvwrite_r+0x35c>
 2000670:	80800917 	ldw	r2,36(r16)
 2000674:	81400717 	ldw	r5,28(r16)
 2000678:	a009883a 	mov	r4,r20
 200067c:	da000115 	stw	r8,4(sp)
 2000680:	e00d883a 	mov	r6,fp
 2000684:	103ee83a 	callr	r2
 2000688:	102d883a 	mov	r22,r2
 200068c:	da000117 	ldw	r8,4(sp)
 2000690:	00bfe00e 	bge	zero,r2,2000614 <__alt_mem_onchip_memory2_0+0xfdff0614>
 2000694:	9da7c83a 	sub	r19,r19,r22
 2000698:	98001f26 	beq	r19,zero,2000718 <__sfvwrite_r+0x2f4>
 200069c:	b8800217 	ldw	r2,8(r23)
 20006a0:	e5b9883a 	add	fp,fp,r22
 20006a4:	95a5c83a 	sub	r18,r18,r22
 20006a8:	15adc83a 	sub	r22,r2,r22
 20006ac:	bd800215 	stw	r22,8(r23)
 20006b0:	b03f8926 	beq	r22,zero,20004d8 <__alt_mem_onchip_memory2_0+0xfdff04d8>
 20006b4:	903fe11e 	bne	r18,zero,200063c <__alt_mem_onchip_memory2_0+0xfdff063c>
 20006b8:	8f000017 	ldw	fp,0(r17)
 20006bc:	8c800117 	ldw	r18,4(r17)
 20006c0:	0011883a 	mov	r8,zero
 20006c4:	8c400204 	addi	r17,r17,8
 20006c8:	003fdb06 	br	2000638 <__alt_mem_onchip_memory2_0+0xfdff0638>
 20006cc:	180d883a 	mov	r6,r3
 20006d0:	e00b883a 	mov	r5,fp
 20006d4:	da000115 	stw	r8,4(sp)
 20006d8:	d8c00015 	stw	r3,0(sp)
 20006dc:	20012b80 	call	20012b8 <memmove>
 20006e0:	d8c00017 	ldw	r3,0(sp)
 20006e4:	80800017 	ldw	r2,0(r16)
 20006e8:	a009883a 	mov	r4,r20
 20006ec:	800b883a 	mov	r5,r16
 20006f0:	10c5883a 	add	r2,r2,r3
 20006f4:	80800015 	stw	r2,0(r16)
 20006f8:	d8c00015 	stw	r3,0(sp)
 20006fc:	2001d2c0 	call	2001d2c <_fflush_r>
 2000700:	d8c00017 	ldw	r3,0(sp)
 2000704:	da000117 	ldw	r8,4(sp)
 2000708:	103fc21e 	bne	r2,zero,2000614 <__alt_mem_onchip_memory2_0+0xfdff0614>
 200070c:	182d883a 	mov	r22,r3
 2000710:	9da7c83a 	sub	r19,r19,r22
 2000714:	983fe11e 	bne	r19,zero,200069c <__alt_mem_onchip_memory2_0+0xfdff069c>
 2000718:	a009883a 	mov	r4,r20
 200071c:	800b883a 	mov	r5,r16
 2000720:	2001d2c0 	call	2001d2c <_fflush_r>
 2000724:	103fbb1e 	bne	r2,zero,2000614 <__alt_mem_onchip_memory2_0+0xfdff0614>
 2000728:	0011883a 	mov	r8,zero
 200072c:	003fdb06 	br	200069c <__alt_mem_onchip_memory2_0+0xfdff069c>
 2000730:	81000017 	ldw	r4,0(r16)
 2000734:	80800417 	ldw	r2,16(r16)
 2000738:	11000236 	bltu	r2,r4,2000744 <__sfvwrite_r+0x320>
 200073c:	84c00517 	ldw	r19,20(r16)
 2000740:	94ffa32e 	bgeu	r18,r19,20005d0 <__alt_mem_onchip_memory2_0+0xfdff05d0>
 2000744:	9027883a 	mov	r19,r18
 2000748:	b480012e 	bgeu	r22,r18,2000750 <__sfvwrite_r+0x32c>
 200074c:	b027883a 	mov	r19,r22
 2000750:	e00b883a 	mov	r5,fp
 2000754:	980d883a 	mov	r6,r19
 2000758:	20012b80 	call	20012b8 <memmove>
 200075c:	80800217 	ldw	r2,8(r16)
 2000760:	80c00017 	ldw	r3,0(r16)
 2000764:	14c5c83a 	sub	r2,r2,r19
 2000768:	1cc7883a 	add	r3,r3,r19
 200076c:	80800215 	stw	r2,8(r16)
 2000770:	80c00015 	stw	r3,0(r16)
 2000774:	10004326 	beq	r2,zero,2000884 <__sfvwrite_r+0x460>
 2000778:	9805883a 	mov	r2,r19
 200077c:	003f8206 	br	2000588 <__alt_mem_onchip_memory2_0+0xfdff0588>
 2000780:	a80d883a 	mov	r6,r21
 2000784:	e00b883a 	mov	r5,fp
 2000788:	da000115 	stw	r8,4(sp)
 200078c:	20012b80 	call	20012b8 <memmove>
 2000790:	80800217 	ldw	r2,8(r16)
 2000794:	80c00017 	ldw	r3,0(r16)
 2000798:	da000117 	ldw	r8,4(sp)
 200079c:	1545c83a 	sub	r2,r2,r21
 20007a0:	1d6b883a 	add	r21,r3,r21
 20007a4:	80800215 	stw	r2,8(r16)
 20007a8:	85400015 	stw	r21,0(r16)
 20007ac:	003fb906 	br	2000694 <__alt_mem_onchip_memory2_0+0xfdff0694>
 20007b0:	81000017 	ldw	r4,0(r16)
 20007b4:	902d883a 	mov	r22,r18
 20007b8:	9027883a 	mov	r19,r18
 20007bc:	003f6806 	br	2000560 <__alt_mem_onchip_memory2_0+0xfdff0560>
 20007c0:	e009883a 	mov	r4,fp
 20007c4:	01400284 	movi	r5,10
 20007c8:	900d883a 	mov	r6,r18
 20007cc:	20010980 	call	2001098 <memchr>
 20007d0:	10003e26 	beq	r2,zero,20008cc <__sfvwrite_r+0x4a8>
 20007d4:	10800044 	addi	r2,r2,1
 20007d8:	1727c83a 	sub	r19,r2,fp
 20007dc:	02000044 	movi	r8,1
 20007e0:	003f9706 	br	2000640 <__alt_mem_onchip_memory2_0+0xfdff0640>
 20007e4:	80800517 	ldw	r2,20(r16)
 20007e8:	81400417 	ldw	r5,16(r16)
 20007ec:	80c00017 	ldw	r3,0(r16)
 20007f0:	10a7883a 	add	r19,r2,r2
 20007f4:	9885883a 	add	r2,r19,r2
 20007f8:	1026d7fa 	srli	r19,r2,31
 20007fc:	196bc83a 	sub	r21,r3,r5
 2000800:	a9800044 	addi	r6,r21,1
 2000804:	9885883a 	add	r2,r19,r2
 2000808:	1027d07a 	srai	r19,r2,1
 200080c:	3485883a 	add	r2,r6,r18
 2000810:	980d883a 	mov	r6,r19
 2000814:	9880022e 	bgeu	r19,r2,2000820 <__sfvwrite_r+0x3fc>
 2000818:	1027883a 	mov	r19,r2
 200081c:	100d883a 	mov	r6,r2
 2000820:	2101000c 	andi	r4,r4,1024
 2000824:	20001c26 	beq	r4,zero,2000898 <__sfvwrite_r+0x474>
 2000828:	a009883a 	mov	r4,r20
 200082c:	300b883a 	mov	r5,r6
 2000830:	20008f00 	call	20008f0 <_malloc_r>
 2000834:	102d883a 	mov	r22,r2
 2000838:	10002926 	beq	r2,zero,20008e0 <__sfvwrite_r+0x4bc>
 200083c:	81400417 	ldw	r5,16(r16)
 2000840:	1009883a 	mov	r4,r2
 2000844:	a80d883a 	mov	r6,r21
 2000848:	20011800 	call	2001180 <memcpy>
 200084c:	8080030b 	ldhu	r2,12(r16)
 2000850:	00fedfc4 	movi	r3,-1153
 2000854:	10c4703a 	and	r2,r2,r3
 2000858:	10802014 	ori	r2,r2,128
 200085c:	8080030d 	sth	r2,12(r16)
 2000860:	b549883a 	add	r4,r22,r21
 2000864:	9d4bc83a 	sub	r5,r19,r21
 2000868:	85800415 	stw	r22,16(r16)
 200086c:	84c00515 	stw	r19,20(r16)
 2000870:	81000015 	stw	r4,0(r16)
 2000874:	902d883a 	mov	r22,r18
 2000878:	81400215 	stw	r5,8(r16)
 200087c:	9027883a 	mov	r19,r18
 2000880:	003f3706 	br	2000560 <__alt_mem_onchip_memory2_0+0xfdff0560>
 2000884:	a009883a 	mov	r4,r20
 2000888:	800b883a 	mov	r5,r16
 200088c:	2001d2c0 	call	2001d2c <_fflush_r>
 2000890:	103fb926 	beq	r2,zero,2000778 <__alt_mem_onchip_memory2_0+0xfdff0778>
 2000894:	003f5f06 	br	2000614 <__alt_mem_onchip_memory2_0+0xfdff0614>
 2000898:	a009883a 	mov	r4,r20
 200089c:	20014140 	call	2001414 <_realloc_r>
 20008a0:	102d883a 	mov	r22,r2
 20008a4:	103fee1e 	bne	r2,zero,2000860 <__alt_mem_onchip_memory2_0+0xfdff0860>
 20008a8:	81400417 	ldw	r5,16(r16)
 20008ac:	a009883a 	mov	r4,r20
 20008b0:	200228c0 	call	200228c <_free_r>
 20008b4:	8080030b 	ldhu	r2,12(r16)
 20008b8:	00ffdfc4 	movi	r3,-129
 20008bc:	1884703a 	and	r2,r3,r2
 20008c0:	00c00304 	movi	r3,12
 20008c4:	a0c00015 	stw	r3,0(r20)
 20008c8:	003f5306 	br	2000618 <__alt_mem_onchip_memory2_0+0xfdff0618>
 20008cc:	94c00044 	addi	r19,r18,1
 20008d0:	02000044 	movi	r8,1
 20008d4:	003f5a06 	br	2000640 <__alt_mem_onchip_memory2_0+0xfdff0640>
 20008d8:	00bfffc4 	movi	r2,-1
 20008dc:	003eff06 	br	20004dc <__alt_mem_onchip_memory2_0+0xfdff04dc>
 20008e0:	00800304 	movi	r2,12
 20008e4:	a0800015 	stw	r2,0(r20)
 20008e8:	8080030b 	ldhu	r2,12(r16)
 20008ec:	003f4a06 	br	2000618 <__alt_mem_onchip_memory2_0+0xfdff0618>

020008f0 <_malloc_r>:
 20008f0:	defff504 	addi	sp,sp,-44
 20008f4:	dc800315 	stw	r18,12(sp)
 20008f8:	dfc00a15 	stw	ra,40(sp)
 20008fc:	df000915 	stw	fp,36(sp)
 2000900:	ddc00815 	stw	r23,32(sp)
 2000904:	dd800715 	stw	r22,28(sp)
 2000908:	dd400615 	stw	r21,24(sp)
 200090c:	dd000515 	stw	r20,20(sp)
 2000910:	dcc00415 	stw	r19,16(sp)
 2000914:	dc400215 	stw	r17,8(sp)
 2000918:	dc000115 	stw	r16,4(sp)
 200091c:	288002c4 	addi	r2,r5,11
 2000920:	00c00584 	movi	r3,22
 2000924:	2025883a 	mov	r18,r4
 2000928:	18802a2e 	bgeu	r3,r2,20009d4 <_malloc_r+0xe4>
 200092c:	047ffe04 	movi	r17,-8
 2000930:	1462703a 	and	r17,r2,r17
 2000934:	88009e16 	blt	r17,zero,2000bb0 <_malloc_r+0x2c0>
 2000938:	89409d36 	bltu	r17,r5,2000bb0 <_malloc_r+0x2c0>
 200093c:	20035680 	call	2003568 <__malloc_lock>
 2000940:	00807dc4 	movi	r2,503
 2000944:	14402736 	bltu	r2,r17,20009e4 <_malloc_r+0xf4>
 2000948:	8806d0fa 	srli	r3,r17,3
 200094c:	04c08034 	movhi	r19,512
 2000950:	9cd6d404 	addi	r19,r19,23376
 2000954:	18c5883a 	add	r2,r3,r3
 2000958:	1085883a 	add	r2,r2,r2
 200095c:	1085883a 	add	r2,r2,r2
 2000960:	9885883a 	add	r2,r19,r2
 2000964:	14000317 	ldw	r16,12(r2)
 2000968:	80814a26 	beq	r16,r2,2000e94 <_malloc_r+0x5a4>
 200096c:	80c00117 	ldw	r3,4(r16)
 2000970:	81000317 	ldw	r4,12(r16)
 2000974:	00bfff04 	movi	r2,-4
 2000978:	1884703a 	and	r2,r3,r2
 200097c:	81400217 	ldw	r5,8(r16)
 2000980:	8085883a 	add	r2,r16,r2
 2000984:	10c00117 	ldw	r3,4(r2)
 2000988:	29000315 	stw	r4,12(r5)
 200098c:	21400215 	stw	r5,8(r4)
 2000990:	18c00054 	ori	r3,r3,1
 2000994:	10c00115 	stw	r3,4(r2)
 2000998:	9009883a 	mov	r4,r18
 200099c:	20035880 	call	2003588 <__malloc_unlock>
 20009a0:	80800204 	addi	r2,r16,8
 20009a4:	dfc00a17 	ldw	ra,40(sp)
 20009a8:	df000917 	ldw	fp,36(sp)
 20009ac:	ddc00817 	ldw	r23,32(sp)
 20009b0:	dd800717 	ldw	r22,28(sp)
 20009b4:	dd400617 	ldw	r21,24(sp)
 20009b8:	dd000517 	ldw	r20,20(sp)
 20009bc:	dcc00417 	ldw	r19,16(sp)
 20009c0:	dc800317 	ldw	r18,12(sp)
 20009c4:	dc400217 	ldw	r17,8(sp)
 20009c8:	dc000117 	ldw	r16,4(sp)
 20009cc:	dec00b04 	addi	sp,sp,44
 20009d0:	f800283a 	ret
 20009d4:	04400404 	movi	r17,16
 20009d8:	89407536 	bltu	r17,r5,2000bb0 <_malloc_r+0x2c0>
 20009dc:	20035680 	call	2003568 <__malloc_lock>
 20009e0:	003fd906 	br	2000948 <__alt_mem_onchip_memory2_0+0xfdff0948>
 20009e4:	8806d27a 	srli	r3,r17,9
 20009e8:	18007526 	beq	r3,zero,2000bc0 <_malloc_r+0x2d0>
 20009ec:	00800104 	movi	r2,4
 20009f0:	10c0ef36 	bltu	r2,r3,2000db0 <_malloc_r+0x4c0>
 20009f4:	8806d1ba 	srli	r3,r17,6
 20009f8:	19c00e04 	addi	r7,r3,56
 20009fc:	39cb883a 	add	r5,r7,r7
 2000a00:	04c08034 	movhi	r19,512
 2000a04:	294b883a 	add	r5,r5,r5
 2000a08:	9cd6d404 	addi	r19,r19,23376
 2000a0c:	294b883a 	add	r5,r5,r5
 2000a10:	994b883a 	add	r5,r19,r5
 2000a14:	2c000317 	ldw	r16,12(r5)
 2000a18:	2c000e26 	beq	r5,r16,2000a54 <_malloc_r+0x164>
 2000a1c:	80800117 	ldw	r2,4(r16)
 2000a20:	01bfff04 	movi	r6,-4
 2000a24:	010003c4 	movi	r4,15
 2000a28:	1184703a 	and	r2,r2,r6
 2000a2c:	1447c83a 	sub	r3,r2,r17
 2000a30:	20c00716 	blt	r4,r3,2000a50 <_malloc_r+0x160>
 2000a34:	1800650e 	bge	r3,zero,2000bcc <_malloc_r+0x2dc>
 2000a38:	84000317 	ldw	r16,12(r16)
 2000a3c:	2c000526 	beq	r5,r16,2000a54 <_malloc_r+0x164>
 2000a40:	80800117 	ldw	r2,4(r16)
 2000a44:	1184703a 	and	r2,r2,r6
 2000a48:	1447c83a 	sub	r3,r2,r17
 2000a4c:	20fff90e 	bge	r4,r3,2000a34 <__alt_mem_onchip_memory2_0+0xfdff0a34>
 2000a50:	39ffffc4 	addi	r7,r7,-1
 2000a54:	38c00044 	addi	r3,r7,1
 2000a58:	01808034 	movhi	r6,512
 2000a5c:	9c000417 	ldw	r16,16(r19)
 2000a60:	3196d404 	addi	r6,r6,23376
 2000a64:	32400204 	addi	r9,r6,8
 2000a68:	82410326 	beq	r16,r9,2000e78 <_malloc_r+0x588>
 2000a6c:	81000117 	ldw	r4,4(r16)
 2000a70:	00bfff04 	movi	r2,-4
 2000a74:	208e703a 	and	r7,r4,r2
 2000a78:	3c45c83a 	sub	r2,r7,r17
 2000a7c:	010003c4 	movi	r4,15
 2000a80:	2080ee16 	blt	r4,r2,2000e3c <_malloc_r+0x54c>
 2000a84:	32400515 	stw	r9,20(r6)
 2000a88:	32400415 	stw	r9,16(r6)
 2000a8c:	1000510e 	bge	r2,zero,2000bd4 <_malloc_r+0x2e4>
 2000a90:	00807fc4 	movi	r2,511
 2000a94:	11c0ce36 	bltu	r2,r7,2000dd0 <_malloc_r+0x4e0>
 2000a98:	3808d0fa 	srli	r4,r7,3
 2000a9c:	01c00044 	movi	r7,1
 2000aa0:	30800117 	ldw	r2,4(r6)
 2000aa4:	210b883a 	add	r5,r4,r4
 2000aa8:	294b883a 	add	r5,r5,r5
 2000aac:	2009d0ba 	srai	r4,r4,2
 2000ab0:	294b883a 	add	r5,r5,r5
 2000ab4:	298b883a 	add	r5,r5,r6
 2000ab8:	2a000217 	ldw	r8,8(r5)
 2000abc:	3908983a 	sll	r4,r7,r4
 2000ac0:	81400315 	stw	r5,12(r16)
 2000ac4:	82000215 	stw	r8,8(r16)
 2000ac8:	2088b03a 	or	r4,r4,r2
 2000acc:	2c000215 	stw	r16,8(r5)
 2000ad0:	31000115 	stw	r4,4(r6)
 2000ad4:	44000315 	stw	r16,12(r8)
 2000ad8:	1805d0ba 	srai	r2,r3,2
 2000adc:	01400044 	movi	r5,1
 2000ae0:	288a983a 	sll	r5,r5,r2
 2000ae4:	21404336 	bltu	r4,r5,2000bf4 <_malloc_r+0x304>
 2000ae8:	2144703a 	and	r2,r4,r5
 2000aec:	10000a1e 	bne	r2,zero,2000b18 <_malloc_r+0x228>
 2000af0:	00bfff04 	movi	r2,-4
 2000af4:	294b883a 	add	r5,r5,r5
 2000af8:	1886703a 	and	r3,r3,r2
 2000afc:	2144703a 	and	r2,r4,r5
 2000b00:	18c00104 	addi	r3,r3,4
 2000b04:	1000041e 	bne	r2,zero,2000b18 <_malloc_r+0x228>
 2000b08:	294b883a 	add	r5,r5,r5
 2000b0c:	2144703a 	and	r2,r4,r5
 2000b10:	18c00104 	addi	r3,r3,4
 2000b14:	103ffc26 	beq	r2,zero,2000b08 <__alt_mem_onchip_memory2_0+0xfdff0b08>
 2000b18:	023fff04 	movi	r8,-4
 2000b1c:	01c003c4 	movi	r7,15
 2000b20:	18c5883a 	add	r2,r3,r3
 2000b24:	1085883a 	add	r2,r2,r2
 2000b28:	1085883a 	add	r2,r2,r2
 2000b2c:	9895883a 	add	r10,r19,r2
 2000b30:	52c00304 	addi	r11,r10,12
 2000b34:	1819883a 	mov	r12,r3
 2000b38:	5c000017 	ldw	r16,0(r11)
 2000b3c:	59bffd04 	addi	r6,r11,-12
 2000b40:	8180041e 	bne	r16,r6,2000b54 <_malloc_r+0x264>
 2000b44:	0000ce06 	br	2000e80 <_malloc_r+0x590>
 2000b48:	2000d70e 	bge	r4,zero,2000ea8 <_malloc_r+0x5b8>
 2000b4c:	84000317 	ldw	r16,12(r16)
 2000b50:	8180cb26 	beq	r16,r6,2000e80 <_malloc_r+0x590>
 2000b54:	80800117 	ldw	r2,4(r16)
 2000b58:	1204703a 	and	r2,r2,r8
 2000b5c:	1449c83a 	sub	r4,r2,r17
 2000b60:	393ff90e 	bge	r7,r4,2000b48 <__alt_mem_onchip_memory2_0+0xfdff0b48>
 2000b64:	80800317 	ldw	r2,12(r16)
 2000b68:	80c00217 	ldw	r3,8(r16)
 2000b6c:	89400054 	ori	r5,r17,1
 2000b70:	81400115 	stw	r5,4(r16)
 2000b74:	18800315 	stw	r2,12(r3)
 2000b78:	10c00215 	stw	r3,8(r2)
 2000b7c:	8463883a 	add	r17,r16,r17
 2000b80:	9c400515 	stw	r17,20(r19)
 2000b84:	9c400415 	stw	r17,16(r19)
 2000b88:	20800054 	ori	r2,r4,1
 2000b8c:	88800115 	stw	r2,4(r17)
 2000b90:	8a400315 	stw	r9,12(r17)
 2000b94:	8a400215 	stw	r9,8(r17)
 2000b98:	8923883a 	add	r17,r17,r4
 2000b9c:	89000015 	stw	r4,0(r17)
 2000ba0:	9009883a 	mov	r4,r18
 2000ba4:	20035880 	call	2003588 <__malloc_unlock>
 2000ba8:	80800204 	addi	r2,r16,8
 2000bac:	003f7d06 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000bb0:	00800304 	movi	r2,12
 2000bb4:	90800015 	stw	r2,0(r18)
 2000bb8:	0005883a 	mov	r2,zero
 2000bbc:	003f7906 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000bc0:	01401f84 	movi	r5,126
 2000bc4:	01c00fc4 	movi	r7,63
 2000bc8:	003f8d06 	br	2000a00 <__alt_mem_onchip_memory2_0+0xfdff0a00>
 2000bcc:	81000317 	ldw	r4,12(r16)
 2000bd0:	003f6a06 	br	200097c <__alt_mem_onchip_memory2_0+0xfdff097c>
 2000bd4:	81c5883a 	add	r2,r16,r7
 2000bd8:	10c00117 	ldw	r3,4(r2)
 2000bdc:	9009883a 	mov	r4,r18
 2000be0:	18c00054 	ori	r3,r3,1
 2000be4:	10c00115 	stw	r3,4(r2)
 2000be8:	20035880 	call	2003588 <__malloc_unlock>
 2000bec:	80800204 	addi	r2,r16,8
 2000bf0:	003f6c06 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000bf4:	9c000217 	ldw	r16,8(r19)
 2000bf8:	00bfff04 	movi	r2,-4
 2000bfc:	85800117 	ldw	r22,4(r16)
 2000c00:	b0ac703a 	and	r22,r22,r2
 2000c04:	b4400336 	bltu	r22,r17,2000c14 <_malloc_r+0x324>
 2000c08:	b445c83a 	sub	r2,r22,r17
 2000c0c:	00c003c4 	movi	r3,15
 2000c10:	18805d16 	blt	r3,r2,2000d88 <_malloc_r+0x498>
 2000c14:	05c08034 	movhi	r23,512
 2000c18:	00808074 	movhi	r2,513
 2000c1c:	bddc5a04 	addi	r23,r23,29032
 2000c20:	10a30304 	addi	r2,r2,-29684
 2000c24:	15400017 	ldw	r21,0(r2)
 2000c28:	b9000017 	ldw	r4,0(r23)
 2000c2c:	00ffffc4 	movi	r3,-1
 2000c30:	858d883a 	add	r6,r16,r22
 2000c34:	8d6b883a 	add	r21,r17,r21
 2000c38:	20c0e426 	beq	r4,r3,2000fcc <_malloc_r+0x6dc>
 2000c3c:	ad4403c4 	addi	r21,r21,4111
 2000c40:	00fc0004 	movi	r3,-4096
 2000c44:	a8ea703a 	and	r21,r21,r3
 2000c48:	9009883a 	mov	r4,r18
 2000c4c:	a80b883a 	mov	r5,r21
 2000c50:	d9800015 	stw	r6,0(sp)
 2000c54:	200197c0 	call	200197c <_sbrk_r>
 2000c58:	00ffffc4 	movi	r3,-1
 2000c5c:	1029883a 	mov	r20,r2
 2000c60:	d9800017 	ldw	r6,0(sp)
 2000c64:	10c0a426 	beq	r2,r3,2000ef8 <_malloc_r+0x608>
 2000c68:	1180a236 	bltu	r2,r6,2000ef4 <_malloc_r+0x604>
 2000c6c:	07008074 	movhi	fp,513
 2000c70:	e7230c04 	addi	fp,fp,-29648
 2000c74:	e0c00017 	ldw	r3,0(fp)
 2000c78:	a8c7883a 	add	r3,r21,r3
 2000c7c:	e0c00015 	stw	r3,0(fp)
 2000c80:	3500da26 	beq	r6,r20,2000fec <_malloc_r+0x6fc>
 2000c84:	b9000017 	ldw	r4,0(r23)
 2000c88:	00bfffc4 	movi	r2,-1
 2000c8c:	2080e426 	beq	r4,r2,2001020 <_malloc_r+0x730>
 2000c90:	a185c83a 	sub	r2,r20,r6
 2000c94:	1885883a 	add	r2,r3,r2
 2000c98:	e0800015 	stw	r2,0(fp)
 2000c9c:	a0c001cc 	andi	r3,r20,7
 2000ca0:	1800b526 	beq	r3,zero,2000f78 <_malloc_r+0x688>
 2000ca4:	a0e9c83a 	sub	r20,r20,r3
 2000ca8:	00840204 	movi	r2,4104
 2000cac:	a5000204 	addi	r20,r20,8
 2000cb0:	10c7c83a 	sub	r3,r2,r3
 2000cb4:	a545883a 	add	r2,r20,r21
 2000cb8:	1083ffcc 	andi	r2,r2,4095
 2000cbc:	18abc83a 	sub	r21,r3,r2
 2000cc0:	9009883a 	mov	r4,r18
 2000cc4:	a80b883a 	mov	r5,r21
 2000cc8:	200197c0 	call	200197c <_sbrk_r>
 2000ccc:	00ffffc4 	movi	r3,-1
 2000cd0:	10c0d026 	beq	r2,r3,2001014 <_malloc_r+0x724>
 2000cd4:	1507c83a 	sub	r3,r2,r20
 2000cd8:	a8c7883a 	add	r3,r21,r3
 2000cdc:	18c00054 	ori	r3,r3,1
 2000ce0:	e0800017 	ldw	r2,0(fp)
 2000ce4:	9d000215 	stw	r20,8(r19)
 2000ce8:	a0c00115 	stw	r3,4(r20)
 2000cec:	a887883a 	add	r3,r21,r2
 2000cf0:	e0c00015 	stw	r3,0(fp)
 2000cf4:	84c00e26 	beq	r16,r19,2000d30 <_malloc_r+0x440>
 2000cf8:	018003c4 	movi	r6,15
 2000cfc:	3580a02e 	bgeu	r6,r22,2000f80 <_malloc_r+0x690>
 2000d00:	81400117 	ldw	r5,4(r16)
 2000d04:	013ffe04 	movi	r4,-8
 2000d08:	b0bffd04 	addi	r2,r22,-12
 2000d0c:	1104703a 	and	r2,r2,r4
 2000d10:	2900004c 	andi	r4,r5,1
 2000d14:	1108b03a 	or	r4,r2,r4
 2000d18:	81000115 	stw	r4,4(r16)
 2000d1c:	01400144 	movi	r5,5
 2000d20:	8089883a 	add	r4,r16,r2
 2000d24:	21400115 	stw	r5,4(r4)
 2000d28:	21400215 	stw	r5,8(r4)
 2000d2c:	3080c036 	bltu	r6,r2,2001030 <_malloc_r+0x740>
 2000d30:	00808074 	movhi	r2,513
 2000d34:	10a30204 	addi	r2,r2,-29688
 2000d38:	11000017 	ldw	r4,0(r2)
 2000d3c:	20c0012e 	bgeu	r4,r3,2000d44 <_malloc_r+0x454>
 2000d40:	10c00015 	stw	r3,0(r2)
 2000d44:	00808074 	movhi	r2,513
 2000d48:	10a30104 	addi	r2,r2,-29692
 2000d4c:	11000017 	ldw	r4,0(r2)
 2000d50:	9c000217 	ldw	r16,8(r19)
 2000d54:	20c0012e 	bgeu	r4,r3,2000d5c <_malloc_r+0x46c>
 2000d58:	10c00015 	stw	r3,0(r2)
 2000d5c:	80c00117 	ldw	r3,4(r16)
 2000d60:	00bfff04 	movi	r2,-4
 2000d64:	1886703a 	and	r3,r3,r2
 2000d68:	1c45c83a 	sub	r2,r3,r17
 2000d6c:	1c400236 	bltu	r3,r17,2000d78 <_malloc_r+0x488>
 2000d70:	00c003c4 	movi	r3,15
 2000d74:	18800416 	blt	r3,r2,2000d88 <_malloc_r+0x498>
 2000d78:	9009883a 	mov	r4,r18
 2000d7c:	20035880 	call	2003588 <__malloc_unlock>
 2000d80:	0005883a 	mov	r2,zero
 2000d84:	003f0706 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000d88:	88c00054 	ori	r3,r17,1
 2000d8c:	80c00115 	stw	r3,4(r16)
 2000d90:	8463883a 	add	r17,r16,r17
 2000d94:	10800054 	ori	r2,r2,1
 2000d98:	9c400215 	stw	r17,8(r19)
 2000d9c:	88800115 	stw	r2,4(r17)
 2000da0:	9009883a 	mov	r4,r18
 2000da4:	20035880 	call	2003588 <__malloc_unlock>
 2000da8:	80800204 	addi	r2,r16,8
 2000dac:	003efd06 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000db0:	00800504 	movi	r2,20
 2000db4:	10c0482e 	bgeu	r2,r3,2000ed8 <_malloc_r+0x5e8>
 2000db8:	00801504 	movi	r2,84
 2000dbc:	10c06836 	bltu	r2,r3,2000f60 <_malloc_r+0x670>
 2000dc0:	8806d33a 	srli	r3,r17,12
 2000dc4:	19c01b84 	addi	r7,r3,110
 2000dc8:	39cb883a 	add	r5,r7,r7
 2000dcc:	003f0c06 	br	2000a00 <__alt_mem_onchip_memory2_0+0xfdff0a00>
 2000dd0:	3804d27a 	srli	r2,r7,9
 2000dd4:	01000104 	movi	r4,4
 2000dd8:	2080422e 	bgeu	r4,r2,2000ee4 <_malloc_r+0x5f4>
 2000ddc:	01000504 	movi	r4,20
 2000de0:	20807c36 	bltu	r4,r2,2000fd4 <_malloc_r+0x6e4>
 2000de4:	110016c4 	addi	r4,r2,91
 2000de8:	210b883a 	add	r5,r4,r4
 2000dec:	294b883a 	add	r5,r5,r5
 2000df0:	294b883a 	add	r5,r5,r5
 2000df4:	994b883a 	add	r5,r19,r5
 2000df8:	28800217 	ldw	r2,8(r5)
 2000dfc:	02008034 	movhi	r8,512
 2000e00:	4216d404 	addi	r8,r8,23376
 2000e04:	11406326 	beq	r2,r5,2000f94 <_malloc_r+0x6a4>
 2000e08:	01bfff04 	movi	r6,-4
 2000e0c:	11000117 	ldw	r4,4(r2)
 2000e10:	2188703a 	and	r4,r4,r6
 2000e14:	3900022e 	bgeu	r7,r4,2000e20 <_malloc_r+0x530>
 2000e18:	10800217 	ldw	r2,8(r2)
 2000e1c:	28bffb1e 	bne	r5,r2,2000e0c <__alt_mem_onchip_memory2_0+0xfdff0e0c>
 2000e20:	11800317 	ldw	r6,12(r2)
 2000e24:	99000117 	ldw	r4,4(r19)
 2000e28:	81800315 	stw	r6,12(r16)
 2000e2c:	80800215 	stw	r2,8(r16)
 2000e30:	34000215 	stw	r16,8(r6)
 2000e34:	14000315 	stw	r16,12(r2)
 2000e38:	003f2706 	br	2000ad8 <__alt_mem_onchip_memory2_0+0xfdff0ad8>
 2000e3c:	88c00054 	ori	r3,r17,1
 2000e40:	80c00115 	stw	r3,4(r16)
 2000e44:	8463883a 	add	r17,r16,r17
 2000e48:	34400515 	stw	r17,20(r6)
 2000e4c:	34400415 	stw	r17,16(r6)
 2000e50:	10c00054 	ori	r3,r2,1
 2000e54:	8a400315 	stw	r9,12(r17)
 2000e58:	8a400215 	stw	r9,8(r17)
 2000e5c:	88c00115 	stw	r3,4(r17)
 2000e60:	88a3883a 	add	r17,r17,r2
 2000e64:	88800015 	stw	r2,0(r17)
 2000e68:	9009883a 	mov	r4,r18
 2000e6c:	20035880 	call	2003588 <__malloc_unlock>
 2000e70:	80800204 	addi	r2,r16,8
 2000e74:	003ecb06 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000e78:	31000117 	ldw	r4,4(r6)
 2000e7c:	003f1606 	br	2000ad8 <__alt_mem_onchip_memory2_0+0xfdff0ad8>
 2000e80:	63000044 	addi	r12,r12,1
 2000e84:	608000cc 	andi	r2,r12,3
 2000e88:	5ac00204 	addi	r11,r11,8
 2000e8c:	103f2a1e 	bne	r2,zero,2000b38 <__alt_mem_onchip_memory2_0+0xfdff0b38>
 2000e90:	00002106 	br	2000f18 <_malloc_r+0x628>
 2000e94:	80800204 	addi	r2,r16,8
 2000e98:	84000517 	ldw	r16,20(r16)
 2000e9c:	143eb31e 	bne	r2,r16,200096c <__alt_mem_onchip_memory2_0+0xfdff096c>
 2000ea0:	18c00084 	addi	r3,r3,2
 2000ea4:	003eec06 	br	2000a58 <__alt_mem_onchip_memory2_0+0xfdff0a58>
 2000ea8:	8085883a 	add	r2,r16,r2
 2000eac:	10c00117 	ldw	r3,4(r2)
 2000eb0:	81000317 	ldw	r4,12(r16)
 2000eb4:	81400217 	ldw	r5,8(r16)
 2000eb8:	18c00054 	ori	r3,r3,1
 2000ebc:	10c00115 	stw	r3,4(r2)
 2000ec0:	29000315 	stw	r4,12(r5)
 2000ec4:	21400215 	stw	r5,8(r4)
 2000ec8:	9009883a 	mov	r4,r18
 2000ecc:	20035880 	call	2003588 <__malloc_unlock>
 2000ed0:	80800204 	addi	r2,r16,8
 2000ed4:	003eb306 	br	20009a4 <__alt_mem_onchip_memory2_0+0xfdff09a4>
 2000ed8:	19c016c4 	addi	r7,r3,91
 2000edc:	39cb883a 	add	r5,r7,r7
 2000ee0:	003ec706 	br	2000a00 <__alt_mem_onchip_memory2_0+0xfdff0a00>
 2000ee4:	3804d1ba 	srli	r2,r7,6
 2000ee8:	11000e04 	addi	r4,r2,56
 2000eec:	210b883a 	add	r5,r4,r4
 2000ef0:	003fbe06 	br	2000dec <__alt_mem_onchip_memory2_0+0xfdff0dec>
 2000ef4:	84ff5d26 	beq	r16,r19,2000c6c <__alt_mem_onchip_memory2_0+0xfdff0c6c>
 2000ef8:	9c000217 	ldw	r16,8(r19)
 2000efc:	00bfff04 	movi	r2,-4
 2000f00:	80c00117 	ldw	r3,4(r16)
 2000f04:	1886703a 	and	r3,r3,r2
 2000f08:	003f9706 	br	2000d68 <__alt_mem_onchip_memory2_0+0xfdff0d68>
 2000f0c:	52800017 	ldw	r10,0(r10)
 2000f10:	18ffffc4 	addi	r3,r3,-1
 2000f14:	50805c1e 	bne	r10,r2,2001088 <_malloc_r+0x798>
 2000f18:	190000cc 	andi	r4,r3,3
 2000f1c:	50bffe04 	addi	r2,r10,-8
 2000f20:	203ffa1e 	bne	r4,zero,2000f0c <__alt_mem_onchip_memory2_0+0xfdff0f0c>
 2000f24:	98800117 	ldw	r2,4(r19)
 2000f28:	0146303a 	nor	r3,zero,r5
 2000f2c:	1884703a 	and	r2,r3,r2
 2000f30:	98800115 	stw	r2,4(r19)
 2000f34:	294b883a 	add	r5,r5,r5
 2000f38:	117f2e36 	bltu	r2,r5,2000bf4 <__alt_mem_onchip_memory2_0+0xfdff0bf4>
 2000f3c:	283f2d26 	beq	r5,zero,2000bf4 <__alt_mem_onchip_memory2_0+0xfdff0bf4>
 2000f40:	1146703a 	and	r3,r2,r5
 2000f44:	1800521e 	bne	r3,zero,2001090 <_malloc_r+0x7a0>
 2000f48:	6007883a 	mov	r3,r12
 2000f4c:	294b883a 	add	r5,r5,r5
 2000f50:	1148703a 	and	r4,r2,r5
 2000f54:	18c00104 	addi	r3,r3,4
 2000f58:	203ffc26 	beq	r4,zero,2000f4c <__alt_mem_onchip_memory2_0+0xfdff0f4c>
 2000f5c:	003ef006 	br	2000b20 <__alt_mem_onchip_memory2_0+0xfdff0b20>
 2000f60:	00805504 	movi	r2,340
 2000f64:	10c01336 	bltu	r2,r3,2000fb4 <_malloc_r+0x6c4>
 2000f68:	8806d3fa 	srli	r3,r17,15
 2000f6c:	19c01dc4 	addi	r7,r3,119
 2000f70:	39cb883a 	add	r5,r7,r7
 2000f74:	003ea206 	br	2000a00 <__alt_mem_onchip_memory2_0+0xfdff0a00>
 2000f78:	00c40004 	movi	r3,4096
 2000f7c:	003f4d06 	br	2000cb4 <__alt_mem_onchip_memory2_0+0xfdff0cb4>
 2000f80:	00800044 	movi	r2,1
 2000f84:	a0800115 	stw	r2,4(r20)
 2000f88:	a021883a 	mov	r16,r20
 2000f8c:	0007883a 	mov	r3,zero
 2000f90:	003f7506 	br	2000d68 <__alt_mem_onchip_memory2_0+0xfdff0d68>
 2000f94:	200bd0ba 	srai	r5,r4,2
 2000f98:	01800044 	movi	r6,1
 2000f9c:	41000117 	ldw	r4,4(r8)
 2000fa0:	314a983a 	sll	r5,r6,r5
 2000fa4:	100d883a 	mov	r6,r2
 2000fa8:	2908b03a 	or	r4,r5,r4
 2000fac:	41000115 	stw	r4,4(r8)
 2000fb0:	003f9d06 	br	2000e28 <__alt_mem_onchip_memory2_0+0xfdff0e28>
 2000fb4:	00815504 	movi	r2,1364
 2000fb8:	10c01336 	bltu	r2,r3,2001008 <_malloc_r+0x718>
 2000fbc:	8806d4ba 	srli	r3,r17,18
 2000fc0:	19c01f04 	addi	r7,r3,124
 2000fc4:	39cb883a 	add	r5,r7,r7
 2000fc8:	003e8d06 	br	2000a00 <__alt_mem_onchip_memory2_0+0xfdff0a00>
 2000fcc:	ad400404 	addi	r21,r21,16
 2000fd0:	003f1d06 	br	2000c48 <__alt_mem_onchip_memory2_0+0xfdff0c48>
 2000fd4:	01001504 	movi	r4,84
 2000fd8:	20801c36 	bltu	r4,r2,200104c <_malloc_r+0x75c>
 2000fdc:	3804d33a 	srli	r2,r7,12
 2000fe0:	11001b84 	addi	r4,r2,110
 2000fe4:	210b883a 	add	r5,r4,r4
 2000fe8:	003f8006 	br	2000dec <__alt_mem_onchip_memory2_0+0xfdff0dec>
 2000fec:	3083ffcc 	andi	r2,r6,4095
 2000ff0:	103f241e 	bne	r2,zero,2000c84 <__alt_mem_onchip_memory2_0+0xfdff0c84>
 2000ff4:	99000217 	ldw	r4,8(r19)
 2000ff8:	ad85883a 	add	r2,r21,r22
 2000ffc:	10800054 	ori	r2,r2,1
 2001000:	20800115 	stw	r2,4(r4)
 2001004:	003f4a06 	br	2000d30 <__alt_mem_onchip_memory2_0+0xfdff0d30>
 2001008:	01403f04 	movi	r5,252
 200100c:	01c01f84 	movi	r7,126
 2001010:	003e7b06 	br	2000a00 <__alt_mem_onchip_memory2_0+0xfdff0a00>
 2001014:	00c00044 	movi	r3,1
 2001018:	002b883a 	mov	r21,zero
 200101c:	003f3006 	br	2000ce0 <__alt_mem_onchip_memory2_0+0xfdff0ce0>
 2001020:	00808034 	movhi	r2,512
 2001024:	109c5a04 	addi	r2,r2,29032
 2001028:	15000015 	stw	r20,0(r2)
 200102c:	003f1b06 	br	2000c9c <__alt_mem_onchip_memory2_0+0xfdff0c9c>
 2001030:	9009883a 	mov	r4,r18
 2001034:	81400204 	addi	r5,r16,8
 2001038:	200228c0 	call	200228c <_free_r>
 200103c:	00808074 	movhi	r2,513
 2001040:	10a30c04 	addi	r2,r2,-29648
 2001044:	10c00017 	ldw	r3,0(r2)
 2001048:	003f3906 	br	2000d30 <__alt_mem_onchip_memory2_0+0xfdff0d30>
 200104c:	01005504 	movi	r4,340
 2001050:	20800436 	bltu	r4,r2,2001064 <_malloc_r+0x774>
 2001054:	3804d3fa 	srli	r2,r7,15
 2001058:	11001dc4 	addi	r4,r2,119
 200105c:	210b883a 	add	r5,r4,r4
 2001060:	003f6206 	br	2000dec <__alt_mem_onchip_memory2_0+0xfdff0dec>
 2001064:	01015504 	movi	r4,1364
 2001068:	20800436 	bltu	r4,r2,200107c <_malloc_r+0x78c>
 200106c:	3804d4ba 	srli	r2,r7,18
 2001070:	11001f04 	addi	r4,r2,124
 2001074:	210b883a 	add	r5,r4,r4
 2001078:	003f5c06 	br	2000dec <__alt_mem_onchip_memory2_0+0xfdff0dec>
 200107c:	01403f04 	movi	r5,252
 2001080:	01001f84 	movi	r4,126
 2001084:	003f5906 	br	2000dec <__alt_mem_onchip_memory2_0+0xfdff0dec>
 2001088:	98800117 	ldw	r2,4(r19)
 200108c:	003fa906 	br	2000f34 <__alt_mem_onchip_memory2_0+0xfdff0f34>
 2001090:	6007883a 	mov	r3,r12
 2001094:	003ea206 	br	2000b20 <__alt_mem_onchip_memory2_0+0xfdff0b20>

02001098 <memchr>:
 2001098:	208000cc 	andi	r2,r4,3
 200109c:	280f883a 	mov	r7,r5
 20010a0:	10003526 	beq	r2,zero,2001178 <memchr+0xe0>
 20010a4:	30bfffc4 	addi	r2,r6,-1
 20010a8:	30001b26 	beq	r6,zero,2001118 <memchr+0x80>
 20010ac:	21800003 	ldbu	r6,0(r4)
 20010b0:	28c03fcc 	andi	r3,r5,255
 20010b4:	30c01a26 	beq	r6,r3,2001120 <memchr+0x88>
 20010b8:	180d883a 	mov	r6,r3
 20010bc:	00000406 	br	20010d0 <memchr+0x38>
 20010c0:	10001526 	beq	r2,zero,2001118 <memchr+0x80>
 20010c4:	20c00003 	ldbu	r3,0(r4)
 20010c8:	10bfffc4 	addi	r2,r2,-1
 20010cc:	19801426 	beq	r3,r6,2001120 <memchr+0x88>
 20010d0:	21000044 	addi	r4,r4,1
 20010d4:	20c000cc 	andi	r3,r4,3
 20010d8:	183ff91e 	bne	r3,zero,20010c0 <__alt_mem_onchip_memory2_0+0xfdff10c0>
 20010dc:	024000c4 	movi	r9,3
 20010e0:	48801136 	bltu	r9,r2,2001128 <memchr+0x90>
 20010e4:	10000c26 	beq	r2,zero,2001118 <memchr+0x80>
 20010e8:	20c00003 	ldbu	r3,0(r4)
 20010ec:	29403fcc 	andi	r5,r5,255
 20010f0:	19400b26 	beq	r3,r5,2001120 <memchr+0x88>
 20010f4:	20c00044 	addi	r3,r4,1
 20010f8:	2085883a 	add	r2,r4,r2
 20010fc:	39803fcc 	andi	r6,r7,255
 2001100:	00000306 	br	2001110 <memchr+0x78>
 2001104:	18c00044 	addi	r3,r3,1
 2001108:	197fffc3 	ldbu	r5,-1(r3)
 200110c:	29800426 	beq	r5,r6,2001120 <memchr+0x88>
 2001110:	1809883a 	mov	r4,r3
 2001114:	18bffb1e 	bne	r3,r2,2001104 <__alt_mem_onchip_memory2_0+0xfdff1104>
 2001118:	0005883a 	mov	r2,zero
 200111c:	f800283a 	ret
 2001120:	2005883a 	mov	r2,r4
 2001124:	f800283a 	ret
 2001128:	28c03fcc 	andi	r3,r5,255
 200112c:	1810923a 	slli	r8,r3,8
 2001130:	02ffbff4 	movhi	r11,65279
 2001134:	02a02074 	movhi	r10,32897
 2001138:	40c6b03a 	or	r3,r8,r3
 200113c:	1810943a 	slli	r8,r3,16
 2001140:	5affbfc4 	addi	r11,r11,-257
 2001144:	52a02004 	addi	r10,r10,-32640
 2001148:	40d0b03a 	or	r8,r8,r3
 200114c:	20c00017 	ldw	r3,0(r4)
 2001150:	40c6f03a 	xor	r3,r8,r3
 2001154:	1acd883a 	add	r6,r3,r11
 2001158:	00c6303a 	nor	r3,zero,r3
 200115c:	30c6703a 	and	r3,r6,r3
 2001160:	1a86703a 	and	r3,r3,r10
 2001164:	183fdf1e 	bne	r3,zero,20010e4 <__alt_mem_onchip_memory2_0+0xfdff10e4>
 2001168:	10bfff04 	addi	r2,r2,-4
 200116c:	21000104 	addi	r4,r4,4
 2001170:	48bff636 	bltu	r9,r2,200114c <__alt_mem_onchip_memory2_0+0xfdff114c>
 2001174:	003fdb06 	br	20010e4 <__alt_mem_onchip_memory2_0+0xfdff10e4>
 2001178:	3005883a 	mov	r2,r6
 200117c:	003fd706 	br	20010dc <__alt_mem_onchip_memory2_0+0xfdff10dc>

02001180 <memcpy>:
 2001180:	deffff04 	addi	sp,sp,-4
 2001184:	dc000015 	stw	r16,0(sp)
 2001188:	00c003c4 	movi	r3,15
 200118c:	2005883a 	mov	r2,r4
 2001190:	1980432e 	bgeu	r3,r6,20012a0 <memcpy+0x120>
 2001194:	2146b03a 	or	r3,r4,r5
 2001198:	18c000cc 	andi	r3,r3,3
 200119c:	1800421e 	bne	r3,zero,20012a8 <memcpy+0x128>
 20011a0:	343ffc04 	addi	r16,r6,-16
 20011a4:	8020d13a 	srli	r16,r16,4
 20011a8:	28c00104 	addi	r3,r5,4
 20011ac:	23400104 	addi	r13,r4,4
 20011b0:	801e913a 	slli	r15,r16,4
 20011b4:	2b000204 	addi	r12,r5,8
 20011b8:	22c00204 	addi	r11,r4,8
 20011bc:	7bc00504 	addi	r15,r15,20
 20011c0:	2a800304 	addi	r10,r5,12
 20011c4:	22400304 	addi	r9,r4,12
 20011c8:	2bdf883a 	add	r15,r5,r15
 20011cc:	2811883a 	mov	r8,r5
 20011d0:	200f883a 	mov	r7,r4
 20011d4:	41000017 	ldw	r4,0(r8)
 20011d8:	39c00404 	addi	r7,r7,16
 20011dc:	18c00404 	addi	r3,r3,16
 20011e0:	393ffc15 	stw	r4,-16(r7)
 20011e4:	1bbffc17 	ldw	r14,-16(r3)
 20011e8:	6b400404 	addi	r13,r13,16
 20011ec:	5ac00404 	addi	r11,r11,16
 20011f0:	6bbffc15 	stw	r14,-16(r13)
 20011f4:	63800017 	ldw	r14,0(r12)
 20011f8:	4a400404 	addi	r9,r9,16
 20011fc:	42000404 	addi	r8,r8,16
 2001200:	5bbffc15 	stw	r14,-16(r11)
 2001204:	53800017 	ldw	r14,0(r10)
 2001208:	63000404 	addi	r12,r12,16
 200120c:	52800404 	addi	r10,r10,16
 2001210:	4bbffc15 	stw	r14,-16(r9)
 2001214:	1bffef1e 	bne	r3,r15,20011d4 <__alt_mem_onchip_memory2_0+0xfdff11d4>
 2001218:	81c00044 	addi	r7,r16,1
 200121c:	380e913a 	slli	r7,r7,4
 2001220:	310003cc 	andi	r4,r6,15
 2001224:	02c000c4 	movi	r11,3
 2001228:	11c7883a 	add	r3,r2,r7
 200122c:	29cb883a 	add	r5,r5,r7
 2001230:	59001f2e 	bgeu	r11,r4,20012b0 <memcpy+0x130>
 2001234:	1813883a 	mov	r9,r3
 2001238:	2811883a 	mov	r8,r5
 200123c:	200f883a 	mov	r7,r4
 2001240:	42800017 	ldw	r10,0(r8)
 2001244:	4a400104 	addi	r9,r9,4
 2001248:	39ffff04 	addi	r7,r7,-4
 200124c:	4abfff15 	stw	r10,-4(r9)
 2001250:	42000104 	addi	r8,r8,4
 2001254:	59fffa36 	bltu	r11,r7,2001240 <__alt_mem_onchip_memory2_0+0xfdff1240>
 2001258:	213fff04 	addi	r4,r4,-4
 200125c:	2008d0ba 	srli	r4,r4,2
 2001260:	318000cc 	andi	r6,r6,3
 2001264:	21000044 	addi	r4,r4,1
 2001268:	2109883a 	add	r4,r4,r4
 200126c:	2109883a 	add	r4,r4,r4
 2001270:	1907883a 	add	r3,r3,r4
 2001274:	290b883a 	add	r5,r5,r4
 2001278:	30000626 	beq	r6,zero,2001294 <memcpy+0x114>
 200127c:	198d883a 	add	r6,r3,r6
 2001280:	29c00003 	ldbu	r7,0(r5)
 2001284:	18c00044 	addi	r3,r3,1
 2001288:	29400044 	addi	r5,r5,1
 200128c:	19ffffc5 	stb	r7,-1(r3)
 2001290:	19bffb1e 	bne	r3,r6,2001280 <__alt_mem_onchip_memory2_0+0xfdff1280>
 2001294:	dc000017 	ldw	r16,0(sp)
 2001298:	dec00104 	addi	sp,sp,4
 200129c:	f800283a 	ret
 20012a0:	2007883a 	mov	r3,r4
 20012a4:	003ff406 	br	2001278 <__alt_mem_onchip_memory2_0+0xfdff1278>
 20012a8:	2007883a 	mov	r3,r4
 20012ac:	003ff306 	br	200127c <__alt_mem_onchip_memory2_0+0xfdff127c>
 20012b0:	200d883a 	mov	r6,r4
 20012b4:	003ff006 	br	2001278 <__alt_mem_onchip_memory2_0+0xfdff1278>

020012b8 <memmove>:
 20012b8:	2005883a 	mov	r2,r4
 20012bc:	29000b2e 	bgeu	r5,r4,20012ec <memmove+0x34>
 20012c0:	298f883a 	add	r7,r5,r6
 20012c4:	21c0092e 	bgeu	r4,r7,20012ec <memmove+0x34>
 20012c8:	2187883a 	add	r3,r4,r6
 20012cc:	198bc83a 	sub	r5,r3,r6
 20012d0:	30004b26 	beq	r6,zero,2001400 <memmove+0x148>
 20012d4:	39ffffc4 	addi	r7,r7,-1
 20012d8:	39000003 	ldbu	r4,0(r7)
 20012dc:	18ffffc4 	addi	r3,r3,-1
 20012e0:	19000005 	stb	r4,0(r3)
 20012e4:	197ffb1e 	bne	r3,r5,20012d4 <__alt_mem_onchip_memory2_0+0xfdff12d4>
 20012e8:	f800283a 	ret
 20012ec:	00c003c4 	movi	r3,15
 20012f0:	1980412e 	bgeu	r3,r6,20013f8 <memmove+0x140>
 20012f4:	1146b03a 	or	r3,r2,r5
 20012f8:	18c000cc 	andi	r3,r3,3
 20012fc:	1800411e 	bne	r3,zero,2001404 <memmove+0x14c>
 2001300:	33fffc04 	addi	r15,r6,-16
 2001304:	781ed13a 	srli	r15,r15,4
 2001308:	28c00104 	addi	r3,r5,4
 200130c:	13400104 	addi	r13,r2,4
 2001310:	781c913a 	slli	r14,r15,4
 2001314:	2b000204 	addi	r12,r5,8
 2001318:	12c00204 	addi	r11,r2,8
 200131c:	73800504 	addi	r14,r14,20
 2001320:	2a800304 	addi	r10,r5,12
 2001324:	12400304 	addi	r9,r2,12
 2001328:	2b9d883a 	add	r14,r5,r14
 200132c:	2811883a 	mov	r8,r5
 2001330:	100f883a 	mov	r7,r2
 2001334:	41000017 	ldw	r4,0(r8)
 2001338:	39c00404 	addi	r7,r7,16
 200133c:	18c00404 	addi	r3,r3,16
 2001340:	393ffc15 	stw	r4,-16(r7)
 2001344:	193ffc17 	ldw	r4,-16(r3)
 2001348:	6b400404 	addi	r13,r13,16
 200134c:	5ac00404 	addi	r11,r11,16
 2001350:	693ffc15 	stw	r4,-16(r13)
 2001354:	61000017 	ldw	r4,0(r12)
 2001358:	4a400404 	addi	r9,r9,16
 200135c:	42000404 	addi	r8,r8,16
 2001360:	593ffc15 	stw	r4,-16(r11)
 2001364:	51000017 	ldw	r4,0(r10)
 2001368:	63000404 	addi	r12,r12,16
 200136c:	52800404 	addi	r10,r10,16
 2001370:	493ffc15 	stw	r4,-16(r9)
 2001374:	1bbfef1e 	bne	r3,r14,2001334 <__alt_mem_onchip_memory2_0+0xfdff1334>
 2001378:	79000044 	addi	r4,r15,1
 200137c:	2008913a 	slli	r4,r4,4
 2001380:	328003cc 	andi	r10,r6,15
 2001384:	02c000c4 	movi	r11,3
 2001388:	1107883a 	add	r3,r2,r4
 200138c:	290b883a 	add	r5,r5,r4
 2001390:	5a801e2e 	bgeu	r11,r10,200140c <memmove+0x154>
 2001394:	1813883a 	mov	r9,r3
 2001398:	2811883a 	mov	r8,r5
 200139c:	500f883a 	mov	r7,r10
 20013a0:	41000017 	ldw	r4,0(r8)
 20013a4:	4a400104 	addi	r9,r9,4
 20013a8:	39ffff04 	addi	r7,r7,-4
 20013ac:	493fff15 	stw	r4,-4(r9)
 20013b0:	42000104 	addi	r8,r8,4
 20013b4:	59fffa36 	bltu	r11,r7,20013a0 <__alt_mem_onchip_memory2_0+0xfdff13a0>
 20013b8:	513fff04 	addi	r4,r10,-4
 20013bc:	2008d0ba 	srli	r4,r4,2
 20013c0:	318000cc 	andi	r6,r6,3
 20013c4:	21000044 	addi	r4,r4,1
 20013c8:	2109883a 	add	r4,r4,r4
 20013cc:	2109883a 	add	r4,r4,r4
 20013d0:	1907883a 	add	r3,r3,r4
 20013d4:	290b883a 	add	r5,r5,r4
 20013d8:	30000926 	beq	r6,zero,2001400 <memmove+0x148>
 20013dc:	198d883a 	add	r6,r3,r6
 20013e0:	29c00003 	ldbu	r7,0(r5)
 20013e4:	18c00044 	addi	r3,r3,1
 20013e8:	29400044 	addi	r5,r5,1
 20013ec:	19ffffc5 	stb	r7,-1(r3)
 20013f0:	19bffb1e 	bne	r3,r6,20013e0 <__alt_mem_onchip_memory2_0+0xfdff13e0>
 20013f4:	f800283a 	ret
 20013f8:	1007883a 	mov	r3,r2
 20013fc:	003ff606 	br	20013d8 <__alt_mem_onchip_memory2_0+0xfdff13d8>
 2001400:	f800283a 	ret
 2001404:	1007883a 	mov	r3,r2
 2001408:	003ff406 	br	20013dc <__alt_mem_onchip_memory2_0+0xfdff13dc>
 200140c:	500d883a 	mov	r6,r10
 2001410:	003ff106 	br	20013d8 <__alt_mem_onchip_memory2_0+0xfdff13d8>

02001414 <_realloc_r>:
 2001414:	defff604 	addi	sp,sp,-40
 2001418:	dd000415 	stw	r20,16(sp)
 200141c:	dc400115 	stw	r17,4(sp)
 2001420:	dfc00915 	stw	ra,36(sp)
 2001424:	df000815 	stw	fp,32(sp)
 2001428:	ddc00715 	stw	r23,28(sp)
 200142c:	dd800615 	stw	r22,24(sp)
 2001430:	dd400515 	stw	r21,20(sp)
 2001434:	dcc00315 	stw	r19,12(sp)
 2001438:	dc800215 	stw	r18,8(sp)
 200143c:	dc000015 	stw	r16,0(sp)
 2001440:	2829883a 	mov	r20,r5
 2001444:	3023883a 	mov	r17,r6
 2001448:	2800ad26 	beq	r5,zero,2001700 <_realloc_r+0x2ec>
 200144c:	2025883a 	mov	r18,r4
 2001450:	20035680 	call	2003568 <__malloc_lock>
 2001454:	a0ffff17 	ldw	r3,-4(r20)
 2001458:	043fff04 	movi	r16,-4
 200145c:	890002c4 	addi	r4,r17,11
 2001460:	01c00584 	movi	r7,22
 2001464:	a57ffe04 	addi	r21,r20,-8
 2001468:	1c20703a 	and	r16,r3,r16
 200146c:	39001d2e 	bgeu	r7,r4,20014e4 <_realloc_r+0xd0>
 2001470:	05bffe04 	movi	r22,-8
 2001474:	25ac703a 	and	r22,r4,r22
 2001478:	b00f883a 	mov	r7,r22
 200147c:	b0006516 	blt	r22,zero,2001614 <_realloc_r+0x200>
 2001480:	b4406436 	bltu	r22,r17,2001614 <_realloc_r+0x200>
 2001484:	81c01a0e 	bge	r16,r7,20014f0 <_realloc_r+0xdc>
 2001488:	07008034 	movhi	fp,512
 200148c:	e716d404 	addi	fp,fp,23376
 2001490:	e1400217 	ldw	r5,8(fp)
 2001494:	ac11883a 	add	r8,r21,r16
 2001498:	2a006226 	beq	r5,r8,2001624 <_realloc_r+0x210>
 200149c:	41800117 	ldw	r6,4(r8)
 20014a0:	027fff84 	movi	r9,-2
 20014a4:	3252703a 	and	r9,r6,r9
 20014a8:	4253883a 	add	r9,r8,r9
 20014ac:	49000117 	ldw	r4,4(r9)
 20014b0:	2100004c 	andi	r4,r4,1
 20014b4:	2000281e 	bne	r4,zero,2001558 <_realloc_r+0x144>
 20014b8:	00bfff04 	movi	r2,-4
 20014bc:	3084703a 	and	r2,r6,r2
 20014c0:	1409883a 	add	r4,r2,r16
 20014c4:	21c05e16 	blt	r4,r7,2001640 <_realloc_r+0x22c>
 20014c8:	40800317 	ldw	r2,12(r8)
 20014cc:	41400217 	ldw	r5,8(r8)
 20014d0:	a023883a 	mov	r17,r20
 20014d4:	2021883a 	mov	r16,r4
 20014d8:	28800315 	stw	r2,12(r5)
 20014dc:	11400215 	stw	r5,8(r2)
 20014e0:	00000406 	br	20014f4 <_realloc_r+0xe0>
 20014e4:	01c00404 	movi	r7,16
 20014e8:	382d883a 	mov	r22,r7
 20014ec:	003fe406 	br	2001480 <__alt_mem_onchip_memory2_0+0xfdff1480>
 20014f0:	a023883a 	mov	r17,r20
 20014f4:	858fc83a 	sub	r7,r16,r22
 20014f8:	008003c4 	movi	r2,15
 20014fc:	18c0004c 	andi	r3,r3,1
 2001500:	11c07236 	bltu	r2,r7,20016cc <_realloc_r+0x2b8>
 2001504:	1c06b03a 	or	r3,r3,r16
 2001508:	a8c00115 	stw	r3,4(r21)
 200150c:	ac21883a 	add	r16,r21,r16
 2001510:	80800117 	ldw	r2,4(r16)
 2001514:	10800054 	ori	r2,r2,1
 2001518:	80800115 	stw	r2,4(r16)
 200151c:	9009883a 	mov	r4,r18
 2001520:	20035880 	call	2003588 <__malloc_unlock>
 2001524:	8805883a 	mov	r2,r17
 2001528:	dfc00917 	ldw	ra,36(sp)
 200152c:	df000817 	ldw	fp,32(sp)
 2001530:	ddc00717 	ldw	r23,28(sp)
 2001534:	dd800617 	ldw	r22,24(sp)
 2001538:	dd400517 	ldw	r21,20(sp)
 200153c:	dd000417 	ldw	r20,16(sp)
 2001540:	dcc00317 	ldw	r19,12(sp)
 2001544:	dc800217 	ldw	r18,8(sp)
 2001548:	dc400117 	ldw	r17,4(sp)
 200154c:	dc000017 	ldw	r16,0(sp)
 2001550:	dec00a04 	addi	sp,sp,40
 2001554:	f800283a 	ret
 2001558:	18c0004c 	andi	r3,r3,1
 200155c:	1800081e 	bne	r3,zero,2001580 <_realloc_r+0x16c>
 2001560:	a4fffe17 	ldw	r19,-8(r20)
 2001564:	00bfff04 	movi	r2,-4
 2001568:	ace7c83a 	sub	r19,r21,r19
 200156c:	98c00117 	ldw	r3,4(r19)
 2001570:	1886703a 	and	r3,r3,r2
 2001574:	98000226 	beq	r19,zero,2001580 <_realloc_r+0x16c>
 2001578:	1c2f883a 	add	r23,r3,r16
 200157c:	b9c06d0e 	bge	r23,r7,2001734 <_realloc_r+0x320>
 2001580:	880b883a 	mov	r5,r17
 2001584:	9009883a 	mov	r4,r18
 2001588:	20008f00 	call	20008f0 <_malloc_r>
 200158c:	1023883a 	mov	r17,r2
 2001590:	1000ef26 	beq	r2,zero,2001950 <_realloc_r+0x53c>
 2001594:	a0ffff17 	ldw	r3,-4(r20)
 2001598:	113ffe04 	addi	r4,r2,-8
 200159c:	00bfff84 	movi	r2,-2
 20015a0:	1884703a 	and	r2,r3,r2
 20015a4:	a885883a 	add	r2,r21,r2
 20015a8:	2080bf26 	beq	r4,r2,20018a8 <_realloc_r+0x494>
 20015ac:	81bfff04 	addi	r6,r16,-4
 20015b0:	00800904 	movi	r2,36
 20015b4:	11808936 	bltu	r2,r6,20017dc <_realloc_r+0x3c8>
 20015b8:	00c004c4 	movi	r3,19
 20015bc:	19806c2e 	bgeu	r3,r6,2001770 <_realloc_r+0x35c>
 20015c0:	a0c00017 	ldw	r3,0(r20)
 20015c4:	88c00015 	stw	r3,0(r17)
 20015c8:	a0c00117 	ldw	r3,4(r20)
 20015cc:	88c00115 	stw	r3,4(r17)
 20015d0:	00c006c4 	movi	r3,27
 20015d4:	1980ac36 	bltu	r3,r6,2001888 <_realloc_r+0x474>
 20015d8:	88800204 	addi	r2,r17,8
 20015dc:	a0c00204 	addi	r3,r20,8
 20015e0:	19000017 	ldw	r4,0(r3)
 20015e4:	11000015 	stw	r4,0(r2)
 20015e8:	19000117 	ldw	r4,4(r3)
 20015ec:	11000115 	stw	r4,4(r2)
 20015f0:	18c00217 	ldw	r3,8(r3)
 20015f4:	10c00215 	stw	r3,8(r2)
 20015f8:	a00b883a 	mov	r5,r20
 20015fc:	9009883a 	mov	r4,r18
 2001600:	200228c0 	call	200228c <_free_r>
 2001604:	9009883a 	mov	r4,r18
 2001608:	20035880 	call	2003588 <__malloc_unlock>
 200160c:	8805883a 	mov	r2,r17
 2001610:	003fc506 	br	2001528 <__alt_mem_onchip_memory2_0+0xfdff1528>
 2001614:	00800304 	movi	r2,12
 2001618:	90800015 	stw	r2,0(r18)
 200161c:	0005883a 	mov	r2,zero
 2001620:	003fc106 	br	2001528 <__alt_mem_onchip_memory2_0+0xfdff1528>
 2001624:	29800117 	ldw	r6,4(r5)
 2001628:	00bfff04 	movi	r2,-4
 200162c:	b1000404 	addi	r4,r22,16
 2001630:	3084703a 	and	r2,r6,r2
 2001634:	140d883a 	add	r6,r2,r16
 2001638:	31005b0e 	bge	r6,r4,20017a8 <_realloc_r+0x394>
 200163c:	2811883a 	mov	r8,r5
 2001640:	18c0004c 	andi	r3,r3,1
 2001644:	183fce1e 	bne	r3,zero,2001580 <__alt_mem_onchip_memory2_0+0xfdff1580>
 2001648:	a4fffe17 	ldw	r19,-8(r20)
 200164c:	00ffff04 	movi	r3,-4
 2001650:	ace7c83a 	sub	r19,r21,r19
 2001654:	99000117 	ldw	r4,4(r19)
 2001658:	20c6703a 	and	r3,r4,r3
 200165c:	403fc526 	beq	r8,zero,2001574 <__alt_mem_onchip_memory2_0+0xfdff1574>
 2001660:	1c2f883a 	add	r23,r3,r16
 2001664:	b8af883a 	add	r23,r23,r2
 2001668:	41406026 	beq	r8,r5,20017ec <_realloc_r+0x3d8>
 200166c:	b9ffc116 	blt	r23,r7,2001574 <__alt_mem_onchip_memory2_0+0xfdff1574>
 2001670:	40c00217 	ldw	r3,8(r8)
 2001674:	40800317 	ldw	r2,12(r8)
 2001678:	81bfff04 	addi	r6,r16,-4
 200167c:	01000904 	movi	r4,36
 2001680:	18800315 	stw	r2,12(r3)
 2001684:	10c00215 	stw	r3,8(r2)
 2001688:	99400217 	ldw	r5,8(r19)
 200168c:	98c00317 	ldw	r3,12(r19)
 2001690:	9c400204 	addi	r17,r19,8
 2001694:	28c00315 	stw	r3,12(r5)
 2001698:	19400215 	stw	r5,8(r3)
 200169c:	21802d36 	bltu	r4,r6,2001754 <_realloc_r+0x340>
 20016a0:	008004c4 	movi	r2,19
 20016a4:	1180352e 	bgeu	r2,r6,200177c <_realloc_r+0x368>
 20016a8:	a0800017 	ldw	r2,0(r20)
 20016ac:	98800215 	stw	r2,8(r19)
 20016b0:	a0800117 	ldw	r2,4(r20)
 20016b4:	98800315 	stw	r2,12(r19)
 20016b8:	008006c4 	movi	r2,27
 20016bc:	11808036 	bltu	r2,r6,20018c0 <_realloc_r+0x4ac>
 20016c0:	98c00404 	addi	r3,r19,16
 20016c4:	a5000204 	addi	r20,r20,8
 20016c8:	00002d06 	br	2001780 <_realloc_r+0x36c>
 20016cc:	1d86b03a 	or	r3,r3,r22
 20016d0:	ad8b883a 	add	r5,r21,r22
 20016d4:	a8c00115 	stw	r3,4(r21)
 20016d8:	38800054 	ori	r2,r7,1
 20016dc:	28800115 	stw	r2,4(r5)
 20016e0:	29cf883a 	add	r7,r5,r7
 20016e4:	38800117 	ldw	r2,4(r7)
 20016e8:	9009883a 	mov	r4,r18
 20016ec:	29400204 	addi	r5,r5,8
 20016f0:	10800054 	ori	r2,r2,1
 20016f4:	38800115 	stw	r2,4(r7)
 20016f8:	200228c0 	call	200228c <_free_r>
 20016fc:	003f8706 	br	200151c <__alt_mem_onchip_memory2_0+0xfdff151c>
 2001700:	300b883a 	mov	r5,r6
 2001704:	dfc00917 	ldw	ra,36(sp)
 2001708:	df000817 	ldw	fp,32(sp)
 200170c:	ddc00717 	ldw	r23,28(sp)
 2001710:	dd800617 	ldw	r22,24(sp)
 2001714:	dd400517 	ldw	r21,20(sp)
 2001718:	dd000417 	ldw	r20,16(sp)
 200171c:	dcc00317 	ldw	r19,12(sp)
 2001720:	dc800217 	ldw	r18,8(sp)
 2001724:	dc400117 	ldw	r17,4(sp)
 2001728:	dc000017 	ldw	r16,0(sp)
 200172c:	dec00a04 	addi	sp,sp,40
 2001730:	20008f01 	jmpi	20008f0 <_malloc_r>
 2001734:	98800317 	ldw	r2,12(r19)
 2001738:	98c00217 	ldw	r3,8(r19)
 200173c:	81bfff04 	addi	r6,r16,-4
 2001740:	01000904 	movi	r4,36
 2001744:	18800315 	stw	r2,12(r3)
 2001748:	10c00215 	stw	r3,8(r2)
 200174c:	9c400204 	addi	r17,r19,8
 2001750:	21bfd32e 	bgeu	r4,r6,20016a0 <__alt_mem_onchip_memory2_0+0xfdff16a0>
 2001754:	8809883a 	mov	r4,r17
 2001758:	a00b883a 	mov	r5,r20
 200175c:	20012b80 	call	20012b8 <memmove>
 2001760:	98c00117 	ldw	r3,4(r19)
 2001764:	b821883a 	mov	r16,r23
 2001768:	982b883a 	mov	r21,r19
 200176c:	003f6106 	br	20014f4 <__alt_mem_onchip_memory2_0+0xfdff14f4>
 2001770:	8805883a 	mov	r2,r17
 2001774:	a007883a 	mov	r3,r20
 2001778:	003f9906 	br	20015e0 <__alt_mem_onchip_memory2_0+0xfdff15e0>
 200177c:	8807883a 	mov	r3,r17
 2001780:	a0800017 	ldw	r2,0(r20)
 2001784:	b821883a 	mov	r16,r23
 2001788:	982b883a 	mov	r21,r19
 200178c:	18800015 	stw	r2,0(r3)
 2001790:	a0800117 	ldw	r2,4(r20)
 2001794:	18800115 	stw	r2,4(r3)
 2001798:	a0800217 	ldw	r2,8(r20)
 200179c:	18800215 	stw	r2,8(r3)
 20017a0:	98c00117 	ldw	r3,4(r19)
 20017a4:	003f5306 	br	20014f4 <__alt_mem_onchip_memory2_0+0xfdff14f4>
 20017a8:	adab883a 	add	r21,r21,r22
 20017ac:	3585c83a 	sub	r2,r6,r22
 20017b0:	e5400215 	stw	r21,8(fp)
 20017b4:	10800054 	ori	r2,r2,1
 20017b8:	a8800115 	stw	r2,4(r21)
 20017bc:	a0bfff17 	ldw	r2,-4(r20)
 20017c0:	9009883a 	mov	r4,r18
 20017c4:	1080004c 	andi	r2,r2,1
 20017c8:	b0acb03a 	or	r22,r22,r2
 20017cc:	a5bfff15 	stw	r22,-4(r20)
 20017d0:	20035880 	call	2003588 <__malloc_unlock>
 20017d4:	a005883a 	mov	r2,r20
 20017d8:	003f5306 	br	2001528 <__alt_mem_onchip_memory2_0+0xfdff1528>
 20017dc:	8809883a 	mov	r4,r17
 20017e0:	a00b883a 	mov	r5,r20
 20017e4:	20012b80 	call	20012b8 <memmove>
 20017e8:	003f8306 	br	20015f8 <__alt_mem_onchip_memory2_0+0xfdff15f8>
 20017ec:	b0800404 	addi	r2,r22,16
 20017f0:	b8bf6016 	blt	r23,r2,2001574 <__alt_mem_onchip_memory2_0+0xfdff1574>
 20017f4:	98800317 	ldw	r2,12(r19)
 20017f8:	98c00217 	ldw	r3,8(r19)
 20017fc:	81bfff04 	addi	r6,r16,-4
 2001800:	01000904 	movi	r4,36
 2001804:	18800315 	stw	r2,12(r3)
 2001808:	10c00215 	stw	r3,8(r2)
 200180c:	9c400204 	addi	r17,r19,8
 2001810:	21804336 	bltu	r4,r6,2001920 <_realloc_r+0x50c>
 2001814:	008004c4 	movi	r2,19
 2001818:	11803f2e 	bgeu	r2,r6,2001918 <_realloc_r+0x504>
 200181c:	a0800017 	ldw	r2,0(r20)
 2001820:	98800215 	stw	r2,8(r19)
 2001824:	a0800117 	ldw	r2,4(r20)
 2001828:	98800315 	stw	r2,12(r19)
 200182c:	008006c4 	movi	r2,27
 2001830:	11803f36 	bltu	r2,r6,2001930 <_realloc_r+0x51c>
 2001834:	98800404 	addi	r2,r19,16
 2001838:	a5000204 	addi	r20,r20,8
 200183c:	a0c00017 	ldw	r3,0(r20)
 2001840:	10c00015 	stw	r3,0(r2)
 2001844:	a0c00117 	ldw	r3,4(r20)
 2001848:	10c00115 	stw	r3,4(r2)
 200184c:	a0c00217 	ldw	r3,8(r20)
 2001850:	10c00215 	stw	r3,8(r2)
 2001854:	9d87883a 	add	r3,r19,r22
 2001858:	bd85c83a 	sub	r2,r23,r22
 200185c:	e0c00215 	stw	r3,8(fp)
 2001860:	10800054 	ori	r2,r2,1
 2001864:	18800115 	stw	r2,4(r3)
 2001868:	98800117 	ldw	r2,4(r19)
 200186c:	9009883a 	mov	r4,r18
 2001870:	1080004c 	andi	r2,r2,1
 2001874:	b0acb03a 	or	r22,r22,r2
 2001878:	9d800115 	stw	r22,4(r19)
 200187c:	20035880 	call	2003588 <__malloc_unlock>
 2001880:	8805883a 	mov	r2,r17
 2001884:	003f2806 	br	2001528 <__alt_mem_onchip_memory2_0+0xfdff1528>
 2001888:	a0c00217 	ldw	r3,8(r20)
 200188c:	88c00215 	stw	r3,8(r17)
 2001890:	a0c00317 	ldw	r3,12(r20)
 2001894:	88c00315 	stw	r3,12(r17)
 2001898:	30801126 	beq	r6,r2,20018e0 <_realloc_r+0x4cc>
 200189c:	88800404 	addi	r2,r17,16
 20018a0:	a0c00404 	addi	r3,r20,16
 20018a4:	003f4e06 	br	20015e0 <__alt_mem_onchip_memory2_0+0xfdff15e0>
 20018a8:	893fff17 	ldw	r4,-4(r17)
 20018ac:	00bfff04 	movi	r2,-4
 20018b0:	a023883a 	mov	r17,r20
 20018b4:	2084703a 	and	r2,r4,r2
 20018b8:	80a1883a 	add	r16,r16,r2
 20018bc:	003f0d06 	br	20014f4 <__alt_mem_onchip_memory2_0+0xfdff14f4>
 20018c0:	a0800217 	ldw	r2,8(r20)
 20018c4:	98800415 	stw	r2,16(r19)
 20018c8:	a0800317 	ldw	r2,12(r20)
 20018cc:	98800515 	stw	r2,20(r19)
 20018d0:	31000a26 	beq	r6,r4,20018fc <_realloc_r+0x4e8>
 20018d4:	98c00604 	addi	r3,r19,24
 20018d8:	a5000404 	addi	r20,r20,16
 20018dc:	003fa806 	br	2001780 <__alt_mem_onchip_memory2_0+0xfdff1780>
 20018e0:	a1000417 	ldw	r4,16(r20)
 20018e4:	88800604 	addi	r2,r17,24
 20018e8:	a0c00604 	addi	r3,r20,24
 20018ec:	89000415 	stw	r4,16(r17)
 20018f0:	a1000517 	ldw	r4,20(r20)
 20018f4:	89000515 	stw	r4,20(r17)
 20018f8:	003f3906 	br	20015e0 <__alt_mem_onchip_memory2_0+0xfdff15e0>
 20018fc:	a0800417 	ldw	r2,16(r20)
 2001900:	a5000604 	addi	r20,r20,24
 2001904:	98c00804 	addi	r3,r19,32
 2001908:	98800615 	stw	r2,24(r19)
 200190c:	a0bfff17 	ldw	r2,-4(r20)
 2001910:	98800715 	stw	r2,28(r19)
 2001914:	003f9a06 	br	2001780 <__alt_mem_onchip_memory2_0+0xfdff1780>
 2001918:	8805883a 	mov	r2,r17
 200191c:	003fc706 	br	200183c <__alt_mem_onchip_memory2_0+0xfdff183c>
 2001920:	8809883a 	mov	r4,r17
 2001924:	a00b883a 	mov	r5,r20
 2001928:	20012b80 	call	20012b8 <memmove>
 200192c:	003fc906 	br	2001854 <__alt_mem_onchip_memory2_0+0xfdff1854>
 2001930:	a0800217 	ldw	r2,8(r20)
 2001934:	98800415 	stw	r2,16(r19)
 2001938:	a0800317 	ldw	r2,12(r20)
 200193c:	98800515 	stw	r2,20(r19)
 2001940:	31000726 	beq	r6,r4,2001960 <_realloc_r+0x54c>
 2001944:	98800604 	addi	r2,r19,24
 2001948:	a5000404 	addi	r20,r20,16
 200194c:	003fbb06 	br	200183c <__alt_mem_onchip_memory2_0+0xfdff183c>
 2001950:	9009883a 	mov	r4,r18
 2001954:	20035880 	call	2003588 <__malloc_unlock>
 2001958:	0005883a 	mov	r2,zero
 200195c:	003ef206 	br	2001528 <__alt_mem_onchip_memory2_0+0xfdff1528>
 2001960:	a0c00417 	ldw	r3,16(r20)
 2001964:	a5000604 	addi	r20,r20,24
 2001968:	98800804 	addi	r2,r19,32
 200196c:	98c00615 	stw	r3,24(r19)
 2001970:	a0ffff17 	ldw	r3,-4(r20)
 2001974:	98c00715 	stw	r3,28(r19)
 2001978:	003fb006 	br	200183c <__alt_mem_onchip_memory2_0+0xfdff183c>

0200197c <_sbrk_r>:
 200197c:	defffd04 	addi	sp,sp,-12
 2001980:	dc000015 	stw	r16,0(sp)
 2001984:	04008074 	movhi	r16,513
 2001988:	dc400115 	stw	r17,4(sp)
 200198c:	84230404 	addi	r16,r16,-29680
 2001990:	2023883a 	mov	r17,r4
 2001994:	2809883a 	mov	r4,r5
 2001998:	dfc00215 	stw	ra,8(sp)
 200199c:	80000015 	stw	zero,0(r16)
 20019a0:	200377c0 	call	200377c <sbrk>
 20019a4:	00ffffc4 	movi	r3,-1
 20019a8:	10c00526 	beq	r2,r3,20019c0 <_sbrk_r+0x44>
 20019ac:	dfc00217 	ldw	ra,8(sp)
 20019b0:	dc400117 	ldw	r17,4(sp)
 20019b4:	dc000017 	ldw	r16,0(sp)
 20019b8:	dec00304 	addi	sp,sp,12
 20019bc:	f800283a 	ret
 20019c0:	80c00017 	ldw	r3,0(r16)
 20019c4:	183ff926 	beq	r3,zero,20019ac <__alt_mem_onchip_memory2_0+0xfdff19ac>
 20019c8:	88c00015 	stw	r3,0(r17)
 20019cc:	003ff706 	br	20019ac <__alt_mem_onchip_memory2_0+0xfdff19ac>

020019d0 <__swsetup_r>:
 20019d0:	00808034 	movhi	r2,512
 20019d4:	defffd04 	addi	sp,sp,-12
 20019d8:	109c5904 	addi	r2,r2,29028
 20019dc:	dc400115 	stw	r17,4(sp)
 20019e0:	2023883a 	mov	r17,r4
 20019e4:	11000017 	ldw	r4,0(r2)
 20019e8:	dc000015 	stw	r16,0(sp)
 20019ec:	dfc00215 	stw	ra,8(sp)
 20019f0:	2821883a 	mov	r16,r5
 20019f4:	20000226 	beq	r4,zero,2001a00 <__swsetup_r+0x30>
 20019f8:	20c00e17 	ldw	r3,56(r4)
 20019fc:	18003126 	beq	r3,zero,2001ac4 <__swsetup_r+0xf4>
 2001a00:	8080030b 	ldhu	r2,12(r16)
 2001a04:	10c0020c 	andi	r3,r2,8
 2001a08:	100d883a 	mov	r6,r2
 2001a0c:	18000f26 	beq	r3,zero,2001a4c <__swsetup_r+0x7c>
 2001a10:	80c00417 	ldw	r3,16(r16)
 2001a14:	18001526 	beq	r3,zero,2001a6c <__swsetup_r+0x9c>
 2001a18:	1100004c 	andi	r4,r2,1
 2001a1c:	20001c1e 	bne	r4,zero,2001a90 <__swsetup_r+0xc0>
 2001a20:	1080008c 	andi	r2,r2,2
 2001a24:	1000291e 	bne	r2,zero,2001acc <__swsetup_r+0xfc>
 2001a28:	80800517 	ldw	r2,20(r16)
 2001a2c:	80800215 	stw	r2,8(r16)
 2001a30:	18001c26 	beq	r3,zero,2001aa4 <__swsetup_r+0xd4>
 2001a34:	0005883a 	mov	r2,zero
 2001a38:	dfc00217 	ldw	ra,8(sp)
 2001a3c:	dc400117 	ldw	r17,4(sp)
 2001a40:	dc000017 	ldw	r16,0(sp)
 2001a44:	dec00304 	addi	sp,sp,12
 2001a48:	f800283a 	ret
 2001a4c:	3080040c 	andi	r2,r6,16
 2001a50:	10002e26 	beq	r2,zero,2001b0c <__swsetup_r+0x13c>
 2001a54:	3080010c 	andi	r2,r6,4
 2001a58:	10001e1e 	bne	r2,zero,2001ad4 <__swsetup_r+0x104>
 2001a5c:	80c00417 	ldw	r3,16(r16)
 2001a60:	30800214 	ori	r2,r6,8
 2001a64:	8080030d 	sth	r2,12(r16)
 2001a68:	183feb1e 	bne	r3,zero,2001a18 <__alt_mem_onchip_memory2_0+0xfdff1a18>
 2001a6c:	1140a00c 	andi	r5,r2,640
 2001a70:	01008004 	movi	r4,512
 2001a74:	293fe826 	beq	r5,r4,2001a18 <__alt_mem_onchip_memory2_0+0xfdff1a18>
 2001a78:	8809883a 	mov	r4,r17
 2001a7c:	800b883a 	mov	r5,r16
 2001a80:	20027040 	call	2002704 <__smakebuf_r>
 2001a84:	8080030b 	ldhu	r2,12(r16)
 2001a88:	80c00417 	ldw	r3,16(r16)
 2001a8c:	003fe206 	br	2001a18 <__alt_mem_onchip_memory2_0+0xfdff1a18>
 2001a90:	80800517 	ldw	r2,20(r16)
 2001a94:	80000215 	stw	zero,8(r16)
 2001a98:	0085c83a 	sub	r2,zero,r2
 2001a9c:	80800615 	stw	r2,24(r16)
 2001aa0:	183fe41e 	bne	r3,zero,2001a34 <__alt_mem_onchip_memory2_0+0xfdff1a34>
 2001aa4:	80c0030b 	ldhu	r3,12(r16)
 2001aa8:	0005883a 	mov	r2,zero
 2001aac:	1900200c 	andi	r4,r3,128
 2001ab0:	203fe126 	beq	r4,zero,2001a38 <__alt_mem_onchip_memory2_0+0xfdff1a38>
 2001ab4:	18c01014 	ori	r3,r3,64
 2001ab8:	80c0030d 	sth	r3,12(r16)
 2001abc:	00bfffc4 	movi	r2,-1
 2001ac0:	003fdd06 	br	2001a38 <__alt_mem_onchip_memory2_0+0xfdff1a38>
 2001ac4:	20021180 	call	2002118 <__sinit>
 2001ac8:	003fcd06 	br	2001a00 <__alt_mem_onchip_memory2_0+0xfdff1a00>
 2001acc:	0005883a 	mov	r2,zero
 2001ad0:	003fd606 	br	2001a2c <__alt_mem_onchip_memory2_0+0xfdff1a2c>
 2001ad4:	81400c17 	ldw	r5,48(r16)
 2001ad8:	28000626 	beq	r5,zero,2001af4 <__swsetup_r+0x124>
 2001adc:	80801004 	addi	r2,r16,64
 2001ae0:	28800326 	beq	r5,r2,2001af0 <__swsetup_r+0x120>
 2001ae4:	8809883a 	mov	r4,r17
 2001ae8:	200228c0 	call	200228c <_free_r>
 2001aec:	8180030b 	ldhu	r6,12(r16)
 2001af0:	80000c15 	stw	zero,48(r16)
 2001af4:	80c00417 	ldw	r3,16(r16)
 2001af8:	00bff6c4 	movi	r2,-37
 2001afc:	118c703a 	and	r6,r2,r6
 2001b00:	80000115 	stw	zero,4(r16)
 2001b04:	80c00015 	stw	r3,0(r16)
 2001b08:	003fd506 	br	2001a60 <__alt_mem_onchip_memory2_0+0xfdff1a60>
 2001b0c:	00800244 	movi	r2,9
 2001b10:	88800015 	stw	r2,0(r17)
 2001b14:	30801014 	ori	r2,r6,64
 2001b18:	8080030d 	sth	r2,12(r16)
 2001b1c:	00bfffc4 	movi	r2,-1
 2001b20:	003fc506 	br	2001a38 <__alt_mem_onchip_memory2_0+0xfdff1a38>

02001b24 <__sflush_r>:
 2001b24:	2880030b 	ldhu	r2,12(r5)
 2001b28:	defffb04 	addi	sp,sp,-20
 2001b2c:	dcc00315 	stw	r19,12(sp)
 2001b30:	dc400115 	stw	r17,4(sp)
 2001b34:	dfc00415 	stw	ra,16(sp)
 2001b38:	dc800215 	stw	r18,8(sp)
 2001b3c:	dc000015 	stw	r16,0(sp)
 2001b40:	10c0020c 	andi	r3,r2,8
 2001b44:	2823883a 	mov	r17,r5
 2001b48:	2027883a 	mov	r19,r4
 2001b4c:	1800311e 	bne	r3,zero,2001c14 <__sflush_r+0xf0>
 2001b50:	28c00117 	ldw	r3,4(r5)
 2001b54:	10820014 	ori	r2,r2,2048
 2001b58:	2880030d 	sth	r2,12(r5)
 2001b5c:	00c04b0e 	bge	zero,r3,2001c8c <__sflush_r+0x168>
 2001b60:	8a000a17 	ldw	r8,40(r17)
 2001b64:	40002326 	beq	r8,zero,2001bf4 <__sflush_r+0xd0>
 2001b68:	9c000017 	ldw	r16,0(r19)
 2001b6c:	10c4000c 	andi	r3,r2,4096
 2001b70:	98000015 	stw	zero,0(r19)
 2001b74:	18004826 	beq	r3,zero,2001c98 <__sflush_r+0x174>
 2001b78:	89801417 	ldw	r6,80(r17)
 2001b7c:	10c0010c 	andi	r3,r2,4
 2001b80:	18000626 	beq	r3,zero,2001b9c <__sflush_r+0x78>
 2001b84:	88c00117 	ldw	r3,4(r17)
 2001b88:	88800c17 	ldw	r2,48(r17)
 2001b8c:	30cdc83a 	sub	r6,r6,r3
 2001b90:	10000226 	beq	r2,zero,2001b9c <__sflush_r+0x78>
 2001b94:	88800f17 	ldw	r2,60(r17)
 2001b98:	308dc83a 	sub	r6,r6,r2
 2001b9c:	89400717 	ldw	r5,28(r17)
 2001ba0:	9809883a 	mov	r4,r19
 2001ba4:	000f883a 	mov	r7,zero
 2001ba8:	403ee83a 	callr	r8
 2001bac:	00ffffc4 	movi	r3,-1
 2001bb0:	10c04426 	beq	r2,r3,2001cc4 <__sflush_r+0x1a0>
 2001bb4:	88c0030b 	ldhu	r3,12(r17)
 2001bb8:	89000417 	ldw	r4,16(r17)
 2001bbc:	88000115 	stw	zero,4(r17)
 2001bc0:	197dffcc 	andi	r5,r3,63487
 2001bc4:	8940030d 	sth	r5,12(r17)
 2001bc8:	89000015 	stw	r4,0(r17)
 2001bcc:	18c4000c 	andi	r3,r3,4096
 2001bd0:	18002c1e 	bne	r3,zero,2001c84 <__sflush_r+0x160>
 2001bd4:	89400c17 	ldw	r5,48(r17)
 2001bd8:	9c000015 	stw	r16,0(r19)
 2001bdc:	28000526 	beq	r5,zero,2001bf4 <__sflush_r+0xd0>
 2001be0:	88801004 	addi	r2,r17,64
 2001be4:	28800226 	beq	r5,r2,2001bf0 <__sflush_r+0xcc>
 2001be8:	9809883a 	mov	r4,r19
 2001bec:	200228c0 	call	200228c <_free_r>
 2001bf0:	88000c15 	stw	zero,48(r17)
 2001bf4:	0005883a 	mov	r2,zero
 2001bf8:	dfc00417 	ldw	ra,16(sp)
 2001bfc:	dcc00317 	ldw	r19,12(sp)
 2001c00:	dc800217 	ldw	r18,8(sp)
 2001c04:	dc400117 	ldw	r17,4(sp)
 2001c08:	dc000017 	ldw	r16,0(sp)
 2001c0c:	dec00504 	addi	sp,sp,20
 2001c10:	f800283a 	ret
 2001c14:	2c800417 	ldw	r18,16(r5)
 2001c18:	903ff626 	beq	r18,zero,2001bf4 <__alt_mem_onchip_memory2_0+0xfdff1bf4>
 2001c1c:	2c000017 	ldw	r16,0(r5)
 2001c20:	108000cc 	andi	r2,r2,3
 2001c24:	2c800015 	stw	r18,0(r5)
 2001c28:	84a1c83a 	sub	r16,r16,r18
 2001c2c:	1000131e 	bne	r2,zero,2001c7c <__sflush_r+0x158>
 2001c30:	28800517 	ldw	r2,20(r5)
 2001c34:	88800215 	stw	r2,8(r17)
 2001c38:	04000316 	blt	zero,r16,2001c48 <__sflush_r+0x124>
 2001c3c:	003fed06 	br	2001bf4 <__alt_mem_onchip_memory2_0+0xfdff1bf4>
 2001c40:	90a5883a 	add	r18,r18,r2
 2001c44:	043feb0e 	bge	zero,r16,2001bf4 <__alt_mem_onchip_memory2_0+0xfdff1bf4>
 2001c48:	88800917 	ldw	r2,36(r17)
 2001c4c:	89400717 	ldw	r5,28(r17)
 2001c50:	800f883a 	mov	r7,r16
 2001c54:	900d883a 	mov	r6,r18
 2001c58:	9809883a 	mov	r4,r19
 2001c5c:	103ee83a 	callr	r2
 2001c60:	80a1c83a 	sub	r16,r16,r2
 2001c64:	00bff616 	blt	zero,r2,2001c40 <__alt_mem_onchip_memory2_0+0xfdff1c40>
 2001c68:	88c0030b 	ldhu	r3,12(r17)
 2001c6c:	00bfffc4 	movi	r2,-1
 2001c70:	18c01014 	ori	r3,r3,64
 2001c74:	88c0030d 	sth	r3,12(r17)
 2001c78:	003fdf06 	br	2001bf8 <__alt_mem_onchip_memory2_0+0xfdff1bf8>
 2001c7c:	0005883a 	mov	r2,zero
 2001c80:	003fec06 	br	2001c34 <__alt_mem_onchip_memory2_0+0xfdff1c34>
 2001c84:	88801415 	stw	r2,80(r17)
 2001c88:	003fd206 	br	2001bd4 <__alt_mem_onchip_memory2_0+0xfdff1bd4>
 2001c8c:	28c00f17 	ldw	r3,60(r5)
 2001c90:	00ffb316 	blt	zero,r3,2001b60 <__alt_mem_onchip_memory2_0+0xfdff1b60>
 2001c94:	003fd706 	br	2001bf4 <__alt_mem_onchip_memory2_0+0xfdff1bf4>
 2001c98:	89400717 	ldw	r5,28(r17)
 2001c9c:	000d883a 	mov	r6,zero
 2001ca0:	9809883a 	mov	r4,r19
 2001ca4:	01c00044 	movi	r7,1
 2001ca8:	403ee83a 	callr	r8
 2001cac:	100d883a 	mov	r6,r2
 2001cb0:	00bfffc4 	movi	r2,-1
 2001cb4:	30801426 	beq	r6,r2,2001d08 <__sflush_r+0x1e4>
 2001cb8:	8880030b 	ldhu	r2,12(r17)
 2001cbc:	8a000a17 	ldw	r8,40(r17)
 2001cc0:	003fae06 	br	2001b7c <__alt_mem_onchip_memory2_0+0xfdff1b7c>
 2001cc4:	98c00017 	ldw	r3,0(r19)
 2001cc8:	183fba26 	beq	r3,zero,2001bb4 <__alt_mem_onchip_memory2_0+0xfdff1bb4>
 2001ccc:	01000744 	movi	r4,29
 2001cd0:	19000626 	beq	r3,r4,2001cec <__sflush_r+0x1c8>
 2001cd4:	01000584 	movi	r4,22
 2001cd8:	19000426 	beq	r3,r4,2001cec <__sflush_r+0x1c8>
 2001cdc:	88c0030b 	ldhu	r3,12(r17)
 2001ce0:	18c01014 	ori	r3,r3,64
 2001ce4:	88c0030d 	sth	r3,12(r17)
 2001ce8:	003fc306 	br	2001bf8 <__alt_mem_onchip_memory2_0+0xfdff1bf8>
 2001cec:	8880030b 	ldhu	r2,12(r17)
 2001cf0:	88c00417 	ldw	r3,16(r17)
 2001cf4:	88000115 	stw	zero,4(r17)
 2001cf8:	10bdffcc 	andi	r2,r2,63487
 2001cfc:	8880030d 	sth	r2,12(r17)
 2001d00:	88c00015 	stw	r3,0(r17)
 2001d04:	003fb306 	br	2001bd4 <__alt_mem_onchip_memory2_0+0xfdff1bd4>
 2001d08:	98800017 	ldw	r2,0(r19)
 2001d0c:	103fea26 	beq	r2,zero,2001cb8 <__alt_mem_onchip_memory2_0+0xfdff1cb8>
 2001d10:	00c00744 	movi	r3,29
 2001d14:	10c00226 	beq	r2,r3,2001d20 <__sflush_r+0x1fc>
 2001d18:	00c00584 	movi	r3,22
 2001d1c:	10ffd21e 	bne	r2,r3,2001c68 <__alt_mem_onchip_memory2_0+0xfdff1c68>
 2001d20:	9c000015 	stw	r16,0(r19)
 2001d24:	0005883a 	mov	r2,zero
 2001d28:	003fb306 	br	2001bf8 <__alt_mem_onchip_memory2_0+0xfdff1bf8>

02001d2c <_fflush_r>:
 2001d2c:	defffd04 	addi	sp,sp,-12
 2001d30:	dc000115 	stw	r16,4(sp)
 2001d34:	dfc00215 	stw	ra,8(sp)
 2001d38:	2021883a 	mov	r16,r4
 2001d3c:	20000226 	beq	r4,zero,2001d48 <_fflush_r+0x1c>
 2001d40:	20800e17 	ldw	r2,56(r4)
 2001d44:	10000c26 	beq	r2,zero,2001d78 <_fflush_r+0x4c>
 2001d48:	2880030f 	ldh	r2,12(r5)
 2001d4c:	1000051e 	bne	r2,zero,2001d64 <_fflush_r+0x38>
 2001d50:	0005883a 	mov	r2,zero
 2001d54:	dfc00217 	ldw	ra,8(sp)
 2001d58:	dc000117 	ldw	r16,4(sp)
 2001d5c:	dec00304 	addi	sp,sp,12
 2001d60:	f800283a 	ret
 2001d64:	8009883a 	mov	r4,r16
 2001d68:	dfc00217 	ldw	ra,8(sp)
 2001d6c:	dc000117 	ldw	r16,4(sp)
 2001d70:	dec00304 	addi	sp,sp,12
 2001d74:	2001b241 	jmpi	2001b24 <__sflush_r>
 2001d78:	d9400015 	stw	r5,0(sp)
 2001d7c:	20021180 	call	2002118 <__sinit>
 2001d80:	d9400017 	ldw	r5,0(sp)
 2001d84:	003ff006 	br	2001d48 <__alt_mem_onchip_memory2_0+0xfdff1d48>

02001d88 <fflush>:
 2001d88:	20000526 	beq	r4,zero,2001da0 <fflush+0x18>
 2001d8c:	00808034 	movhi	r2,512
 2001d90:	109c5904 	addi	r2,r2,29028
 2001d94:	200b883a 	mov	r5,r4
 2001d98:	11000017 	ldw	r4,0(r2)
 2001d9c:	2001d2c1 	jmpi	2001d2c <_fflush_r>
 2001da0:	00808034 	movhi	r2,512
 2001da4:	109c5804 	addi	r2,r2,29024
 2001da8:	11000017 	ldw	r4,0(r2)
 2001dac:	01408034 	movhi	r5,512
 2001db0:	29474b04 	addi	r5,r5,7468
 2001db4:	20026401 	jmpi	2002640 <_fwalk_reent>

02001db8 <__fp_lock>:
 2001db8:	0005883a 	mov	r2,zero
 2001dbc:	f800283a 	ret

02001dc0 <__fp_unlock>:
 2001dc0:	0005883a 	mov	r2,zero
 2001dc4:	f800283a 	ret

02001dc8 <_cleanup_r>:
 2001dc8:	01408034 	movhi	r5,512
 2001dcc:	294af304 	addi	r5,r5,11212
 2001dd0:	20026401 	jmpi	2002640 <_fwalk_reent>

02001dd4 <__sinit.part.1>:
 2001dd4:	defff704 	addi	sp,sp,-36
 2001dd8:	00c08034 	movhi	r3,512
 2001ddc:	dfc00815 	stw	ra,32(sp)
 2001de0:	ddc00715 	stw	r23,28(sp)
 2001de4:	dd800615 	stw	r22,24(sp)
 2001de8:	dd400515 	stw	r21,20(sp)
 2001dec:	dd000415 	stw	r20,16(sp)
 2001df0:	dcc00315 	stw	r19,12(sp)
 2001df4:	dc800215 	stw	r18,8(sp)
 2001df8:	dc400115 	stw	r17,4(sp)
 2001dfc:	dc000015 	stw	r16,0(sp)
 2001e00:	18c77204 	addi	r3,r3,7624
 2001e04:	24000117 	ldw	r16,4(r4)
 2001e08:	20c00f15 	stw	r3,60(r4)
 2001e0c:	2080bb04 	addi	r2,r4,748
 2001e10:	00c000c4 	movi	r3,3
 2001e14:	20c0b915 	stw	r3,740(r4)
 2001e18:	2080ba15 	stw	r2,744(r4)
 2001e1c:	2000b815 	stw	zero,736(r4)
 2001e20:	05c00204 	movi	r23,8
 2001e24:	00800104 	movi	r2,4
 2001e28:	2025883a 	mov	r18,r4
 2001e2c:	b80d883a 	mov	r6,r23
 2001e30:	81001704 	addi	r4,r16,92
 2001e34:	000b883a 	mov	r5,zero
 2001e38:	80000015 	stw	zero,0(r16)
 2001e3c:	80000115 	stw	zero,4(r16)
 2001e40:	80000215 	stw	zero,8(r16)
 2001e44:	8080030d 	sth	r2,12(r16)
 2001e48:	80001915 	stw	zero,100(r16)
 2001e4c:	8000038d 	sth	zero,14(r16)
 2001e50:	80000415 	stw	zero,16(r16)
 2001e54:	80000515 	stw	zero,20(r16)
 2001e58:	80000615 	stw	zero,24(r16)
 2001e5c:	20028bc0 	call	20028bc <memset>
 2001e60:	05808034 	movhi	r22,512
 2001e64:	94400217 	ldw	r17,8(r18)
 2001e68:	05408034 	movhi	r21,512
 2001e6c:	05008034 	movhi	r20,512
 2001e70:	04c08034 	movhi	r19,512
 2001e74:	b58a7804 	addi	r22,r22,10720
 2001e78:	ad4a8f04 	addi	r21,r21,10812
 2001e7c:	a50aae04 	addi	r20,r20,10936
 2001e80:	9ccac504 	addi	r19,r19,11028
 2001e84:	85800815 	stw	r22,32(r16)
 2001e88:	85400915 	stw	r21,36(r16)
 2001e8c:	85000a15 	stw	r20,40(r16)
 2001e90:	84c00b15 	stw	r19,44(r16)
 2001e94:	84000715 	stw	r16,28(r16)
 2001e98:	00800284 	movi	r2,10
 2001e9c:	8880030d 	sth	r2,12(r17)
 2001ea0:	00800044 	movi	r2,1
 2001ea4:	89001704 	addi	r4,r17,92
 2001ea8:	b80d883a 	mov	r6,r23
 2001eac:	000b883a 	mov	r5,zero
 2001eb0:	88000015 	stw	zero,0(r17)
 2001eb4:	88000115 	stw	zero,4(r17)
 2001eb8:	88000215 	stw	zero,8(r17)
 2001ebc:	88001915 	stw	zero,100(r17)
 2001ec0:	8880038d 	sth	r2,14(r17)
 2001ec4:	88000415 	stw	zero,16(r17)
 2001ec8:	88000515 	stw	zero,20(r17)
 2001ecc:	88000615 	stw	zero,24(r17)
 2001ed0:	20028bc0 	call	20028bc <memset>
 2001ed4:	94000317 	ldw	r16,12(r18)
 2001ed8:	00800484 	movi	r2,18
 2001edc:	8c400715 	stw	r17,28(r17)
 2001ee0:	8d800815 	stw	r22,32(r17)
 2001ee4:	8d400915 	stw	r21,36(r17)
 2001ee8:	8d000a15 	stw	r20,40(r17)
 2001eec:	8cc00b15 	stw	r19,44(r17)
 2001ef0:	8080030d 	sth	r2,12(r16)
 2001ef4:	00800084 	movi	r2,2
 2001ef8:	80000015 	stw	zero,0(r16)
 2001efc:	80000115 	stw	zero,4(r16)
 2001f00:	80000215 	stw	zero,8(r16)
 2001f04:	80001915 	stw	zero,100(r16)
 2001f08:	8080038d 	sth	r2,14(r16)
 2001f0c:	80000415 	stw	zero,16(r16)
 2001f10:	80000515 	stw	zero,20(r16)
 2001f14:	80000615 	stw	zero,24(r16)
 2001f18:	81001704 	addi	r4,r16,92
 2001f1c:	000b883a 	mov	r5,zero
 2001f20:	b80d883a 	mov	r6,r23
 2001f24:	20028bc0 	call	20028bc <memset>
 2001f28:	00800044 	movi	r2,1
 2001f2c:	84000715 	stw	r16,28(r16)
 2001f30:	85800815 	stw	r22,32(r16)
 2001f34:	85400915 	stw	r21,36(r16)
 2001f38:	85000a15 	stw	r20,40(r16)
 2001f3c:	84c00b15 	stw	r19,44(r16)
 2001f40:	90800e15 	stw	r2,56(r18)
 2001f44:	dfc00817 	ldw	ra,32(sp)
 2001f48:	ddc00717 	ldw	r23,28(sp)
 2001f4c:	dd800617 	ldw	r22,24(sp)
 2001f50:	dd400517 	ldw	r21,20(sp)
 2001f54:	dd000417 	ldw	r20,16(sp)
 2001f58:	dcc00317 	ldw	r19,12(sp)
 2001f5c:	dc800217 	ldw	r18,8(sp)
 2001f60:	dc400117 	ldw	r17,4(sp)
 2001f64:	dc000017 	ldw	r16,0(sp)
 2001f68:	dec00904 	addi	sp,sp,36
 2001f6c:	f800283a 	ret

02001f70 <__sfmoreglue>:
 2001f70:	defffc04 	addi	sp,sp,-16
 2001f74:	dc800215 	stw	r18,8(sp)
 2001f78:	2825883a 	mov	r18,r5
 2001f7c:	dc000015 	stw	r16,0(sp)
 2001f80:	01401a04 	movi	r5,104
 2001f84:	2021883a 	mov	r16,r4
 2001f88:	913fffc4 	addi	r4,r18,-1
 2001f8c:	dfc00315 	stw	ra,12(sp)
 2001f90:	dc400115 	stw	r17,4(sp)
 2001f94:	2002f600 	call	2002f60 <__mulsi3>
 2001f98:	8009883a 	mov	r4,r16
 2001f9c:	11401d04 	addi	r5,r2,116
 2001fa0:	1023883a 	mov	r17,r2
 2001fa4:	20008f00 	call	20008f0 <_malloc_r>
 2001fa8:	1021883a 	mov	r16,r2
 2001fac:	10000726 	beq	r2,zero,2001fcc <__sfmoreglue+0x5c>
 2001fb0:	11000304 	addi	r4,r2,12
 2001fb4:	10000015 	stw	zero,0(r2)
 2001fb8:	14800115 	stw	r18,4(r2)
 2001fbc:	11000215 	stw	r4,8(r2)
 2001fc0:	000b883a 	mov	r5,zero
 2001fc4:	89801a04 	addi	r6,r17,104
 2001fc8:	20028bc0 	call	20028bc <memset>
 2001fcc:	8005883a 	mov	r2,r16
 2001fd0:	dfc00317 	ldw	ra,12(sp)
 2001fd4:	dc800217 	ldw	r18,8(sp)
 2001fd8:	dc400117 	ldw	r17,4(sp)
 2001fdc:	dc000017 	ldw	r16,0(sp)
 2001fe0:	dec00404 	addi	sp,sp,16
 2001fe4:	f800283a 	ret

02001fe8 <__sfp>:
 2001fe8:	00808034 	movhi	r2,512
 2001fec:	defffb04 	addi	sp,sp,-20
 2001ff0:	109c5804 	addi	r2,r2,29024
 2001ff4:	dc800215 	stw	r18,8(sp)
 2001ff8:	14800017 	ldw	r18,0(r2)
 2001ffc:	dcc00315 	stw	r19,12(sp)
 2002000:	dfc00415 	stw	ra,16(sp)
 2002004:	90800e17 	ldw	r2,56(r18)
 2002008:	dc400115 	stw	r17,4(sp)
 200200c:	dc000015 	stw	r16,0(sp)
 2002010:	2027883a 	mov	r19,r4
 2002014:	1000021e 	bne	r2,zero,2002020 <__sfp+0x38>
 2002018:	9009883a 	mov	r4,r18
 200201c:	2001dd40 	call	2001dd4 <__sinit.part.1>
 2002020:	9480b804 	addi	r18,r18,736
 2002024:	047fffc4 	movi	r17,-1
 2002028:	91400117 	ldw	r5,4(r18)
 200202c:	94000217 	ldw	r16,8(r18)
 2002030:	297fffc4 	addi	r5,r5,-1
 2002034:	28000a16 	blt	r5,zero,2002060 <__sfp+0x78>
 2002038:	8080030f 	ldh	r2,12(r16)
 200203c:	10000c26 	beq	r2,zero,2002070 <__sfp+0x88>
 2002040:	80c01d04 	addi	r3,r16,116
 2002044:	00000206 	br	2002050 <__sfp+0x68>
 2002048:	18bfe60f 	ldh	r2,-104(r3)
 200204c:	10000826 	beq	r2,zero,2002070 <__sfp+0x88>
 2002050:	297fffc4 	addi	r5,r5,-1
 2002054:	1c3ffd04 	addi	r16,r3,-12
 2002058:	18c01a04 	addi	r3,r3,104
 200205c:	2c7ffa1e 	bne	r5,r17,2002048 <__alt_mem_onchip_memory2_0+0xfdff2048>
 2002060:	90800017 	ldw	r2,0(r18)
 2002064:	10001d26 	beq	r2,zero,20020dc <__sfp+0xf4>
 2002068:	1025883a 	mov	r18,r2
 200206c:	003fee06 	br	2002028 <__alt_mem_onchip_memory2_0+0xfdff2028>
 2002070:	00bfffc4 	movi	r2,-1
 2002074:	8080038d 	sth	r2,14(r16)
 2002078:	00800044 	movi	r2,1
 200207c:	8080030d 	sth	r2,12(r16)
 2002080:	80001915 	stw	zero,100(r16)
 2002084:	80000015 	stw	zero,0(r16)
 2002088:	80000215 	stw	zero,8(r16)
 200208c:	80000115 	stw	zero,4(r16)
 2002090:	80000415 	stw	zero,16(r16)
 2002094:	80000515 	stw	zero,20(r16)
 2002098:	80000615 	stw	zero,24(r16)
 200209c:	81001704 	addi	r4,r16,92
 20020a0:	000b883a 	mov	r5,zero
 20020a4:	01800204 	movi	r6,8
 20020a8:	20028bc0 	call	20028bc <memset>
 20020ac:	8005883a 	mov	r2,r16
 20020b0:	80000c15 	stw	zero,48(r16)
 20020b4:	80000d15 	stw	zero,52(r16)
 20020b8:	80001115 	stw	zero,68(r16)
 20020bc:	80001215 	stw	zero,72(r16)
 20020c0:	dfc00417 	ldw	ra,16(sp)
 20020c4:	dcc00317 	ldw	r19,12(sp)
 20020c8:	dc800217 	ldw	r18,8(sp)
 20020cc:	dc400117 	ldw	r17,4(sp)
 20020d0:	dc000017 	ldw	r16,0(sp)
 20020d4:	dec00504 	addi	sp,sp,20
 20020d8:	f800283a 	ret
 20020dc:	9809883a 	mov	r4,r19
 20020e0:	01400104 	movi	r5,4
 20020e4:	2001f700 	call	2001f70 <__sfmoreglue>
 20020e8:	90800015 	stw	r2,0(r18)
 20020ec:	103fde1e 	bne	r2,zero,2002068 <__alt_mem_onchip_memory2_0+0xfdff2068>
 20020f0:	00800304 	movi	r2,12
 20020f4:	98800015 	stw	r2,0(r19)
 20020f8:	0005883a 	mov	r2,zero
 20020fc:	003ff006 	br	20020c0 <__alt_mem_onchip_memory2_0+0xfdff20c0>

02002100 <_cleanup>:
 2002100:	00808034 	movhi	r2,512
 2002104:	109c5804 	addi	r2,r2,29024
 2002108:	11000017 	ldw	r4,0(r2)
 200210c:	01408034 	movhi	r5,512
 2002110:	294af304 	addi	r5,r5,11212
 2002114:	20026401 	jmpi	2002640 <_fwalk_reent>

02002118 <__sinit>:
 2002118:	20800e17 	ldw	r2,56(r4)
 200211c:	10000126 	beq	r2,zero,2002124 <__sinit+0xc>
 2002120:	f800283a 	ret
 2002124:	2001dd41 	jmpi	2001dd4 <__sinit.part.1>

02002128 <__sfp_lock_acquire>:
 2002128:	f800283a 	ret

0200212c <__sfp_lock_release>:
 200212c:	f800283a 	ret

02002130 <__sinit_lock_acquire>:
 2002130:	f800283a 	ret

02002134 <__sinit_lock_release>:
 2002134:	f800283a 	ret

02002138 <__fp_lock_all>:
 2002138:	00808034 	movhi	r2,512
 200213c:	109c5904 	addi	r2,r2,29028
 2002140:	11000017 	ldw	r4,0(r2)
 2002144:	01408034 	movhi	r5,512
 2002148:	29476e04 	addi	r5,r5,7608
 200214c:	200257c1 	jmpi	200257c <_fwalk>

02002150 <__fp_unlock_all>:
 2002150:	00808034 	movhi	r2,512
 2002154:	109c5904 	addi	r2,r2,29028
 2002158:	11000017 	ldw	r4,0(r2)
 200215c:	01408034 	movhi	r5,512
 2002160:	29477004 	addi	r5,r5,7616
 2002164:	200257c1 	jmpi	200257c <_fwalk>

02002168 <_malloc_trim_r>:
 2002168:	defffb04 	addi	sp,sp,-20
 200216c:	dcc00315 	stw	r19,12(sp)
 2002170:	04c08034 	movhi	r19,512
 2002174:	dc800215 	stw	r18,8(sp)
 2002178:	dc400115 	stw	r17,4(sp)
 200217c:	dc000015 	stw	r16,0(sp)
 2002180:	dfc00415 	stw	ra,16(sp)
 2002184:	2821883a 	mov	r16,r5
 2002188:	9cd6d404 	addi	r19,r19,23376
 200218c:	2025883a 	mov	r18,r4
 2002190:	20035680 	call	2003568 <__malloc_lock>
 2002194:	98800217 	ldw	r2,8(r19)
 2002198:	14400117 	ldw	r17,4(r2)
 200219c:	00bfff04 	movi	r2,-4
 20021a0:	88a2703a 	and	r17,r17,r2
 20021a4:	8c21c83a 	sub	r16,r17,r16
 20021a8:	8403fbc4 	addi	r16,r16,4079
 20021ac:	8020d33a 	srli	r16,r16,12
 20021b0:	0083ffc4 	movi	r2,4095
 20021b4:	843fffc4 	addi	r16,r16,-1
 20021b8:	8020933a 	slli	r16,r16,12
 20021bc:	1400060e 	bge	r2,r16,20021d8 <_malloc_trim_r+0x70>
 20021c0:	9009883a 	mov	r4,r18
 20021c4:	000b883a 	mov	r5,zero
 20021c8:	200197c0 	call	200197c <_sbrk_r>
 20021cc:	98c00217 	ldw	r3,8(r19)
 20021d0:	1c47883a 	add	r3,r3,r17
 20021d4:	10c00a26 	beq	r2,r3,2002200 <_malloc_trim_r+0x98>
 20021d8:	9009883a 	mov	r4,r18
 20021dc:	20035880 	call	2003588 <__malloc_unlock>
 20021e0:	0005883a 	mov	r2,zero
 20021e4:	dfc00417 	ldw	ra,16(sp)
 20021e8:	dcc00317 	ldw	r19,12(sp)
 20021ec:	dc800217 	ldw	r18,8(sp)
 20021f0:	dc400117 	ldw	r17,4(sp)
 20021f4:	dc000017 	ldw	r16,0(sp)
 20021f8:	dec00504 	addi	sp,sp,20
 20021fc:	f800283a 	ret
 2002200:	9009883a 	mov	r4,r18
 2002204:	040bc83a 	sub	r5,zero,r16
 2002208:	200197c0 	call	200197c <_sbrk_r>
 200220c:	00ffffc4 	movi	r3,-1
 2002210:	10c00d26 	beq	r2,r3,2002248 <_malloc_trim_r+0xe0>
 2002214:	00c08074 	movhi	r3,513
 2002218:	18e30c04 	addi	r3,r3,-29648
 200221c:	18800017 	ldw	r2,0(r3)
 2002220:	99000217 	ldw	r4,8(r19)
 2002224:	8c23c83a 	sub	r17,r17,r16
 2002228:	8c400054 	ori	r17,r17,1
 200222c:	1421c83a 	sub	r16,r2,r16
 2002230:	24400115 	stw	r17,4(r4)
 2002234:	9009883a 	mov	r4,r18
 2002238:	1c000015 	stw	r16,0(r3)
 200223c:	20035880 	call	2003588 <__malloc_unlock>
 2002240:	00800044 	movi	r2,1
 2002244:	003fe706 	br	20021e4 <__alt_mem_onchip_memory2_0+0xfdff21e4>
 2002248:	9009883a 	mov	r4,r18
 200224c:	000b883a 	mov	r5,zero
 2002250:	200197c0 	call	200197c <_sbrk_r>
 2002254:	99000217 	ldw	r4,8(r19)
 2002258:	014003c4 	movi	r5,15
 200225c:	1107c83a 	sub	r3,r2,r4
 2002260:	28ffdd0e 	bge	r5,r3,20021d8 <__alt_mem_onchip_memory2_0+0xfdff21d8>
 2002264:	01408034 	movhi	r5,512
 2002268:	295c5a04 	addi	r5,r5,29032
 200226c:	29400017 	ldw	r5,0(r5)
 2002270:	18c00054 	ori	r3,r3,1
 2002274:	20c00115 	stw	r3,4(r4)
 2002278:	00c08074 	movhi	r3,513
 200227c:	1145c83a 	sub	r2,r2,r5
 2002280:	18e30c04 	addi	r3,r3,-29648
 2002284:	18800015 	stw	r2,0(r3)
 2002288:	003fd306 	br	20021d8 <__alt_mem_onchip_memory2_0+0xfdff21d8>

0200228c <_free_r>:
 200228c:	28004c26 	beq	r5,zero,20023c0 <_free_r+0x134>
 2002290:	defffd04 	addi	sp,sp,-12
 2002294:	dc400115 	stw	r17,4(sp)
 2002298:	dc000015 	stw	r16,0(sp)
 200229c:	2023883a 	mov	r17,r4
 20022a0:	2821883a 	mov	r16,r5
 20022a4:	dfc00215 	stw	ra,8(sp)
 20022a8:	20035680 	call	2003568 <__malloc_lock>
 20022ac:	813fff17 	ldw	r4,-4(r16)
 20022b0:	00bfff84 	movi	r2,-2
 20022b4:	02408034 	movhi	r9,512
 20022b8:	81bffe04 	addi	r6,r16,-8
 20022bc:	2084703a 	and	r2,r4,r2
 20022c0:	4a56d404 	addi	r9,r9,23376
 20022c4:	308b883a 	add	r5,r6,r2
 20022c8:	2a000117 	ldw	r8,4(r5)
 20022cc:	49c00217 	ldw	r7,8(r9)
 20022d0:	00ffff04 	movi	r3,-4
 20022d4:	40c6703a 	and	r3,r8,r3
 20022d8:	39405326 	beq	r7,r5,2002428 <_free_r+0x19c>
 20022dc:	28c00115 	stw	r3,4(r5)
 20022e0:	2100004c 	andi	r4,r4,1
 20022e4:	2000091e 	bne	r4,zero,200230c <_free_r+0x80>
 20022e8:	81fffe17 	ldw	r7,-8(r16)
 20022ec:	4a000204 	addi	r8,r9,8
 20022f0:	31cdc83a 	sub	r6,r6,r7
 20022f4:	31000217 	ldw	r4,8(r6)
 20022f8:	11c5883a 	add	r2,r2,r7
 20022fc:	22006126 	beq	r4,r8,2002484 <_free_r+0x1f8>
 2002300:	31c00317 	ldw	r7,12(r6)
 2002304:	21c00315 	stw	r7,12(r4)
 2002308:	39000215 	stw	r4,8(r7)
 200230c:	28c9883a 	add	r4,r5,r3
 2002310:	21c00117 	ldw	r7,4(r4)
 2002314:	39c0004c 	andi	r7,r7,1
 2002318:	38000d1e 	bne	r7,zero,2002350 <_free_r+0xc4>
 200231c:	29000217 	ldw	r4,8(r5)
 2002320:	10c5883a 	add	r2,r2,r3
 2002324:	00c08034 	movhi	r3,512
 2002328:	18d6d604 	addi	r3,r3,23384
 200232c:	20c07526 	beq	r4,r3,2002504 <_free_r+0x278>
 2002330:	29c00317 	ldw	r7,12(r5)
 2002334:	11400054 	ori	r5,r2,1
 2002338:	3087883a 	add	r3,r6,r2
 200233c:	21c00315 	stw	r7,12(r4)
 2002340:	39000215 	stw	r4,8(r7)
 2002344:	31400115 	stw	r5,4(r6)
 2002348:	18800015 	stw	r2,0(r3)
 200234c:	00000406 	br	2002360 <_free_r+0xd4>
 2002350:	10c00054 	ori	r3,r2,1
 2002354:	30c00115 	stw	r3,4(r6)
 2002358:	3087883a 	add	r3,r6,r2
 200235c:	18800015 	stw	r2,0(r3)
 2002360:	00c07fc4 	movi	r3,511
 2002364:	18801736 	bltu	r3,r2,20023c4 <_free_r+0x138>
 2002368:	1004d0fa 	srli	r2,r2,3
 200236c:	01400044 	movi	r5,1
 2002370:	49000117 	ldw	r4,4(r9)
 2002374:	1087883a 	add	r3,r2,r2
 2002378:	18c7883a 	add	r3,r3,r3
 200237c:	1005d0ba 	srai	r2,r2,2
 2002380:	18c7883a 	add	r3,r3,r3
 2002384:	1a47883a 	add	r3,r3,r9
 2002388:	19c00217 	ldw	r7,8(r3)
 200238c:	2884983a 	sll	r2,r5,r2
 2002390:	30c00315 	stw	r3,12(r6)
 2002394:	31c00215 	stw	r7,8(r6)
 2002398:	1104b03a 	or	r2,r2,r4
 200239c:	19800215 	stw	r6,8(r3)
 20023a0:	48800115 	stw	r2,4(r9)
 20023a4:	39800315 	stw	r6,12(r7)
 20023a8:	8809883a 	mov	r4,r17
 20023ac:	dfc00217 	ldw	ra,8(sp)
 20023b0:	dc400117 	ldw	r17,4(sp)
 20023b4:	dc000017 	ldw	r16,0(sp)
 20023b8:	dec00304 	addi	sp,sp,12
 20023bc:	20035881 	jmpi	2003588 <__malloc_unlock>
 20023c0:	f800283a 	ret
 20023c4:	1006d27a 	srli	r3,r2,9
 20023c8:	01000104 	movi	r4,4
 20023cc:	20c04036 	bltu	r4,r3,20024d0 <_free_r+0x244>
 20023d0:	1006d1ba 	srli	r3,r2,6
 20023d4:	19400e04 	addi	r5,r3,56
 20023d8:	2947883a 	add	r3,r5,r5
 20023dc:	18c7883a 	add	r3,r3,r3
 20023e0:	18c7883a 	add	r3,r3,r3
 20023e4:	1a49883a 	add	r4,r3,r9
 20023e8:	20c00217 	ldw	r3,8(r4)
 20023ec:	01c08034 	movhi	r7,512
 20023f0:	39d6d404 	addi	r7,r7,23376
 20023f4:	19003b26 	beq	r3,r4,20024e4 <_free_r+0x258>
 20023f8:	01ffff04 	movi	r7,-4
 20023fc:	19400117 	ldw	r5,4(r3)
 2002400:	29ca703a 	and	r5,r5,r7
 2002404:	1140022e 	bgeu	r2,r5,2002410 <_free_r+0x184>
 2002408:	18c00217 	ldw	r3,8(r3)
 200240c:	20fffb1e 	bne	r4,r3,20023fc <__alt_mem_onchip_memory2_0+0xfdff23fc>
 2002410:	18800317 	ldw	r2,12(r3)
 2002414:	30800315 	stw	r2,12(r6)
 2002418:	30c00215 	stw	r3,8(r6)
 200241c:	11800215 	stw	r6,8(r2)
 2002420:	19800315 	stw	r6,12(r3)
 2002424:	003fe006 	br	20023a8 <__alt_mem_onchip_memory2_0+0xfdff23a8>
 2002428:	2100004c 	andi	r4,r4,1
 200242c:	1885883a 	add	r2,r3,r2
 2002430:	2000071e 	bne	r4,zero,2002450 <_free_r+0x1c4>
 2002434:	817ffe17 	ldw	r5,-8(r16)
 2002438:	314dc83a 	sub	r6,r6,r5
 200243c:	30c00317 	ldw	r3,12(r6)
 2002440:	31000217 	ldw	r4,8(r6)
 2002444:	1145883a 	add	r2,r2,r5
 2002448:	20c00315 	stw	r3,12(r4)
 200244c:	19000215 	stw	r4,8(r3)
 2002450:	10c00054 	ori	r3,r2,1
 2002454:	30c00115 	stw	r3,4(r6)
 2002458:	00c08034 	movhi	r3,512
 200245c:	18dc5b04 	addi	r3,r3,29036
 2002460:	18c00017 	ldw	r3,0(r3)
 2002464:	49800215 	stw	r6,8(r9)
 2002468:	10ffcf36 	bltu	r2,r3,20023a8 <__alt_mem_onchip_memory2_0+0xfdff23a8>
 200246c:	00808074 	movhi	r2,513
 2002470:	10a30304 	addi	r2,r2,-29684
 2002474:	11400017 	ldw	r5,0(r2)
 2002478:	8809883a 	mov	r4,r17
 200247c:	20021680 	call	2002168 <_malloc_trim_r>
 2002480:	003fc906 	br	20023a8 <__alt_mem_onchip_memory2_0+0xfdff23a8>
 2002484:	28c9883a 	add	r4,r5,r3
 2002488:	21000117 	ldw	r4,4(r4)
 200248c:	2100004c 	andi	r4,r4,1
 2002490:	20000a1e 	bne	r4,zero,20024bc <_free_r+0x230>
 2002494:	29000317 	ldw	r4,12(r5)
 2002498:	29400217 	ldw	r5,8(r5)
 200249c:	10c5883a 	add	r2,r2,r3
 20024a0:	10c00054 	ori	r3,r2,1
 20024a4:	29000315 	stw	r4,12(r5)
 20024a8:	21400215 	stw	r5,8(r4)
 20024ac:	30c00115 	stw	r3,4(r6)
 20024b0:	308d883a 	add	r6,r6,r2
 20024b4:	30800015 	stw	r2,0(r6)
 20024b8:	003fbb06 	br	20023a8 <__alt_mem_onchip_memory2_0+0xfdff23a8>
 20024bc:	10c00054 	ori	r3,r2,1
 20024c0:	30c00115 	stw	r3,4(r6)
 20024c4:	308d883a 	add	r6,r6,r2
 20024c8:	30800015 	stw	r2,0(r6)
 20024cc:	003fb606 	br	20023a8 <__alt_mem_onchip_memory2_0+0xfdff23a8>
 20024d0:	01000504 	movi	r4,20
 20024d4:	20c01436 	bltu	r4,r3,2002528 <_free_r+0x29c>
 20024d8:	194016c4 	addi	r5,r3,91
 20024dc:	2947883a 	add	r3,r5,r5
 20024e0:	003fbe06 	br	20023dc <__alt_mem_onchip_memory2_0+0xfdff23dc>
 20024e4:	280bd0ba 	srai	r5,r5,2
 20024e8:	00800044 	movi	r2,1
 20024ec:	39000117 	ldw	r4,4(r7)
 20024f0:	114a983a 	sll	r5,r2,r5
 20024f4:	1805883a 	mov	r2,r3
 20024f8:	2908b03a 	or	r4,r5,r4
 20024fc:	39000115 	stw	r4,4(r7)
 2002500:	003fc406 	br	2002414 <__alt_mem_onchip_memory2_0+0xfdff2414>
 2002504:	49800515 	stw	r6,20(r9)
 2002508:	49800415 	stw	r6,16(r9)
 200250c:	10c00054 	ori	r3,r2,1
 2002510:	31000315 	stw	r4,12(r6)
 2002514:	31000215 	stw	r4,8(r6)
 2002518:	30c00115 	stw	r3,4(r6)
 200251c:	308d883a 	add	r6,r6,r2
 2002520:	30800015 	stw	r2,0(r6)
 2002524:	003fa006 	br	20023a8 <__alt_mem_onchip_memory2_0+0xfdff23a8>
 2002528:	01001504 	movi	r4,84
 200252c:	20c00436 	bltu	r4,r3,2002540 <_free_r+0x2b4>
 2002530:	1006d33a 	srli	r3,r2,12
 2002534:	19401b84 	addi	r5,r3,110
 2002538:	2947883a 	add	r3,r5,r5
 200253c:	003fa706 	br	20023dc <__alt_mem_onchip_memory2_0+0xfdff23dc>
 2002540:	01005504 	movi	r4,340
 2002544:	20c00436 	bltu	r4,r3,2002558 <_free_r+0x2cc>
 2002548:	1006d3fa 	srli	r3,r2,15
 200254c:	19401dc4 	addi	r5,r3,119
 2002550:	2947883a 	add	r3,r5,r5
 2002554:	003fa106 	br	20023dc <__alt_mem_onchip_memory2_0+0xfdff23dc>
 2002558:	01015504 	movi	r4,1364
 200255c:	20c00436 	bltu	r4,r3,2002570 <_free_r+0x2e4>
 2002560:	1006d4ba 	srli	r3,r2,18
 2002564:	19401f04 	addi	r5,r3,124
 2002568:	2947883a 	add	r3,r5,r5
 200256c:	003f9b06 	br	20023dc <__alt_mem_onchip_memory2_0+0xfdff23dc>
 2002570:	00c03f04 	movi	r3,252
 2002574:	01401f84 	movi	r5,126
 2002578:	003f9806 	br	20023dc <__alt_mem_onchip_memory2_0+0xfdff23dc>

0200257c <_fwalk>:
 200257c:	defff704 	addi	sp,sp,-36
 2002580:	dd000415 	stw	r20,16(sp)
 2002584:	dfc00815 	stw	ra,32(sp)
 2002588:	ddc00715 	stw	r23,28(sp)
 200258c:	dd800615 	stw	r22,24(sp)
 2002590:	dd400515 	stw	r21,20(sp)
 2002594:	dcc00315 	stw	r19,12(sp)
 2002598:	dc800215 	stw	r18,8(sp)
 200259c:	dc400115 	stw	r17,4(sp)
 20025a0:	dc000015 	stw	r16,0(sp)
 20025a4:	2500b804 	addi	r20,r4,736
 20025a8:	a0002326 	beq	r20,zero,2002638 <_fwalk+0xbc>
 20025ac:	282b883a 	mov	r21,r5
 20025b0:	002f883a 	mov	r23,zero
 20025b4:	05800044 	movi	r22,1
 20025b8:	04ffffc4 	movi	r19,-1
 20025bc:	a4400117 	ldw	r17,4(r20)
 20025c0:	a4800217 	ldw	r18,8(r20)
 20025c4:	8c7fffc4 	addi	r17,r17,-1
 20025c8:	88000d16 	blt	r17,zero,2002600 <_fwalk+0x84>
 20025cc:	94000304 	addi	r16,r18,12
 20025d0:	94800384 	addi	r18,r18,14
 20025d4:	80c0000b 	ldhu	r3,0(r16)
 20025d8:	8c7fffc4 	addi	r17,r17,-1
 20025dc:	813ffd04 	addi	r4,r16,-12
 20025e0:	b0c0042e 	bgeu	r22,r3,20025f4 <_fwalk+0x78>
 20025e4:	90c0000f 	ldh	r3,0(r18)
 20025e8:	1cc00226 	beq	r3,r19,20025f4 <_fwalk+0x78>
 20025ec:	a83ee83a 	callr	r21
 20025f0:	b8aeb03a 	or	r23,r23,r2
 20025f4:	84001a04 	addi	r16,r16,104
 20025f8:	94801a04 	addi	r18,r18,104
 20025fc:	8cfff51e 	bne	r17,r19,20025d4 <__alt_mem_onchip_memory2_0+0xfdff25d4>
 2002600:	a5000017 	ldw	r20,0(r20)
 2002604:	a03fed1e 	bne	r20,zero,20025bc <__alt_mem_onchip_memory2_0+0xfdff25bc>
 2002608:	b805883a 	mov	r2,r23
 200260c:	dfc00817 	ldw	ra,32(sp)
 2002610:	ddc00717 	ldw	r23,28(sp)
 2002614:	dd800617 	ldw	r22,24(sp)
 2002618:	dd400517 	ldw	r21,20(sp)
 200261c:	dd000417 	ldw	r20,16(sp)
 2002620:	dcc00317 	ldw	r19,12(sp)
 2002624:	dc800217 	ldw	r18,8(sp)
 2002628:	dc400117 	ldw	r17,4(sp)
 200262c:	dc000017 	ldw	r16,0(sp)
 2002630:	dec00904 	addi	sp,sp,36
 2002634:	f800283a 	ret
 2002638:	002f883a 	mov	r23,zero
 200263c:	003ff206 	br	2002608 <__alt_mem_onchip_memory2_0+0xfdff2608>

02002640 <_fwalk_reent>:
 2002640:	defff704 	addi	sp,sp,-36
 2002644:	dd400515 	stw	r21,20(sp)
 2002648:	dfc00815 	stw	ra,32(sp)
 200264c:	ddc00715 	stw	r23,28(sp)
 2002650:	dd800615 	stw	r22,24(sp)
 2002654:	dd000415 	stw	r20,16(sp)
 2002658:	dcc00315 	stw	r19,12(sp)
 200265c:	dc800215 	stw	r18,8(sp)
 2002660:	dc400115 	stw	r17,4(sp)
 2002664:	dc000015 	stw	r16,0(sp)
 2002668:	2540b804 	addi	r21,r4,736
 200266c:	a8002326 	beq	r21,zero,20026fc <_fwalk_reent+0xbc>
 2002670:	2829883a 	mov	r20,r5
 2002674:	202d883a 	mov	r22,r4
 2002678:	002f883a 	mov	r23,zero
 200267c:	04c00044 	movi	r19,1
 2002680:	04bfffc4 	movi	r18,-1
 2002684:	ac400117 	ldw	r17,4(r21)
 2002688:	ac000217 	ldw	r16,8(r21)
 200268c:	8c7fffc4 	addi	r17,r17,-1
 2002690:	88000c16 	blt	r17,zero,20026c4 <_fwalk_reent+0x84>
 2002694:	84000304 	addi	r16,r16,12
 2002698:	80c0000b 	ldhu	r3,0(r16)
 200269c:	8c7fffc4 	addi	r17,r17,-1
 20026a0:	817ffd04 	addi	r5,r16,-12
 20026a4:	98c0052e 	bgeu	r19,r3,20026bc <_fwalk_reent+0x7c>
 20026a8:	80c0008f 	ldh	r3,2(r16)
 20026ac:	b009883a 	mov	r4,r22
 20026b0:	1c800226 	beq	r3,r18,20026bc <_fwalk_reent+0x7c>
 20026b4:	a03ee83a 	callr	r20
 20026b8:	b8aeb03a 	or	r23,r23,r2
 20026bc:	84001a04 	addi	r16,r16,104
 20026c0:	8cbff51e 	bne	r17,r18,2002698 <__alt_mem_onchip_memory2_0+0xfdff2698>
 20026c4:	ad400017 	ldw	r21,0(r21)
 20026c8:	a83fee1e 	bne	r21,zero,2002684 <__alt_mem_onchip_memory2_0+0xfdff2684>
 20026cc:	b805883a 	mov	r2,r23
 20026d0:	dfc00817 	ldw	ra,32(sp)
 20026d4:	ddc00717 	ldw	r23,28(sp)
 20026d8:	dd800617 	ldw	r22,24(sp)
 20026dc:	dd400517 	ldw	r21,20(sp)
 20026e0:	dd000417 	ldw	r20,16(sp)
 20026e4:	dcc00317 	ldw	r19,12(sp)
 20026e8:	dc800217 	ldw	r18,8(sp)
 20026ec:	dc400117 	ldw	r17,4(sp)
 20026f0:	dc000017 	ldw	r16,0(sp)
 20026f4:	dec00904 	addi	sp,sp,36
 20026f8:	f800283a 	ret
 20026fc:	002f883a 	mov	r23,zero
 2002700:	003ff206 	br	20026cc <__alt_mem_onchip_memory2_0+0xfdff26cc>

02002704 <__smakebuf_r>:
 2002704:	2880030b 	ldhu	r2,12(r5)
 2002708:	10c0008c 	andi	r3,r2,2
 200270c:	1800401e 	bne	r3,zero,2002810 <__smakebuf_r+0x10c>
 2002710:	deffec04 	addi	sp,sp,-80
 2002714:	dc000f15 	stw	r16,60(sp)
 2002718:	2821883a 	mov	r16,r5
 200271c:	2940038f 	ldh	r5,14(r5)
 2002720:	dc401015 	stw	r17,64(sp)
 2002724:	dfc01315 	stw	ra,76(sp)
 2002728:	dcc01215 	stw	r19,72(sp)
 200272c:	dc801115 	stw	r18,68(sp)
 2002730:	2023883a 	mov	r17,r4
 2002734:	28001b16 	blt	r5,zero,20027a4 <__smakebuf_r+0xa0>
 2002738:	d80d883a 	mov	r6,sp
 200273c:	2002cd00 	call	2002cd0 <_fstat_r>
 2002740:	10001716 	blt	r2,zero,20027a0 <__smakebuf_r+0x9c>
 2002744:	d8800117 	ldw	r2,4(sp)
 2002748:	00e00014 	movui	r3,32768
 200274c:	10bc000c 	andi	r2,r2,61440
 2002750:	10c03726 	beq	r2,r3,2002830 <__smakebuf_r+0x12c>
 2002754:	80c0030b 	ldhu	r3,12(r16)
 2002758:	18c20014 	ori	r3,r3,2048
 200275c:	80c0030d 	sth	r3,12(r16)
 2002760:	00c80004 	movi	r3,8192
 2002764:	10c03c1e 	bne	r2,r3,2002858 <__smakebuf_r+0x154>
 2002768:	8140038f 	ldh	r5,14(r16)
 200276c:	8809883a 	mov	r4,r17
 2002770:	2002d280 	call	2002d28 <_isatty_r>
 2002774:	10004e26 	beq	r2,zero,20028b0 <__smakebuf_r+0x1ac>
 2002778:	8080030b 	ldhu	r2,12(r16)
 200277c:	04c00044 	movi	r19,1
 2002780:	80c010c4 	addi	r3,r16,67
 2002784:	14c4b03a 	or	r2,r2,r19
 2002788:	8080030d 	sth	r2,12(r16)
 200278c:	80c00015 	stw	r3,0(r16)
 2002790:	80c00415 	stw	r3,16(r16)
 2002794:	84c00515 	stw	r19,20(r16)
 2002798:	04810004 	movi	r18,1024
 200279c:	00000706 	br	20027bc <__smakebuf_r+0xb8>
 20027a0:	8080030b 	ldhu	r2,12(r16)
 20027a4:	10c0200c 	andi	r3,r2,128
 20027a8:	18001f1e 	bne	r3,zero,2002828 <__smakebuf_r+0x124>
 20027ac:	04810004 	movi	r18,1024
 20027b0:	10820014 	ori	r2,r2,2048
 20027b4:	8080030d 	sth	r2,12(r16)
 20027b8:	0027883a 	mov	r19,zero
 20027bc:	8809883a 	mov	r4,r17
 20027c0:	900b883a 	mov	r5,r18
 20027c4:	20008f00 	call	20008f0 <_malloc_r>
 20027c8:	10002e26 	beq	r2,zero,2002884 <__smakebuf_r+0x180>
 20027cc:	80c0030b 	ldhu	r3,12(r16)
 20027d0:	01008034 	movhi	r4,512
 20027d4:	21077204 	addi	r4,r4,7624
 20027d8:	89000f15 	stw	r4,60(r17)
 20027dc:	18c02014 	ori	r3,r3,128
 20027e0:	80c0030d 	sth	r3,12(r16)
 20027e4:	80800015 	stw	r2,0(r16)
 20027e8:	80800415 	stw	r2,16(r16)
 20027ec:	84800515 	stw	r18,20(r16)
 20027f0:	98001c1e 	bne	r19,zero,2002864 <__smakebuf_r+0x160>
 20027f4:	dfc01317 	ldw	ra,76(sp)
 20027f8:	dcc01217 	ldw	r19,72(sp)
 20027fc:	dc801117 	ldw	r18,68(sp)
 2002800:	dc401017 	ldw	r17,64(sp)
 2002804:	dc000f17 	ldw	r16,60(sp)
 2002808:	dec01404 	addi	sp,sp,80
 200280c:	f800283a 	ret
 2002810:	288010c4 	addi	r2,r5,67
 2002814:	28800015 	stw	r2,0(r5)
 2002818:	28800415 	stw	r2,16(r5)
 200281c:	00800044 	movi	r2,1
 2002820:	28800515 	stw	r2,20(r5)
 2002824:	f800283a 	ret
 2002828:	04801004 	movi	r18,64
 200282c:	003fe006 	br	20027b0 <__alt_mem_onchip_memory2_0+0xfdff27b0>
 2002830:	81000a17 	ldw	r4,40(r16)
 2002834:	00c08034 	movhi	r3,512
 2002838:	18caae04 	addi	r3,r3,10936
 200283c:	20ffc51e 	bne	r4,r3,2002754 <__alt_mem_onchip_memory2_0+0xfdff2754>
 2002840:	80c0030b 	ldhu	r3,12(r16)
 2002844:	01010004 	movi	r4,1024
 2002848:	81001315 	stw	r4,76(r16)
 200284c:	1906b03a 	or	r3,r3,r4
 2002850:	80c0030d 	sth	r3,12(r16)
 2002854:	003fc206 	br	2002760 <__alt_mem_onchip_memory2_0+0xfdff2760>
 2002858:	0027883a 	mov	r19,zero
 200285c:	04810004 	movi	r18,1024
 2002860:	003fd606 	br	20027bc <__alt_mem_onchip_memory2_0+0xfdff27bc>
 2002864:	8140038f 	ldh	r5,14(r16)
 2002868:	8809883a 	mov	r4,r17
 200286c:	2002d280 	call	2002d28 <_isatty_r>
 2002870:	103fe026 	beq	r2,zero,20027f4 <__alt_mem_onchip_memory2_0+0xfdff27f4>
 2002874:	8080030b 	ldhu	r2,12(r16)
 2002878:	10800054 	ori	r2,r2,1
 200287c:	8080030d 	sth	r2,12(r16)
 2002880:	003fdc06 	br	20027f4 <__alt_mem_onchip_memory2_0+0xfdff27f4>
 2002884:	8080030b 	ldhu	r2,12(r16)
 2002888:	10c0800c 	andi	r3,r2,512
 200288c:	183fd91e 	bne	r3,zero,20027f4 <__alt_mem_onchip_memory2_0+0xfdff27f4>
 2002890:	10800094 	ori	r2,r2,2
 2002894:	80c010c4 	addi	r3,r16,67
 2002898:	8080030d 	sth	r2,12(r16)
 200289c:	00800044 	movi	r2,1
 20028a0:	80c00015 	stw	r3,0(r16)
 20028a4:	80c00415 	stw	r3,16(r16)
 20028a8:	80800515 	stw	r2,20(r16)
 20028ac:	003fd106 	br	20027f4 <__alt_mem_onchip_memory2_0+0xfdff27f4>
 20028b0:	04c00044 	movi	r19,1
 20028b4:	04810004 	movi	r18,1024
 20028b8:	003fc006 	br	20027bc <__alt_mem_onchip_memory2_0+0xfdff27bc>

020028bc <memset>:
 20028bc:	20c000cc 	andi	r3,r4,3
 20028c0:	2005883a 	mov	r2,r4
 20028c4:	18004326 	beq	r3,zero,20029d4 <memset+0x118>
 20028c8:	31ffffc4 	addi	r7,r6,-1
 20028cc:	30004026 	beq	r6,zero,20029d0 <memset+0x114>
 20028d0:	2813883a 	mov	r9,r5
 20028d4:	200d883a 	mov	r6,r4
 20028d8:	2007883a 	mov	r3,r4
 20028dc:	00000406 	br	20028f0 <memset+0x34>
 20028e0:	3a3fffc4 	addi	r8,r7,-1
 20028e4:	31800044 	addi	r6,r6,1
 20028e8:	38003926 	beq	r7,zero,20029d0 <memset+0x114>
 20028ec:	400f883a 	mov	r7,r8
 20028f0:	18c00044 	addi	r3,r3,1
 20028f4:	32400005 	stb	r9,0(r6)
 20028f8:	1a0000cc 	andi	r8,r3,3
 20028fc:	403ff81e 	bne	r8,zero,20028e0 <__alt_mem_onchip_memory2_0+0xfdff28e0>
 2002900:	010000c4 	movi	r4,3
 2002904:	21c02d2e 	bgeu	r4,r7,20029bc <memset+0x100>
 2002908:	29803fcc 	andi	r6,r5,255
 200290c:	3008923a 	slli	r4,r6,8
 2002910:	218cb03a 	or	r6,r4,r6
 2002914:	3008943a 	slli	r4,r6,16
 2002918:	218cb03a 	or	r6,r4,r6
 200291c:	010003c4 	movi	r4,15
 2002920:	21c0182e 	bgeu	r4,r7,2002984 <memset+0xc8>
 2002924:	3b3ffc04 	addi	r12,r7,-16
 2002928:	6018d13a 	srli	r12,r12,4
 200292c:	1a000104 	addi	r8,r3,4
 2002930:	1ac00204 	addi	r11,r3,8
 2002934:	6008913a 	slli	r4,r12,4
 2002938:	1a800304 	addi	r10,r3,12
 200293c:	1813883a 	mov	r9,r3
 2002940:	21000504 	addi	r4,r4,20
 2002944:	1909883a 	add	r4,r3,r4
 2002948:	49800015 	stw	r6,0(r9)
 200294c:	41800015 	stw	r6,0(r8)
 2002950:	59800015 	stw	r6,0(r11)
 2002954:	51800015 	stw	r6,0(r10)
 2002958:	42000404 	addi	r8,r8,16
 200295c:	4a400404 	addi	r9,r9,16
 2002960:	5ac00404 	addi	r11,r11,16
 2002964:	52800404 	addi	r10,r10,16
 2002968:	413ff71e 	bne	r8,r4,2002948 <__alt_mem_onchip_memory2_0+0xfdff2948>
 200296c:	63000044 	addi	r12,r12,1
 2002970:	6018913a 	slli	r12,r12,4
 2002974:	39c003cc 	andi	r7,r7,15
 2002978:	010000c4 	movi	r4,3
 200297c:	1b07883a 	add	r3,r3,r12
 2002980:	21c00e2e 	bgeu	r4,r7,20029bc <memset+0x100>
 2002984:	1813883a 	mov	r9,r3
 2002988:	3811883a 	mov	r8,r7
 200298c:	010000c4 	movi	r4,3
 2002990:	49800015 	stw	r6,0(r9)
 2002994:	423fff04 	addi	r8,r8,-4
 2002998:	4a400104 	addi	r9,r9,4
 200299c:	223ffc36 	bltu	r4,r8,2002990 <__alt_mem_onchip_memory2_0+0xfdff2990>
 20029a0:	393fff04 	addi	r4,r7,-4
 20029a4:	2008d0ba 	srli	r4,r4,2
 20029a8:	39c000cc 	andi	r7,r7,3
 20029ac:	21000044 	addi	r4,r4,1
 20029b0:	2109883a 	add	r4,r4,r4
 20029b4:	2109883a 	add	r4,r4,r4
 20029b8:	1907883a 	add	r3,r3,r4
 20029bc:	38000426 	beq	r7,zero,20029d0 <memset+0x114>
 20029c0:	19cf883a 	add	r7,r3,r7
 20029c4:	19400005 	stb	r5,0(r3)
 20029c8:	18c00044 	addi	r3,r3,1
 20029cc:	19fffd1e 	bne	r3,r7,20029c4 <__alt_mem_onchip_memory2_0+0xfdff29c4>
 20029d0:	f800283a 	ret
 20029d4:	2007883a 	mov	r3,r4
 20029d8:	300f883a 	mov	r7,r6
 20029dc:	003fc806 	br	2002900 <__alt_mem_onchip_memory2_0+0xfdff2900>

020029e0 <__sread>:
 20029e0:	defffe04 	addi	sp,sp,-8
 20029e4:	dc000015 	stw	r16,0(sp)
 20029e8:	2821883a 	mov	r16,r5
 20029ec:	2940038f 	ldh	r5,14(r5)
 20029f0:	dfc00115 	stw	ra,4(sp)
 20029f4:	2002dd80 	call	2002dd8 <_read_r>
 20029f8:	10000716 	blt	r2,zero,2002a18 <__sread+0x38>
 20029fc:	80c01417 	ldw	r3,80(r16)
 2002a00:	1887883a 	add	r3,r3,r2
 2002a04:	80c01415 	stw	r3,80(r16)
 2002a08:	dfc00117 	ldw	ra,4(sp)
 2002a0c:	dc000017 	ldw	r16,0(sp)
 2002a10:	dec00204 	addi	sp,sp,8
 2002a14:	f800283a 	ret
 2002a18:	80c0030b 	ldhu	r3,12(r16)
 2002a1c:	18fbffcc 	andi	r3,r3,61439
 2002a20:	80c0030d 	sth	r3,12(r16)
 2002a24:	dfc00117 	ldw	ra,4(sp)
 2002a28:	dc000017 	ldw	r16,0(sp)
 2002a2c:	dec00204 	addi	sp,sp,8
 2002a30:	f800283a 	ret

02002a34 <__seofread>:
 2002a34:	0005883a 	mov	r2,zero
 2002a38:	f800283a 	ret

02002a3c <__swrite>:
 2002a3c:	2880030b 	ldhu	r2,12(r5)
 2002a40:	defffb04 	addi	sp,sp,-20
 2002a44:	dcc00315 	stw	r19,12(sp)
 2002a48:	dc800215 	stw	r18,8(sp)
 2002a4c:	dc400115 	stw	r17,4(sp)
 2002a50:	dc000015 	stw	r16,0(sp)
 2002a54:	dfc00415 	stw	ra,16(sp)
 2002a58:	10c0400c 	andi	r3,r2,256
 2002a5c:	2821883a 	mov	r16,r5
 2002a60:	2027883a 	mov	r19,r4
 2002a64:	3025883a 	mov	r18,r6
 2002a68:	3823883a 	mov	r17,r7
 2002a6c:	18000526 	beq	r3,zero,2002a84 <__swrite+0x48>
 2002a70:	2940038f 	ldh	r5,14(r5)
 2002a74:	000d883a 	mov	r6,zero
 2002a78:	01c00084 	movi	r7,2
 2002a7c:	2002d7c0 	call	2002d7c <_lseek_r>
 2002a80:	8080030b 	ldhu	r2,12(r16)
 2002a84:	8140038f 	ldh	r5,14(r16)
 2002a88:	10bbffcc 	andi	r2,r2,61439
 2002a8c:	9809883a 	mov	r4,r19
 2002a90:	900d883a 	mov	r6,r18
 2002a94:	880f883a 	mov	r7,r17
 2002a98:	8080030d 	sth	r2,12(r16)
 2002a9c:	dfc00417 	ldw	ra,16(sp)
 2002aa0:	dcc00317 	ldw	r19,12(sp)
 2002aa4:	dc800217 	ldw	r18,8(sp)
 2002aa8:	dc400117 	ldw	r17,4(sp)
 2002aac:	dc000017 	ldw	r16,0(sp)
 2002ab0:	dec00504 	addi	sp,sp,20
 2002ab4:	2002b1c1 	jmpi	2002b1c <_write_r>

02002ab8 <__sseek>:
 2002ab8:	defffe04 	addi	sp,sp,-8
 2002abc:	dc000015 	stw	r16,0(sp)
 2002ac0:	2821883a 	mov	r16,r5
 2002ac4:	2940038f 	ldh	r5,14(r5)
 2002ac8:	dfc00115 	stw	ra,4(sp)
 2002acc:	2002d7c0 	call	2002d7c <_lseek_r>
 2002ad0:	00ffffc4 	movi	r3,-1
 2002ad4:	10c00826 	beq	r2,r3,2002af8 <__sseek+0x40>
 2002ad8:	80c0030b 	ldhu	r3,12(r16)
 2002adc:	80801415 	stw	r2,80(r16)
 2002ae0:	18c40014 	ori	r3,r3,4096
 2002ae4:	80c0030d 	sth	r3,12(r16)
 2002ae8:	dfc00117 	ldw	ra,4(sp)
 2002aec:	dc000017 	ldw	r16,0(sp)
 2002af0:	dec00204 	addi	sp,sp,8
 2002af4:	f800283a 	ret
 2002af8:	80c0030b 	ldhu	r3,12(r16)
 2002afc:	18fbffcc 	andi	r3,r3,61439
 2002b00:	80c0030d 	sth	r3,12(r16)
 2002b04:	dfc00117 	ldw	ra,4(sp)
 2002b08:	dc000017 	ldw	r16,0(sp)
 2002b0c:	dec00204 	addi	sp,sp,8
 2002b10:	f800283a 	ret

02002b14 <__sclose>:
 2002b14:	2940038f 	ldh	r5,14(r5)
 2002b18:	2002b781 	jmpi	2002b78 <_close_r>

02002b1c <_write_r>:
 2002b1c:	defffd04 	addi	sp,sp,-12
 2002b20:	dc000015 	stw	r16,0(sp)
 2002b24:	04008074 	movhi	r16,513
 2002b28:	dc400115 	stw	r17,4(sp)
 2002b2c:	84230404 	addi	r16,r16,-29680
 2002b30:	2023883a 	mov	r17,r4
 2002b34:	2809883a 	mov	r4,r5
 2002b38:	300b883a 	mov	r5,r6
 2002b3c:	380d883a 	mov	r6,r7
 2002b40:	dfc00215 	stw	ra,8(sp)
 2002b44:	80000015 	stw	zero,0(r16)
 2002b48:	200387c0 	call	200387c <write>
 2002b4c:	00ffffc4 	movi	r3,-1
 2002b50:	10c00526 	beq	r2,r3,2002b68 <_write_r+0x4c>
 2002b54:	dfc00217 	ldw	ra,8(sp)
 2002b58:	dc400117 	ldw	r17,4(sp)
 2002b5c:	dc000017 	ldw	r16,0(sp)
 2002b60:	dec00304 	addi	sp,sp,12
 2002b64:	f800283a 	ret
 2002b68:	80c00017 	ldw	r3,0(r16)
 2002b6c:	183ff926 	beq	r3,zero,2002b54 <__alt_mem_onchip_memory2_0+0xfdff2b54>
 2002b70:	88c00015 	stw	r3,0(r17)
 2002b74:	003ff706 	br	2002b54 <__alt_mem_onchip_memory2_0+0xfdff2b54>

02002b78 <_close_r>:
 2002b78:	defffd04 	addi	sp,sp,-12
 2002b7c:	dc000015 	stw	r16,0(sp)
 2002b80:	04008074 	movhi	r16,513
 2002b84:	dc400115 	stw	r17,4(sp)
 2002b88:	84230404 	addi	r16,r16,-29680
 2002b8c:	2023883a 	mov	r17,r4
 2002b90:	2809883a 	mov	r4,r5
 2002b94:	dfc00215 	stw	ra,8(sp)
 2002b98:	80000015 	stw	zero,0(r16)
 2002b9c:	2002fd80 	call	2002fd8 <close>
 2002ba0:	00ffffc4 	movi	r3,-1
 2002ba4:	10c00526 	beq	r2,r3,2002bbc <_close_r+0x44>
 2002ba8:	dfc00217 	ldw	ra,8(sp)
 2002bac:	dc400117 	ldw	r17,4(sp)
 2002bb0:	dc000017 	ldw	r16,0(sp)
 2002bb4:	dec00304 	addi	sp,sp,12
 2002bb8:	f800283a 	ret
 2002bbc:	80c00017 	ldw	r3,0(r16)
 2002bc0:	183ff926 	beq	r3,zero,2002ba8 <__alt_mem_onchip_memory2_0+0xfdff2ba8>
 2002bc4:	88c00015 	stw	r3,0(r17)
 2002bc8:	003ff706 	br	2002ba8 <__alt_mem_onchip_memory2_0+0xfdff2ba8>

02002bcc <_fclose_r>:
 2002bcc:	28003926 	beq	r5,zero,2002cb4 <_fclose_r+0xe8>
 2002bd0:	defffc04 	addi	sp,sp,-16
 2002bd4:	dc400115 	stw	r17,4(sp)
 2002bd8:	dc000015 	stw	r16,0(sp)
 2002bdc:	dfc00315 	stw	ra,12(sp)
 2002be0:	dc800215 	stw	r18,8(sp)
 2002be4:	2023883a 	mov	r17,r4
 2002be8:	2821883a 	mov	r16,r5
 2002bec:	20000226 	beq	r4,zero,2002bf8 <_fclose_r+0x2c>
 2002bf0:	20800e17 	ldw	r2,56(r4)
 2002bf4:	10002726 	beq	r2,zero,2002c94 <_fclose_r+0xc8>
 2002bf8:	8080030f 	ldh	r2,12(r16)
 2002bfc:	1000071e 	bne	r2,zero,2002c1c <_fclose_r+0x50>
 2002c00:	0005883a 	mov	r2,zero
 2002c04:	dfc00317 	ldw	ra,12(sp)
 2002c08:	dc800217 	ldw	r18,8(sp)
 2002c0c:	dc400117 	ldw	r17,4(sp)
 2002c10:	dc000017 	ldw	r16,0(sp)
 2002c14:	dec00404 	addi	sp,sp,16
 2002c18:	f800283a 	ret
 2002c1c:	8809883a 	mov	r4,r17
 2002c20:	800b883a 	mov	r5,r16
 2002c24:	2001b240 	call	2001b24 <__sflush_r>
 2002c28:	1025883a 	mov	r18,r2
 2002c2c:	80800b17 	ldw	r2,44(r16)
 2002c30:	10000426 	beq	r2,zero,2002c44 <_fclose_r+0x78>
 2002c34:	81400717 	ldw	r5,28(r16)
 2002c38:	8809883a 	mov	r4,r17
 2002c3c:	103ee83a 	callr	r2
 2002c40:	10001616 	blt	r2,zero,2002c9c <_fclose_r+0xd0>
 2002c44:	8080030b 	ldhu	r2,12(r16)
 2002c48:	1080200c 	andi	r2,r2,128
 2002c4c:	1000151e 	bne	r2,zero,2002ca4 <_fclose_r+0xd8>
 2002c50:	81400c17 	ldw	r5,48(r16)
 2002c54:	28000526 	beq	r5,zero,2002c6c <_fclose_r+0xa0>
 2002c58:	80801004 	addi	r2,r16,64
 2002c5c:	28800226 	beq	r5,r2,2002c68 <_fclose_r+0x9c>
 2002c60:	8809883a 	mov	r4,r17
 2002c64:	200228c0 	call	200228c <_free_r>
 2002c68:	80000c15 	stw	zero,48(r16)
 2002c6c:	81401117 	ldw	r5,68(r16)
 2002c70:	28000326 	beq	r5,zero,2002c80 <_fclose_r+0xb4>
 2002c74:	8809883a 	mov	r4,r17
 2002c78:	200228c0 	call	200228c <_free_r>
 2002c7c:	80001115 	stw	zero,68(r16)
 2002c80:	20021280 	call	2002128 <__sfp_lock_acquire>
 2002c84:	8000030d 	sth	zero,12(r16)
 2002c88:	200212c0 	call	200212c <__sfp_lock_release>
 2002c8c:	9005883a 	mov	r2,r18
 2002c90:	003fdc06 	br	2002c04 <__alt_mem_onchip_memory2_0+0xfdff2c04>
 2002c94:	20021180 	call	2002118 <__sinit>
 2002c98:	003fd706 	br	2002bf8 <__alt_mem_onchip_memory2_0+0xfdff2bf8>
 2002c9c:	04bfffc4 	movi	r18,-1
 2002ca0:	003fe806 	br	2002c44 <__alt_mem_onchip_memory2_0+0xfdff2c44>
 2002ca4:	81400417 	ldw	r5,16(r16)
 2002ca8:	8809883a 	mov	r4,r17
 2002cac:	200228c0 	call	200228c <_free_r>
 2002cb0:	003fe706 	br	2002c50 <__alt_mem_onchip_memory2_0+0xfdff2c50>
 2002cb4:	0005883a 	mov	r2,zero
 2002cb8:	f800283a 	ret

02002cbc <fclose>:
 2002cbc:	00808034 	movhi	r2,512
 2002cc0:	109c5904 	addi	r2,r2,29028
 2002cc4:	200b883a 	mov	r5,r4
 2002cc8:	11000017 	ldw	r4,0(r2)
 2002ccc:	2002bcc1 	jmpi	2002bcc <_fclose_r>

02002cd0 <_fstat_r>:
 2002cd0:	defffd04 	addi	sp,sp,-12
 2002cd4:	dc000015 	stw	r16,0(sp)
 2002cd8:	04008074 	movhi	r16,513
 2002cdc:	dc400115 	stw	r17,4(sp)
 2002ce0:	84230404 	addi	r16,r16,-29680
 2002ce4:	2023883a 	mov	r17,r4
 2002ce8:	2809883a 	mov	r4,r5
 2002cec:	300b883a 	mov	r5,r6
 2002cf0:	dfc00215 	stw	ra,8(sp)
 2002cf4:	80000015 	stw	zero,0(r16)
 2002cf8:	200312c0 	call	200312c <fstat>
 2002cfc:	00ffffc4 	movi	r3,-1
 2002d00:	10c00526 	beq	r2,r3,2002d18 <_fstat_r+0x48>
 2002d04:	dfc00217 	ldw	ra,8(sp)
 2002d08:	dc400117 	ldw	r17,4(sp)
 2002d0c:	dc000017 	ldw	r16,0(sp)
 2002d10:	dec00304 	addi	sp,sp,12
 2002d14:	f800283a 	ret
 2002d18:	80c00017 	ldw	r3,0(r16)
 2002d1c:	183ff926 	beq	r3,zero,2002d04 <__alt_mem_onchip_memory2_0+0xfdff2d04>
 2002d20:	88c00015 	stw	r3,0(r17)
 2002d24:	003ff706 	br	2002d04 <__alt_mem_onchip_memory2_0+0xfdff2d04>

02002d28 <_isatty_r>:
 2002d28:	defffd04 	addi	sp,sp,-12
 2002d2c:	dc000015 	stw	r16,0(sp)
 2002d30:	04008074 	movhi	r16,513
 2002d34:	dc400115 	stw	r17,4(sp)
 2002d38:	84230404 	addi	r16,r16,-29680
 2002d3c:	2023883a 	mov	r17,r4
 2002d40:	2809883a 	mov	r4,r5
 2002d44:	dfc00215 	stw	ra,8(sp)
 2002d48:	80000015 	stw	zero,0(r16)
 2002d4c:	20032340 	call	2003234 <isatty>
 2002d50:	00ffffc4 	movi	r3,-1
 2002d54:	10c00526 	beq	r2,r3,2002d6c <_isatty_r+0x44>
 2002d58:	dfc00217 	ldw	ra,8(sp)
 2002d5c:	dc400117 	ldw	r17,4(sp)
 2002d60:	dc000017 	ldw	r16,0(sp)
 2002d64:	dec00304 	addi	sp,sp,12
 2002d68:	f800283a 	ret
 2002d6c:	80c00017 	ldw	r3,0(r16)
 2002d70:	183ff926 	beq	r3,zero,2002d58 <__alt_mem_onchip_memory2_0+0xfdff2d58>
 2002d74:	88c00015 	stw	r3,0(r17)
 2002d78:	003ff706 	br	2002d58 <__alt_mem_onchip_memory2_0+0xfdff2d58>

02002d7c <_lseek_r>:
 2002d7c:	defffd04 	addi	sp,sp,-12
 2002d80:	dc000015 	stw	r16,0(sp)
 2002d84:	04008074 	movhi	r16,513
 2002d88:	dc400115 	stw	r17,4(sp)
 2002d8c:	84230404 	addi	r16,r16,-29680
 2002d90:	2023883a 	mov	r17,r4
 2002d94:	2809883a 	mov	r4,r5
 2002d98:	300b883a 	mov	r5,r6
 2002d9c:	380d883a 	mov	r6,r7
 2002da0:	dfc00215 	stw	ra,8(sp)
 2002da4:	80000015 	stw	zero,0(r16)
 2002da8:	20034140 	call	2003414 <lseek>
 2002dac:	00ffffc4 	movi	r3,-1
 2002db0:	10c00526 	beq	r2,r3,2002dc8 <_lseek_r+0x4c>
 2002db4:	dfc00217 	ldw	ra,8(sp)
 2002db8:	dc400117 	ldw	r17,4(sp)
 2002dbc:	dc000017 	ldw	r16,0(sp)
 2002dc0:	dec00304 	addi	sp,sp,12
 2002dc4:	f800283a 	ret
 2002dc8:	80c00017 	ldw	r3,0(r16)
 2002dcc:	183ff926 	beq	r3,zero,2002db4 <__alt_mem_onchip_memory2_0+0xfdff2db4>
 2002dd0:	88c00015 	stw	r3,0(r17)
 2002dd4:	003ff706 	br	2002db4 <__alt_mem_onchip_memory2_0+0xfdff2db4>

02002dd8 <_read_r>:
 2002dd8:	defffd04 	addi	sp,sp,-12
 2002ddc:	dc000015 	stw	r16,0(sp)
 2002de0:	04008074 	movhi	r16,513
 2002de4:	dc400115 	stw	r17,4(sp)
 2002de8:	84230404 	addi	r16,r16,-29680
 2002dec:	2023883a 	mov	r17,r4
 2002df0:	2809883a 	mov	r4,r5
 2002df4:	300b883a 	mov	r5,r6
 2002df8:	380d883a 	mov	r6,r7
 2002dfc:	dfc00215 	stw	ra,8(sp)
 2002e00:	80000015 	stw	zero,0(r16)
 2002e04:	20035f80 	call	20035f8 <read>
 2002e08:	00ffffc4 	movi	r3,-1
 2002e0c:	10c00526 	beq	r2,r3,2002e24 <_read_r+0x4c>
 2002e10:	dfc00217 	ldw	ra,8(sp)
 2002e14:	dc400117 	ldw	r17,4(sp)
 2002e18:	dc000017 	ldw	r16,0(sp)
 2002e1c:	dec00304 	addi	sp,sp,12
 2002e20:	f800283a 	ret
 2002e24:	80c00017 	ldw	r3,0(r16)
 2002e28:	183ff926 	beq	r3,zero,2002e10 <__alt_mem_onchip_memory2_0+0xfdff2e10>
 2002e2c:	88c00015 	stw	r3,0(r17)
 2002e30:	003ff706 	br	2002e10 <__alt_mem_onchip_memory2_0+0xfdff2e10>

02002e34 <udivmodsi4>:
 2002e34:	2900182e 	bgeu	r5,r4,2002e98 <udivmodsi4+0x64>
 2002e38:	28001716 	blt	r5,zero,2002e98 <udivmodsi4+0x64>
 2002e3c:	00800804 	movi	r2,32
 2002e40:	00c00044 	movi	r3,1
 2002e44:	00000206 	br	2002e50 <udivmodsi4+0x1c>
 2002e48:	10001126 	beq	r2,zero,2002e90 <udivmodsi4+0x5c>
 2002e4c:	28000516 	blt	r5,zero,2002e64 <udivmodsi4+0x30>
 2002e50:	294b883a 	add	r5,r5,r5
 2002e54:	10bfffc4 	addi	r2,r2,-1
 2002e58:	18c7883a 	add	r3,r3,r3
 2002e5c:	293ffa36 	bltu	r5,r4,2002e48 <__alt_mem_onchip_memory2_0+0xfdff2e48>
 2002e60:	18000b26 	beq	r3,zero,2002e90 <udivmodsi4+0x5c>
 2002e64:	0005883a 	mov	r2,zero
 2002e68:	21400236 	bltu	r4,r5,2002e74 <udivmodsi4+0x40>
 2002e6c:	2149c83a 	sub	r4,r4,r5
 2002e70:	10c4b03a 	or	r2,r2,r3
 2002e74:	1806d07a 	srli	r3,r3,1
 2002e78:	280ad07a 	srli	r5,r5,1
 2002e7c:	183ffa1e 	bne	r3,zero,2002e68 <__alt_mem_onchip_memory2_0+0xfdff2e68>
 2002e80:	3000011e 	bne	r6,zero,2002e88 <udivmodsi4+0x54>
 2002e84:	f800283a 	ret
 2002e88:	2005883a 	mov	r2,r4
 2002e8c:	f800283a 	ret
 2002e90:	0005883a 	mov	r2,zero
 2002e94:	003ffa06 	br	2002e80 <__alt_mem_onchip_memory2_0+0xfdff2e80>
 2002e98:	00c00044 	movi	r3,1
 2002e9c:	003ff106 	br	2002e64 <__alt_mem_onchip_memory2_0+0xfdff2e64>

02002ea0 <__divsi3>:
 2002ea0:	defffe04 	addi	sp,sp,-8
 2002ea4:	dfc00115 	stw	ra,4(sp)
 2002ea8:	dc000015 	stw	r16,0(sp)
 2002eac:	20000b16 	blt	r4,zero,2002edc <__divsi3+0x3c>
 2002eb0:	0021883a 	mov	r16,zero
 2002eb4:	28000c16 	blt	r5,zero,2002ee8 <__divsi3+0x48>
 2002eb8:	000d883a 	mov	r6,zero
 2002ebc:	2002e340 	call	2002e34 <udivmodsi4>
 2002ec0:	0407c83a 	sub	r3,zero,r16
 2002ec4:	1884f03a 	xor	r2,r3,r2
 2002ec8:	1405883a 	add	r2,r2,r16
 2002ecc:	dfc00117 	ldw	ra,4(sp)
 2002ed0:	dc000017 	ldw	r16,0(sp)
 2002ed4:	dec00204 	addi	sp,sp,8
 2002ed8:	f800283a 	ret
 2002edc:	0109c83a 	sub	r4,zero,r4
 2002ee0:	04000044 	movi	r16,1
 2002ee4:	283ff40e 	bge	r5,zero,2002eb8 <__alt_mem_onchip_memory2_0+0xfdff2eb8>
 2002ee8:	014bc83a 	sub	r5,zero,r5
 2002eec:	8400005c 	xori	r16,r16,1
 2002ef0:	003ff106 	br	2002eb8 <__alt_mem_onchip_memory2_0+0xfdff2eb8>

02002ef4 <__modsi3>:
 2002ef4:	defffd04 	addi	sp,sp,-12
 2002ef8:	dfc00215 	stw	ra,8(sp)
 2002efc:	dc400115 	stw	r17,4(sp)
 2002f00:	dc000015 	stw	r16,0(sp)
 2002f04:	20000c16 	blt	r4,zero,2002f38 <__modsi3+0x44>
 2002f08:	0023883a 	mov	r17,zero
 2002f0c:	0021883a 	mov	r16,zero
 2002f10:	28000d16 	blt	r5,zero,2002f48 <__modsi3+0x54>
 2002f14:	01800044 	movi	r6,1
 2002f18:	2002e340 	call	2002e34 <udivmodsi4>
 2002f1c:	1404f03a 	xor	r2,r2,r16
 2002f20:	8885883a 	add	r2,r17,r2
 2002f24:	dfc00217 	ldw	ra,8(sp)
 2002f28:	dc400117 	ldw	r17,4(sp)
 2002f2c:	dc000017 	ldw	r16,0(sp)
 2002f30:	dec00304 	addi	sp,sp,12
 2002f34:	f800283a 	ret
 2002f38:	0109c83a 	sub	r4,zero,r4
 2002f3c:	04400044 	movi	r17,1
 2002f40:	043fffc4 	movi	r16,-1
 2002f44:	283ff30e 	bge	r5,zero,2002f14 <__alt_mem_onchip_memory2_0+0xfdff2f14>
 2002f48:	014bc83a 	sub	r5,zero,r5
 2002f4c:	003ff106 	br	2002f14 <__alt_mem_onchip_memory2_0+0xfdff2f14>

02002f50 <__udivsi3>:
 2002f50:	000d883a 	mov	r6,zero
 2002f54:	2002e341 	jmpi	2002e34 <udivmodsi4>

02002f58 <__umodsi3>:
 2002f58:	01800044 	movi	r6,1
 2002f5c:	2002e341 	jmpi	2002e34 <udivmodsi4>

02002f60 <__mulsi3>:
 2002f60:	0005883a 	mov	r2,zero
 2002f64:	20000726 	beq	r4,zero,2002f84 <__mulsi3+0x24>
 2002f68:	20c0004c 	andi	r3,r4,1
 2002f6c:	2008d07a 	srli	r4,r4,1
 2002f70:	18000126 	beq	r3,zero,2002f78 <__mulsi3+0x18>
 2002f74:	1145883a 	add	r2,r2,r5
 2002f78:	294b883a 	add	r5,r5,r5
 2002f7c:	203ffa1e 	bne	r4,zero,2002f68 <__alt_mem_onchip_memory2_0+0xfdff2f68>
 2002f80:	f800283a 	ret
 2002f84:	f800283a 	ret

02002f88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002f88:	defffe04 	addi	sp,sp,-8
 2002f8c:	dfc00115 	stw	ra,4(sp)
 2002f90:	df000015 	stw	fp,0(sp)
 2002f94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002f98:	00808034 	movhi	r2,512
 2002f9c:	109c6104 	addi	r2,r2,29060
 2002fa0:	10800017 	ldw	r2,0(r2)
 2002fa4:	10000526 	beq	r2,zero,2002fbc <alt_get_errno+0x34>
 2002fa8:	00808034 	movhi	r2,512
 2002fac:	109c6104 	addi	r2,r2,29060
 2002fb0:	10800017 	ldw	r2,0(r2)
 2002fb4:	103ee83a 	callr	r2
 2002fb8:	00000206 	br	2002fc4 <alt_get_errno+0x3c>
 2002fbc:	00808074 	movhi	r2,513
 2002fc0:	10a30404 	addi	r2,r2,-29680
}
 2002fc4:	e037883a 	mov	sp,fp
 2002fc8:	dfc00117 	ldw	ra,4(sp)
 2002fcc:	df000017 	ldw	fp,0(sp)
 2002fd0:	dec00204 	addi	sp,sp,8
 2002fd4:	f800283a 	ret

02002fd8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002fd8:	defffb04 	addi	sp,sp,-20
 2002fdc:	dfc00415 	stw	ra,16(sp)
 2002fe0:	df000315 	stw	fp,12(sp)
 2002fe4:	df000304 	addi	fp,sp,12
 2002fe8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002fec:	e0bfff17 	ldw	r2,-4(fp)
 2002ff0:	10000816 	blt	r2,zero,2003014 <close+0x3c>
 2002ff4:	e13fff17 	ldw	r4,-4(fp)
 2002ff8:	01400304 	movi	r5,12
 2002ffc:	2002f600 	call	2002f60 <__mulsi3>
 2003000:	1007883a 	mov	r3,r2
 2003004:	00808034 	movhi	r2,512
 2003008:	1097e004 	addi	r2,r2,24448
 200300c:	1885883a 	add	r2,r3,r2
 2003010:	00000106 	br	2003018 <close+0x40>
 2003014:	0005883a 	mov	r2,zero
 2003018:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200301c:	e0bffd17 	ldw	r2,-12(fp)
 2003020:	10001926 	beq	r2,zero,2003088 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2003024:	e0bffd17 	ldw	r2,-12(fp)
 2003028:	10800017 	ldw	r2,0(r2)
 200302c:	10800417 	ldw	r2,16(r2)
 2003030:	10000626 	beq	r2,zero,200304c <close+0x74>
 2003034:	e0bffd17 	ldw	r2,-12(fp)
 2003038:	10800017 	ldw	r2,0(r2)
 200303c:	10800417 	ldw	r2,16(r2)
 2003040:	e13ffd17 	ldw	r4,-12(fp)
 2003044:	103ee83a 	callr	r2
 2003048:	00000106 	br	2003050 <close+0x78>
 200304c:	0005883a 	mov	r2,zero
 2003050:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2003054:	e13fff17 	ldw	r4,-4(fp)
 2003058:	20036fc0 	call	20036fc <alt_release_fd>
    if (rval < 0)
 200305c:	e0bffe17 	ldw	r2,-8(fp)
 2003060:	1000070e 	bge	r2,zero,2003080 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 2003064:	2002f880 	call	2002f88 <alt_get_errno>
 2003068:	1007883a 	mov	r3,r2
 200306c:	e0bffe17 	ldw	r2,-8(fp)
 2003070:	0085c83a 	sub	r2,zero,r2
 2003074:	18800015 	stw	r2,0(r3)
      return -1;
 2003078:	00bfffc4 	movi	r2,-1
 200307c:	00000706 	br	200309c <close+0xc4>
    }
    return 0;
 2003080:	0005883a 	mov	r2,zero
 2003084:	00000506 	br	200309c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003088:	2002f880 	call	2002f88 <alt_get_errno>
 200308c:	1007883a 	mov	r3,r2
 2003090:	00801444 	movi	r2,81
 2003094:	18800015 	stw	r2,0(r3)
    return -1;
 2003098:	00bfffc4 	movi	r2,-1
  }
}
 200309c:	e037883a 	mov	sp,fp
 20030a0:	dfc00117 	ldw	ra,4(sp)
 20030a4:	df000017 	ldw	fp,0(sp)
 20030a8:	dec00204 	addi	sp,sp,8
 20030ac:	f800283a 	ret

020030b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 20030b0:	defffc04 	addi	sp,sp,-16
 20030b4:	df000315 	stw	fp,12(sp)
 20030b8:	df000304 	addi	fp,sp,12
 20030bc:	e13ffd15 	stw	r4,-12(fp)
 20030c0:	e17ffe15 	stw	r5,-8(fp)
 20030c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 20030c8:	e0bfff17 	ldw	r2,-4(fp)
}
 20030cc:	e037883a 	mov	sp,fp
 20030d0:	df000017 	ldw	fp,0(sp)
 20030d4:	dec00104 	addi	sp,sp,4
 20030d8:	f800283a 	ret

020030dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20030dc:	defffe04 	addi	sp,sp,-8
 20030e0:	dfc00115 	stw	ra,4(sp)
 20030e4:	df000015 	stw	fp,0(sp)
 20030e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20030ec:	00808034 	movhi	r2,512
 20030f0:	109c6104 	addi	r2,r2,29060
 20030f4:	10800017 	ldw	r2,0(r2)
 20030f8:	10000526 	beq	r2,zero,2003110 <alt_get_errno+0x34>
 20030fc:	00808034 	movhi	r2,512
 2003100:	109c6104 	addi	r2,r2,29060
 2003104:	10800017 	ldw	r2,0(r2)
 2003108:	103ee83a 	callr	r2
 200310c:	00000206 	br	2003118 <alt_get_errno+0x3c>
 2003110:	00808074 	movhi	r2,513
 2003114:	10a30404 	addi	r2,r2,-29680
}
 2003118:	e037883a 	mov	sp,fp
 200311c:	dfc00117 	ldw	ra,4(sp)
 2003120:	df000017 	ldw	fp,0(sp)
 2003124:	dec00204 	addi	sp,sp,8
 2003128:	f800283a 	ret

0200312c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200312c:	defffb04 	addi	sp,sp,-20
 2003130:	dfc00415 	stw	ra,16(sp)
 2003134:	df000315 	stw	fp,12(sp)
 2003138:	df000304 	addi	fp,sp,12
 200313c:	e13ffe15 	stw	r4,-8(fp)
 2003140:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003144:	e0bffe17 	ldw	r2,-8(fp)
 2003148:	10000816 	blt	r2,zero,200316c <fstat+0x40>
 200314c:	e13ffe17 	ldw	r4,-8(fp)
 2003150:	01400304 	movi	r5,12
 2003154:	2002f600 	call	2002f60 <__mulsi3>
 2003158:	1007883a 	mov	r3,r2
 200315c:	00808034 	movhi	r2,512
 2003160:	1097e004 	addi	r2,r2,24448
 2003164:	1885883a 	add	r2,r3,r2
 2003168:	00000106 	br	2003170 <fstat+0x44>
 200316c:	0005883a 	mov	r2,zero
 2003170:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2003174:	e0bffd17 	ldw	r2,-12(fp)
 2003178:	10001026 	beq	r2,zero,20031bc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200317c:	e0bffd17 	ldw	r2,-12(fp)
 2003180:	10800017 	ldw	r2,0(r2)
 2003184:	10800817 	ldw	r2,32(r2)
 2003188:	10000726 	beq	r2,zero,20031a8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200318c:	e0bffd17 	ldw	r2,-12(fp)
 2003190:	10800017 	ldw	r2,0(r2)
 2003194:	10800817 	ldw	r2,32(r2)
 2003198:	e13ffd17 	ldw	r4,-12(fp)
 200319c:	e17fff17 	ldw	r5,-4(fp)
 20031a0:	103ee83a 	callr	r2
 20031a4:	00000a06 	br	20031d0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20031a8:	e0bfff17 	ldw	r2,-4(fp)
 20031ac:	00c80004 	movi	r3,8192
 20031b0:	10c00115 	stw	r3,4(r2)
      return 0;
 20031b4:	0005883a 	mov	r2,zero
 20031b8:	00000506 	br	20031d0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20031bc:	20030dc0 	call	20030dc <alt_get_errno>
 20031c0:	1007883a 	mov	r3,r2
 20031c4:	00801444 	movi	r2,81
 20031c8:	18800015 	stw	r2,0(r3)
    return -1;
 20031cc:	00bfffc4 	movi	r2,-1
  }
}
 20031d0:	e037883a 	mov	sp,fp
 20031d4:	dfc00117 	ldw	ra,4(sp)
 20031d8:	df000017 	ldw	fp,0(sp)
 20031dc:	dec00204 	addi	sp,sp,8
 20031e0:	f800283a 	ret

020031e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20031e4:	defffe04 	addi	sp,sp,-8
 20031e8:	dfc00115 	stw	ra,4(sp)
 20031ec:	df000015 	stw	fp,0(sp)
 20031f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20031f4:	00808034 	movhi	r2,512
 20031f8:	109c6104 	addi	r2,r2,29060
 20031fc:	10800017 	ldw	r2,0(r2)
 2003200:	10000526 	beq	r2,zero,2003218 <alt_get_errno+0x34>
 2003204:	00808034 	movhi	r2,512
 2003208:	109c6104 	addi	r2,r2,29060
 200320c:	10800017 	ldw	r2,0(r2)
 2003210:	103ee83a 	callr	r2
 2003214:	00000206 	br	2003220 <alt_get_errno+0x3c>
 2003218:	00808074 	movhi	r2,513
 200321c:	10a30404 	addi	r2,r2,-29680
}
 2003220:	e037883a 	mov	sp,fp
 2003224:	dfc00117 	ldw	ra,4(sp)
 2003228:	df000017 	ldw	fp,0(sp)
 200322c:	dec00204 	addi	sp,sp,8
 2003230:	f800283a 	ret

02003234 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2003234:	deffed04 	addi	sp,sp,-76
 2003238:	dfc01215 	stw	ra,72(sp)
 200323c:	df001115 	stw	fp,68(sp)
 2003240:	df001104 	addi	fp,sp,68
 2003244:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003248:	e0bfff17 	ldw	r2,-4(fp)
 200324c:	10000816 	blt	r2,zero,2003270 <isatty+0x3c>
 2003250:	e13fff17 	ldw	r4,-4(fp)
 2003254:	01400304 	movi	r5,12
 2003258:	2002f600 	call	2002f60 <__mulsi3>
 200325c:	1007883a 	mov	r3,r2
 2003260:	00808034 	movhi	r2,512
 2003264:	1097e004 	addi	r2,r2,24448
 2003268:	1885883a 	add	r2,r3,r2
 200326c:	00000106 	br	2003274 <isatty+0x40>
 2003270:	0005883a 	mov	r2,zero
 2003274:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2003278:	e0bfef17 	ldw	r2,-68(fp)
 200327c:	10000e26 	beq	r2,zero,20032b8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2003280:	e0bfef17 	ldw	r2,-68(fp)
 2003284:	10800017 	ldw	r2,0(r2)
 2003288:	10800817 	ldw	r2,32(r2)
 200328c:	1000021e 	bne	r2,zero,2003298 <isatty+0x64>
    {
      return 1;
 2003290:	00800044 	movi	r2,1
 2003294:	00000d06 	br	20032cc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2003298:	e0bff004 	addi	r2,fp,-64
 200329c:	e13fff17 	ldw	r4,-4(fp)
 20032a0:	100b883a 	mov	r5,r2
 20032a4:	200312c0 	call	200312c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20032a8:	e0bff117 	ldw	r2,-60(fp)
 20032ac:	10880020 	cmpeqi	r2,r2,8192
 20032b0:	10803fcc 	andi	r2,r2,255
 20032b4:	00000506 	br	20032cc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20032b8:	20031e40 	call	20031e4 <alt_get_errno>
 20032bc:	1007883a 	mov	r3,r2
 20032c0:	00801444 	movi	r2,81
 20032c4:	18800015 	stw	r2,0(r3)
    return 0;
 20032c8:	0005883a 	mov	r2,zero
  }
}
 20032cc:	e037883a 	mov	sp,fp
 20032d0:	dfc00117 	ldw	ra,4(sp)
 20032d4:	df000017 	ldw	fp,0(sp)
 20032d8:	dec00204 	addi	sp,sp,8
 20032dc:	f800283a 	ret

020032e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20032e0:	defffc04 	addi	sp,sp,-16
 20032e4:	df000315 	stw	fp,12(sp)
 20032e8:	df000304 	addi	fp,sp,12
 20032ec:	e13ffd15 	stw	r4,-12(fp)
 20032f0:	e17ffe15 	stw	r5,-8(fp)
 20032f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 20032f8:	e0fffe17 	ldw	r3,-8(fp)
 20032fc:	e0bffd17 	ldw	r2,-12(fp)
 2003300:	18800c26 	beq	r3,r2,2003334 <alt_load_section+0x54>
  {
    while( to != end )
 2003304:	00000806 	br	2003328 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2003308:	e0bffe17 	ldw	r2,-8(fp)
 200330c:	10c00104 	addi	r3,r2,4
 2003310:	e0fffe15 	stw	r3,-8(fp)
 2003314:	e0fffd17 	ldw	r3,-12(fp)
 2003318:	19000104 	addi	r4,r3,4
 200331c:	e13ffd15 	stw	r4,-12(fp)
 2003320:	18c00017 	ldw	r3,0(r3)
 2003324:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2003328:	e0fffe17 	ldw	r3,-8(fp)
 200332c:	e0bfff17 	ldw	r2,-4(fp)
 2003330:	18bff51e 	bne	r3,r2,2003308 <__alt_mem_onchip_memory2_0+0xfdff3308>
    {
      *to++ = *from++;
    }
  }
}
 2003334:	e037883a 	mov	sp,fp
 2003338:	df000017 	ldw	fp,0(sp)
 200333c:	dec00104 	addi	sp,sp,4
 2003340:	f800283a 	ret

02003344 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2003344:	defffe04 	addi	sp,sp,-8
 2003348:	dfc00115 	stw	ra,4(sp)
 200334c:	df000015 	stw	fp,0(sp)
 2003350:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2003354:	01008034 	movhi	r4,512
 2003358:	211c6604 	addi	r4,r4,29080
 200335c:	01408034 	movhi	r5,512
 2003360:	2955cb04 	addi	r5,r5,22316
 2003364:	01808034 	movhi	r6,512
 2003368:	319c6604 	addi	r6,r6,29080
 200336c:	20032e00 	call	20032e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2003370:	01008034 	movhi	r4,512
 2003374:	21000804 	addi	r4,r4,32
 2003378:	01408034 	movhi	r5,512
 200337c:	29400804 	addi	r5,r5,32
 2003380:	01808034 	movhi	r6,512
 2003384:	31808b04 	addi	r6,r6,556
 2003388:	20032e00 	call	20032e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200338c:	01008034 	movhi	r4,512
 2003390:	2115b704 	addi	r4,r4,22236
 2003394:	01408034 	movhi	r5,512
 2003398:	2955b704 	addi	r5,r5,22236
 200339c:	01808034 	movhi	r6,512
 20033a0:	3195cb04 	addi	r6,r6,22316
 20033a4:	20032e00 	call	20032e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20033a8:	20045b80 	call	20045b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20033ac:	20047800 	call	2004780 <alt_icache_flush_all>
}
 20033b0:	e037883a 	mov	sp,fp
 20033b4:	dfc00117 	ldw	ra,4(sp)
 20033b8:	df000017 	ldw	fp,0(sp)
 20033bc:	dec00204 	addi	sp,sp,8
 20033c0:	f800283a 	ret

020033c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20033c4:	defffe04 	addi	sp,sp,-8
 20033c8:	dfc00115 	stw	ra,4(sp)
 20033cc:	df000015 	stw	fp,0(sp)
 20033d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20033d4:	00808034 	movhi	r2,512
 20033d8:	109c6104 	addi	r2,r2,29060
 20033dc:	10800017 	ldw	r2,0(r2)
 20033e0:	10000526 	beq	r2,zero,20033f8 <alt_get_errno+0x34>
 20033e4:	00808034 	movhi	r2,512
 20033e8:	109c6104 	addi	r2,r2,29060
 20033ec:	10800017 	ldw	r2,0(r2)
 20033f0:	103ee83a 	callr	r2
 20033f4:	00000206 	br	2003400 <alt_get_errno+0x3c>
 20033f8:	00808074 	movhi	r2,513
 20033fc:	10a30404 	addi	r2,r2,-29680
}
 2003400:	e037883a 	mov	sp,fp
 2003404:	dfc00117 	ldw	ra,4(sp)
 2003408:	df000017 	ldw	fp,0(sp)
 200340c:	dec00204 	addi	sp,sp,8
 2003410:	f800283a 	ret

02003414 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2003414:	defff904 	addi	sp,sp,-28
 2003418:	dfc00615 	stw	ra,24(sp)
 200341c:	df000515 	stw	fp,20(sp)
 2003420:	df000504 	addi	fp,sp,20
 2003424:	e13ffd15 	stw	r4,-12(fp)
 2003428:	e17ffe15 	stw	r5,-8(fp)
 200342c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2003430:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003434:	e0bffd17 	ldw	r2,-12(fp)
 2003438:	10000816 	blt	r2,zero,200345c <lseek+0x48>
 200343c:	e13ffd17 	ldw	r4,-12(fp)
 2003440:	01400304 	movi	r5,12
 2003444:	2002f600 	call	2002f60 <__mulsi3>
 2003448:	1007883a 	mov	r3,r2
 200344c:	00808034 	movhi	r2,512
 2003450:	1097e004 	addi	r2,r2,24448
 2003454:	1885883a 	add	r2,r3,r2
 2003458:	00000106 	br	2003460 <lseek+0x4c>
 200345c:	0005883a 	mov	r2,zero
 2003460:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2003464:	e0bffc17 	ldw	r2,-16(fp)
 2003468:	10001026 	beq	r2,zero,20034ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200346c:	e0bffc17 	ldw	r2,-16(fp)
 2003470:	10800017 	ldw	r2,0(r2)
 2003474:	10800717 	ldw	r2,28(r2)
 2003478:	10000926 	beq	r2,zero,20034a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200347c:	e0bffc17 	ldw	r2,-16(fp)
 2003480:	10800017 	ldw	r2,0(r2)
 2003484:	10800717 	ldw	r2,28(r2)
 2003488:	e13ffc17 	ldw	r4,-16(fp)
 200348c:	e17ffe17 	ldw	r5,-8(fp)
 2003490:	e1bfff17 	ldw	r6,-4(fp)
 2003494:	103ee83a 	callr	r2
 2003498:	e0bffb15 	stw	r2,-20(fp)
 200349c:	00000506 	br	20034b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 20034a0:	00bfde84 	movi	r2,-134
 20034a4:	e0bffb15 	stw	r2,-20(fp)
 20034a8:	00000206 	br	20034b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 20034ac:	00bfebc4 	movi	r2,-81
 20034b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20034b4:	e0bffb17 	ldw	r2,-20(fp)
 20034b8:	1000070e 	bge	r2,zero,20034d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 20034bc:	20033c40 	call	20033c4 <alt_get_errno>
 20034c0:	1007883a 	mov	r3,r2
 20034c4:	e0bffb17 	ldw	r2,-20(fp)
 20034c8:	0085c83a 	sub	r2,zero,r2
 20034cc:	18800015 	stw	r2,0(r3)
    rc = -1;
 20034d0:	00bfffc4 	movi	r2,-1
 20034d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20034d8:	e0bffb17 	ldw	r2,-20(fp)
}
 20034dc:	e037883a 	mov	sp,fp
 20034e0:	dfc00117 	ldw	ra,4(sp)
 20034e4:	df000017 	ldw	fp,0(sp)
 20034e8:	dec00204 	addi	sp,sp,8
 20034ec:	f800283a 	ret

020034f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20034f0:	defffd04 	addi	sp,sp,-12
 20034f4:	dfc00215 	stw	ra,8(sp)
 20034f8:	df000115 	stw	fp,4(sp)
 20034fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2003500:	0009883a 	mov	r4,zero
 2003504:	20039b40 	call	20039b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2003508:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200350c:	20039e80 	call	20039e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2003510:	01008034 	movhi	r4,512
 2003514:	2115c104 	addi	r4,r4,22276
 2003518:	01408034 	movhi	r5,512
 200351c:	2955c104 	addi	r5,r5,22276
 2003520:	01808034 	movhi	r6,512
 2003524:	3195c104 	addi	r6,r6,22276
 2003528:	2004b4c0 	call	2004b4c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200352c:	20046c80 	call	20046c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2003530:	01008034 	movhi	r4,512
 2003534:	2111c904 	addi	r4,r4,18212
 2003538:	20053380 	call	2005338 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200353c:	d126ad17 	ldw	r4,-25932(gp)
 2003540:	d0e6ae17 	ldw	r3,-25928(gp)
 2003544:	d0a6af17 	ldw	r2,-25924(gp)
 2003548:	180b883a 	mov	r5,r3
 200354c:	100d883a 	mov	r6,r2
 2003550:	20002680 	call	2000268 <main>
 2003554:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2003558:	01000044 	movi	r4,1
 200355c:	2002fd80 	call	2002fd8 <close>
  exit (result);
 2003560:	e13fff17 	ldw	r4,-4(fp)
 2003564:	200534c0 	call	200534c <exit>

02003568 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2003568:	defffe04 	addi	sp,sp,-8
 200356c:	df000115 	stw	fp,4(sp)
 2003570:	df000104 	addi	fp,sp,4
 2003574:	e13fff15 	stw	r4,-4(fp)
}
 2003578:	e037883a 	mov	sp,fp
 200357c:	df000017 	ldw	fp,0(sp)
 2003580:	dec00104 	addi	sp,sp,4
 2003584:	f800283a 	ret

02003588 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2003588:	defffe04 	addi	sp,sp,-8
 200358c:	df000115 	stw	fp,4(sp)
 2003590:	df000104 	addi	fp,sp,4
 2003594:	e13fff15 	stw	r4,-4(fp)
}
 2003598:	e037883a 	mov	sp,fp
 200359c:	df000017 	ldw	fp,0(sp)
 20035a0:	dec00104 	addi	sp,sp,4
 20035a4:	f800283a 	ret

020035a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20035a8:	defffe04 	addi	sp,sp,-8
 20035ac:	dfc00115 	stw	ra,4(sp)
 20035b0:	df000015 	stw	fp,0(sp)
 20035b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20035b8:	00808034 	movhi	r2,512
 20035bc:	109c6104 	addi	r2,r2,29060
 20035c0:	10800017 	ldw	r2,0(r2)
 20035c4:	10000526 	beq	r2,zero,20035dc <alt_get_errno+0x34>
 20035c8:	00808034 	movhi	r2,512
 20035cc:	109c6104 	addi	r2,r2,29060
 20035d0:	10800017 	ldw	r2,0(r2)
 20035d4:	103ee83a 	callr	r2
 20035d8:	00000206 	br	20035e4 <alt_get_errno+0x3c>
 20035dc:	00808074 	movhi	r2,513
 20035e0:	10a30404 	addi	r2,r2,-29680
}
 20035e4:	e037883a 	mov	sp,fp
 20035e8:	dfc00117 	ldw	ra,4(sp)
 20035ec:	df000017 	ldw	fp,0(sp)
 20035f0:	dec00204 	addi	sp,sp,8
 20035f4:	f800283a 	ret

020035f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20035f8:	defff904 	addi	sp,sp,-28
 20035fc:	dfc00615 	stw	ra,24(sp)
 2003600:	df000515 	stw	fp,20(sp)
 2003604:	df000504 	addi	fp,sp,20
 2003608:	e13ffd15 	stw	r4,-12(fp)
 200360c:	e17ffe15 	stw	r5,-8(fp)
 2003610:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003614:	e0bffd17 	ldw	r2,-12(fp)
 2003618:	10000816 	blt	r2,zero,200363c <read+0x44>
 200361c:	e13ffd17 	ldw	r4,-12(fp)
 2003620:	01400304 	movi	r5,12
 2003624:	2002f600 	call	2002f60 <__mulsi3>
 2003628:	1007883a 	mov	r3,r2
 200362c:	00808034 	movhi	r2,512
 2003630:	1097e004 	addi	r2,r2,24448
 2003634:	1885883a 	add	r2,r3,r2
 2003638:	00000106 	br	2003640 <read+0x48>
 200363c:	0005883a 	mov	r2,zero
 2003640:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003644:	e0bffb17 	ldw	r2,-20(fp)
 2003648:	10002226 	beq	r2,zero,20036d4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200364c:	e0bffb17 	ldw	r2,-20(fp)
 2003650:	10800217 	ldw	r2,8(r2)
 2003654:	108000cc 	andi	r2,r2,3
 2003658:	10800060 	cmpeqi	r2,r2,1
 200365c:	1000181e 	bne	r2,zero,20036c0 <read+0xc8>
        (fd->dev->read))
 2003660:	e0bffb17 	ldw	r2,-20(fp)
 2003664:	10800017 	ldw	r2,0(r2)
 2003668:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200366c:	10001426 	beq	r2,zero,20036c0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2003670:	e0bffb17 	ldw	r2,-20(fp)
 2003674:	10800017 	ldw	r2,0(r2)
 2003678:	10800517 	ldw	r2,20(r2)
 200367c:	e0ffff17 	ldw	r3,-4(fp)
 2003680:	e13ffb17 	ldw	r4,-20(fp)
 2003684:	e17ffe17 	ldw	r5,-8(fp)
 2003688:	180d883a 	mov	r6,r3
 200368c:	103ee83a 	callr	r2
 2003690:	e0bffc15 	stw	r2,-16(fp)
 2003694:	e0bffc17 	ldw	r2,-16(fp)
 2003698:	1000070e 	bge	r2,zero,20036b8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200369c:	20035a80 	call	20035a8 <alt_get_errno>
 20036a0:	1007883a 	mov	r3,r2
 20036a4:	e0bffc17 	ldw	r2,-16(fp)
 20036a8:	0085c83a 	sub	r2,zero,r2
 20036ac:	18800015 	stw	r2,0(r3)
          return -1;
 20036b0:	00bfffc4 	movi	r2,-1
 20036b4:	00000c06 	br	20036e8 <read+0xf0>
        }
        return rval;
 20036b8:	e0bffc17 	ldw	r2,-16(fp)
 20036bc:	00000a06 	br	20036e8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20036c0:	20035a80 	call	20035a8 <alt_get_errno>
 20036c4:	1007883a 	mov	r3,r2
 20036c8:	00800344 	movi	r2,13
 20036cc:	18800015 	stw	r2,0(r3)
 20036d0:	00000406 	br	20036e4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20036d4:	20035a80 	call	20035a8 <alt_get_errno>
 20036d8:	1007883a 	mov	r3,r2
 20036dc:	00801444 	movi	r2,81
 20036e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20036e4:	00bfffc4 	movi	r2,-1
}
 20036e8:	e037883a 	mov	sp,fp
 20036ec:	dfc00117 	ldw	ra,4(sp)
 20036f0:	df000017 	ldw	fp,0(sp)
 20036f4:	dec00204 	addi	sp,sp,8
 20036f8:	f800283a 	ret

020036fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20036fc:	defffc04 	addi	sp,sp,-16
 2003700:	dfc00315 	stw	ra,12(sp)
 2003704:	df000215 	stw	fp,8(sp)
 2003708:	dc000115 	stw	r16,4(sp)
 200370c:	df000204 	addi	fp,sp,8
 2003710:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 2003714:	e0bffe17 	ldw	r2,-8(fp)
 2003718:	108000d0 	cmplti	r2,r2,3
 200371c:	1000111e 	bne	r2,zero,2003764 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 2003720:	04008034 	movhi	r16,512
 2003724:	8417e004 	addi	r16,r16,24448
 2003728:	e0bffe17 	ldw	r2,-8(fp)
 200372c:	1009883a 	mov	r4,r2
 2003730:	01400304 	movi	r5,12
 2003734:	2002f600 	call	2002f60 <__mulsi3>
 2003738:	10800204 	addi	r2,r2,8
 200373c:	8085883a 	add	r2,r16,r2
 2003740:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2003744:	04008034 	movhi	r16,512
 2003748:	8417e004 	addi	r16,r16,24448
 200374c:	e0bffe17 	ldw	r2,-8(fp)
 2003750:	1009883a 	mov	r4,r2
 2003754:	01400304 	movi	r5,12
 2003758:	2002f600 	call	2002f60 <__mulsi3>
 200375c:	8085883a 	add	r2,r16,r2
 2003760:	10000015 	stw	zero,0(r2)
  }
}
 2003764:	e6ffff04 	addi	sp,fp,-4
 2003768:	dfc00217 	ldw	ra,8(sp)
 200376c:	df000117 	ldw	fp,4(sp)
 2003770:	dc000017 	ldw	r16,0(sp)
 2003774:	dec00304 	addi	sp,sp,12
 2003778:	f800283a 	ret

0200377c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200377c:	defff904 	addi	sp,sp,-28
 2003780:	df000615 	stw	fp,24(sp)
 2003784:	df000604 	addi	fp,sp,24
 2003788:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200378c:	0005303a 	rdctl	r2,status
 2003790:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003794:	e0fffc17 	ldw	r3,-16(fp)
 2003798:	00bfff84 	movi	r2,-2
 200379c:	1884703a 	and	r2,r3,r2
 20037a0:	1001703a 	wrctl	status,r2
  
  return context;
 20037a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 20037a8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 20037ac:	d0a00a17 	ldw	r2,-32728(gp)
 20037b0:	10c000c4 	addi	r3,r2,3
 20037b4:	00bfff04 	movi	r2,-4
 20037b8:	1884703a 	and	r2,r3,r2
 20037bc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 20037c0:	d0e00a17 	ldw	r3,-32728(gp)
 20037c4:	e0bfff17 	ldw	r2,-4(fp)
 20037c8:	1887883a 	add	r3,r3,r2
 20037cc:	00810034 	movhi	r2,1024
 20037d0:	10800004 	addi	r2,r2,0
 20037d4:	10c0062e 	bgeu	r2,r3,20037f0 <sbrk+0x74>
 20037d8:	e0bffa17 	ldw	r2,-24(fp)
 20037dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20037e0:	e0bffd17 	ldw	r2,-12(fp)
 20037e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20037e8:	00bfffc4 	movi	r2,-1
 20037ec:	00000b06 	br	200381c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20037f0:	d0a00a17 	ldw	r2,-32728(gp)
 20037f4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 20037f8:	d0e00a17 	ldw	r3,-32728(gp)
 20037fc:	e0bfff17 	ldw	r2,-4(fp)
 2003800:	1885883a 	add	r2,r3,r2
 2003804:	d0a00a15 	stw	r2,-32728(gp)
 2003808:	e0bffa17 	ldw	r2,-24(fp)
 200380c:	e0bffe15 	stw	r2,-8(fp)
 2003810:	e0bffe17 	ldw	r2,-8(fp)
 2003814:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2003818:	e0bffb17 	ldw	r2,-20(fp)
} 
 200381c:	e037883a 	mov	sp,fp
 2003820:	df000017 	ldw	fp,0(sp)
 2003824:	dec00104 	addi	sp,sp,4
 2003828:	f800283a 	ret

0200382c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200382c:	defffe04 	addi	sp,sp,-8
 2003830:	dfc00115 	stw	ra,4(sp)
 2003834:	df000015 	stw	fp,0(sp)
 2003838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200383c:	00808034 	movhi	r2,512
 2003840:	109c6104 	addi	r2,r2,29060
 2003844:	10800017 	ldw	r2,0(r2)
 2003848:	10000526 	beq	r2,zero,2003860 <alt_get_errno+0x34>
 200384c:	00808034 	movhi	r2,512
 2003850:	109c6104 	addi	r2,r2,29060
 2003854:	10800017 	ldw	r2,0(r2)
 2003858:	103ee83a 	callr	r2
 200385c:	00000206 	br	2003868 <alt_get_errno+0x3c>
 2003860:	00808074 	movhi	r2,513
 2003864:	10a30404 	addi	r2,r2,-29680
}
 2003868:	e037883a 	mov	sp,fp
 200386c:	dfc00117 	ldw	ra,4(sp)
 2003870:	df000017 	ldw	fp,0(sp)
 2003874:	dec00204 	addi	sp,sp,8
 2003878:	f800283a 	ret

0200387c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200387c:	defff904 	addi	sp,sp,-28
 2003880:	dfc00615 	stw	ra,24(sp)
 2003884:	df000515 	stw	fp,20(sp)
 2003888:	df000504 	addi	fp,sp,20
 200388c:	e13ffd15 	stw	r4,-12(fp)
 2003890:	e17ffe15 	stw	r5,-8(fp)
 2003894:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003898:	e0bffd17 	ldw	r2,-12(fp)
 200389c:	10000816 	blt	r2,zero,20038c0 <write+0x44>
 20038a0:	e13ffd17 	ldw	r4,-12(fp)
 20038a4:	01400304 	movi	r5,12
 20038a8:	2002f600 	call	2002f60 <__mulsi3>
 20038ac:	1007883a 	mov	r3,r2
 20038b0:	00808034 	movhi	r2,512
 20038b4:	1097e004 	addi	r2,r2,24448
 20038b8:	1885883a 	add	r2,r3,r2
 20038bc:	00000106 	br	20038c4 <write+0x48>
 20038c0:	0005883a 	mov	r2,zero
 20038c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20038c8:	e0bffb17 	ldw	r2,-20(fp)
 20038cc:	10002126 	beq	r2,zero,2003954 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20038d0:	e0bffb17 	ldw	r2,-20(fp)
 20038d4:	10800217 	ldw	r2,8(r2)
 20038d8:	108000cc 	andi	r2,r2,3
 20038dc:	10001826 	beq	r2,zero,2003940 <write+0xc4>
 20038e0:	e0bffb17 	ldw	r2,-20(fp)
 20038e4:	10800017 	ldw	r2,0(r2)
 20038e8:	10800617 	ldw	r2,24(r2)
 20038ec:	10001426 	beq	r2,zero,2003940 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20038f0:	e0bffb17 	ldw	r2,-20(fp)
 20038f4:	10800017 	ldw	r2,0(r2)
 20038f8:	10800617 	ldw	r2,24(r2)
 20038fc:	e0ffff17 	ldw	r3,-4(fp)
 2003900:	e13ffb17 	ldw	r4,-20(fp)
 2003904:	e17ffe17 	ldw	r5,-8(fp)
 2003908:	180d883a 	mov	r6,r3
 200390c:	103ee83a 	callr	r2
 2003910:	e0bffc15 	stw	r2,-16(fp)
 2003914:	e0bffc17 	ldw	r2,-16(fp)
 2003918:	1000070e 	bge	r2,zero,2003938 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200391c:	200382c0 	call	200382c <alt_get_errno>
 2003920:	1007883a 	mov	r3,r2
 2003924:	e0bffc17 	ldw	r2,-16(fp)
 2003928:	0085c83a 	sub	r2,zero,r2
 200392c:	18800015 	stw	r2,0(r3)
        return -1;
 2003930:	00bfffc4 	movi	r2,-1
 2003934:	00000c06 	br	2003968 <write+0xec>
      }
      return rval;
 2003938:	e0bffc17 	ldw	r2,-16(fp)
 200393c:	00000a06 	br	2003968 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2003940:	200382c0 	call	200382c <alt_get_errno>
 2003944:	1007883a 	mov	r3,r2
 2003948:	00800344 	movi	r2,13
 200394c:	18800015 	stw	r2,0(r3)
 2003950:	00000406 	br	2003964 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2003954:	200382c0 	call	200382c <alt_get_errno>
 2003958:	1007883a 	mov	r3,r2
 200395c:	00801444 	movi	r2,81
 2003960:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003964:	00bfffc4 	movi	r2,-1
}
 2003968:	e037883a 	mov	sp,fp
 200396c:	dfc00117 	ldw	ra,4(sp)
 2003970:	df000017 	ldw	fp,0(sp)
 2003974:	dec00204 	addi	sp,sp,8
 2003978:	f800283a 	ret

0200397c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200397c:	defffd04 	addi	sp,sp,-12
 2003980:	dfc00215 	stw	ra,8(sp)
 2003984:	df000115 	stw	fp,4(sp)
 2003988:	df000104 	addi	fp,sp,4
 200398c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2003990:	e13fff17 	ldw	r4,-4(fp)
 2003994:	01408034 	movhi	r5,512
 2003998:	295c5e04 	addi	r5,r5,29048
 200399c:	20046240 	call	2004624 <alt_dev_llist_insert>
}
 20039a0:	e037883a 	mov	sp,fp
 20039a4:	dfc00117 	ldw	ra,4(sp)
 20039a8:	df000017 	ldw	fp,0(sp)
 20039ac:	dec00204 	addi	sp,sp,8
 20039b0:	f800283a 	ret

020039b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20039b4:	defffd04 	addi	sp,sp,-12
 20039b8:	dfc00215 	stw	ra,8(sp)
 20039bc:	df000115 	stw	fp,4(sp)
 20039c0:	df000104 	addi	fp,sp,4
 20039c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 20039c8:	20050040 	call	2005004 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20039cc:	00800044 	movi	r2,1
 20039d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20039d4:	e037883a 	mov	sp,fp
 20039d8:	dfc00117 	ldw	ra,4(sp)
 20039dc:	df000017 	ldw	fp,0(sp)
 20039e0:	dec00204 	addi	sp,sp,8
 20039e4:	f800283a 	ret

020039e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20039e8:	defffe04 	addi	sp,sp,-8
 20039ec:	dfc00115 	stw	ra,4(sp)
 20039f0:	df000015 	stw	fp,0(sp)
 20039f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 20039f8:	01008034 	movhi	r4,512
 20039fc:	21184a04 	addi	r4,r4,24872
 2003a00:	000b883a 	mov	r5,zero
 2003a04:	000d883a 	mov	r6,zero
 2003a08:	2003b900 	call	2003b90 <altera_avalon_jtag_uart_init>
 2003a0c:	01008034 	movhi	r4,512
 2003a10:	21184004 	addi	r4,r4,24832
 2003a14:	200397c0 	call	200397c <alt_dev_reg>
}
 2003a18:	e037883a 	mov	sp,fp
 2003a1c:	dfc00117 	ldw	ra,4(sp)
 2003a20:	df000017 	ldw	fp,0(sp)
 2003a24:	dec00204 	addi	sp,sp,8
 2003a28:	f800283a 	ret

02003a2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2003a2c:	defffa04 	addi	sp,sp,-24
 2003a30:	dfc00515 	stw	ra,20(sp)
 2003a34:	df000415 	stw	fp,16(sp)
 2003a38:	df000404 	addi	fp,sp,16
 2003a3c:	e13ffd15 	stw	r4,-12(fp)
 2003a40:	e17ffe15 	stw	r5,-8(fp)
 2003a44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003a48:	e0bffd17 	ldw	r2,-12(fp)
 2003a4c:	10800017 	ldw	r2,0(r2)
 2003a50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2003a54:	e0bffc17 	ldw	r2,-16(fp)
 2003a58:	10c00a04 	addi	r3,r2,40
 2003a5c:	e0bffd17 	ldw	r2,-12(fp)
 2003a60:	10800217 	ldw	r2,8(r2)
 2003a64:	1809883a 	mov	r4,r3
 2003a68:	e17ffe17 	ldw	r5,-8(fp)
 2003a6c:	e1bfff17 	ldw	r6,-4(fp)
 2003a70:	100f883a 	mov	r7,r2
 2003a74:	20040540 	call	2004054 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2003a78:	e037883a 	mov	sp,fp
 2003a7c:	dfc00117 	ldw	ra,4(sp)
 2003a80:	df000017 	ldw	fp,0(sp)
 2003a84:	dec00204 	addi	sp,sp,8
 2003a88:	f800283a 	ret

02003a8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2003a8c:	defffa04 	addi	sp,sp,-24
 2003a90:	dfc00515 	stw	ra,20(sp)
 2003a94:	df000415 	stw	fp,16(sp)
 2003a98:	df000404 	addi	fp,sp,16
 2003a9c:	e13ffd15 	stw	r4,-12(fp)
 2003aa0:	e17ffe15 	stw	r5,-8(fp)
 2003aa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003aa8:	e0bffd17 	ldw	r2,-12(fp)
 2003aac:	10800017 	ldw	r2,0(r2)
 2003ab0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2003ab4:	e0bffc17 	ldw	r2,-16(fp)
 2003ab8:	10c00a04 	addi	r3,r2,40
 2003abc:	e0bffd17 	ldw	r2,-12(fp)
 2003ac0:	10800217 	ldw	r2,8(r2)
 2003ac4:	1809883a 	mov	r4,r3
 2003ac8:	e17ffe17 	ldw	r5,-8(fp)
 2003acc:	e1bfff17 	ldw	r6,-4(fp)
 2003ad0:	100f883a 	mov	r7,r2
 2003ad4:	20042600 	call	2004260 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2003ad8:	e037883a 	mov	sp,fp
 2003adc:	dfc00117 	ldw	ra,4(sp)
 2003ae0:	df000017 	ldw	fp,0(sp)
 2003ae4:	dec00204 	addi	sp,sp,8
 2003ae8:	f800283a 	ret

02003aec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2003aec:	defffc04 	addi	sp,sp,-16
 2003af0:	dfc00315 	stw	ra,12(sp)
 2003af4:	df000215 	stw	fp,8(sp)
 2003af8:	df000204 	addi	fp,sp,8
 2003afc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003b00:	e0bfff17 	ldw	r2,-4(fp)
 2003b04:	10800017 	ldw	r2,0(r2)
 2003b08:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2003b0c:	e0bffe17 	ldw	r2,-8(fp)
 2003b10:	10c00a04 	addi	r3,r2,40
 2003b14:	e0bfff17 	ldw	r2,-4(fp)
 2003b18:	10800217 	ldw	r2,8(r2)
 2003b1c:	1809883a 	mov	r4,r3
 2003b20:	100b883a 	mov	r5,r2
 2003b24:	2003f000 	call	2003f00 <altera_avalon_jtag_uart_close>
}
 2003b28:	e037883a 	mov	sp,fp
 2003b2c:	dfc00117 	ldw	ra,4(sp)
 2003b30:	df000017 	ldw	fp,0(sp)
 2003b34:	dec00204 	addi	sp,sp,8
 2003b38:	f800283a 	ret

02003b3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2003b3c:	defffa04 	addi	sp,sp,-24
 2003b40:	dfc00515 	stw	ra,20(sp)
 2003b44:	df000415 	stw	fp,16(sp)
 2003b48:	df000404 	addi	fp,sp,16
 2003b4c:	e13ffd15 	stw	r4,-12(fp)
 2003b50:	e17ffe15 	stw	r5,-8(fp)
 2003b54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2003b58:	e0bffd17 	ldw	r2,-12(fp)
 2003b5c:	10800017 	ldw	r2,0(r2)
 2003b60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2003b64:	e0bffc17 	ldw	r2,-16(fp)
 2003b68:	10800a04 	addi	r2,r2,40
 2003b6c:	1009883a 	mov	r4,r2
 2003b70:	e17ffe17 	ldw	r5,-8(fp)
 2003b74:	e1bfff17 	ldw	r6,-4(fp)
 2003b78:	2003f680 	call	2003f68 <altera_avalon_jtag_uart_ioctl>
}
 2003b7c:	e037883a 	mov	sp,fp
 2003b80:	dfc00117 	ldw	ra,4(sp)
 2003b84:	df000017 	ldw	fp,0(sp)
 2003b88:	dec00204 	addi	sp,sp,8
 2003b8c:	f800283a 	ret

02003b90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2003b90:	defffa04 	addi	sp,sp,-24
 2003b94:	dfc00515 	stw	ra,20(sp)
 2003b98:	df000415 	stw	fp,16(sp)
 2003b9c:	df000404 	addi	fp,sp,16
 2003ba0:	e13ffd15 	stw	r4,-12(fp)
 2003ba4:	e17ffe15 	stw	r5,-8(fp)
 2003ba8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003bac:	e0bffd17 	ldw	r2,-12(fp)
 2003bb0:	00c00044 	movi	r3,1
 2003bb4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2003bb8:	e0bffd17 	ldw	r2,-12(fp)
 2003bbc:	10800017 	ldw	r2,0(r2)
 2003bc0:	10800104 	addi	r2,r2,4
 2003bc4:	1007883a 	mov	r3,r2
 2003bc8:	e0bffd17 	ldw	r2,-12(fp)
 2003bcc:	10800817 	ldw	r2,32(r2)
 2003bd0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2003bd4:	e0fffe17 	ldw	r3,-8(fp)
 2003bd8:	e0bfff17 	ldw	r2,-4(fp)
 2003bdc:	d8000015 	stw	zero,0(sp)
 2003be0:	1809883a 	mov	r4,r3
 2003be4:	100b883a 	mov	r5,r2
 2003be8:	01808034 	movhi	r6,512
 2003bec:	318f1504 	addi	r6,r6,15444
 2003bf0:	e1fffd17 	ldw	r7,-12(fp)
 2003bf4:	200479c0 	call	200479c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2003bf8:	e0bffd17 	ldw	r2,-12(fp)
 2003bfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2003c00:	e0bffd17 	ldw	r2,-12(fp)
 2003c04:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2003c08:	00808074 	movhi	r2,513
 2003c0c:	10a30904 	addi	r2,r2,-29660
 2003c10:	10800017 	ldw	r2,0(r2)
 2003c14:	1809883a 	mov	r4,r3
 2003c18:	100b883a 	mov	r5,r2
 2003c1c:	01808034 	movhi	r6,512
 2003c20:	318f9604 	addi	r6,r6,15960
 2003c24:	e1fffd17 	ldw	r7,-12(fp)
 2003c28:	20044780 	call	2004478 <alt_alarm_start>
 2003c2c:	1000040e 	bge	r2,zero,2003c40 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2003c30:	e0fffd17 	ldw	r3,-12(fp)
 2003c34:	00a00034 	movhi	r2,32768
 2003c38:	10bfffc4 	addi	r2,r2,-1
 2003c3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2003c40:	e037883a 	mov	sp,fp
 2003c44:	dfc00117 	ldw	ra,4(sp)
 2003c48:	df000017 	ldw	fp,0(sp)
 2003c4c:	dec00204 	addi	sp,sp,8
 2003c50:	f800283a 	ret

02003c54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2003c54:	defff804 	addi	sp,sp,-32
 2003c58:	df000715 	stw	fp,28(sp)
 2003c5c:	df000704 	addi	fp,sp,28
 2003c60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2003c64:	e0bfff17 	ldw	r2,-4(fp)
 2003c68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2003c6c:	e0bffb17 	ldw	r2,-20(fp)
 2003c70:	10800017 	ldw	r2,0(r2)
 2003c74:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003c78:	e0bffc17 	ldw	r2,-16(fp)
 2003c7c:	10800104 	addi	r2,r2,4
 2003c80:	10800037 	ldwio	r2,0(r2)
 2003c84:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2003c88:	e0bffd17 	ldw	r2,-12(fp)
 2003c8c:	1080c00c 	andi	r2,r2,768
 2003c90:	1000011e 	bne	r2,zero,2003c98 <altera_avalon_jtag_uart_irq+0x44>
      break;
 2003c94:	00006c06 	br	2003e48 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2003c98:	e0bffd17 	ldw	r2,-12(fp)
 2003c9c:	1080400c 	andi	r2,r2,256
 2003ca0:	10003426 	beq	r2,zero,2003d74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2003ca4:	00800074 	movhi	r2,1
 2003ca8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003cac:	e0bffb17 	ldw	r2,-20(fp)
 2003cb0:	10800a17 	ldw	r2,40(r2)
 2003cb4:	10800044 	addi	r2,r2,1
 2003cb8:	1081ffcc 	andi	r2,r2,2047
 2003cbc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2003cc0:	e0bffb17 	ldw	r2,-20(fp)
 2003cc4:	10c00b17 	ldw	r3,44(r2)
 2003cc8:	e0bffe17 	ldw	r2,-8(fp)
 2003ccc:	1880011e 	bne	r3,r2,2003cd4 <altera_avalon_jtag_uart_irq+0x80>
          break;
 2003cd0:	00001606 	br	2003d2c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2003cd4:	e0bffc17 	ldw	r2,-16(fp)
 2003cd8:	10800037 	ldwio	r2,0(r2)
 2003cdc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2003ce0:	e0bff917 	ldw	r2,-28(fp)
 2003ce4:	10a0000c 	andi	r2,r2,32768
 2003ce8:	1000011e 	bne	r2,zero,2003cf0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 2003cec:	00000f06 	br	2003d2c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2003cf0:	e0bffb17 	ldw	r2,-20(fp)
 2003cf4:	10800a17 	ldw	r2,40(r2)
 2003cf8:	e0fff917 	ldw	r3,-28(fp)
 2003cfc:	1809883a 	mov	r4,r3
 2003d00:	e0fffb17 	ldw	r3,-20(fp)
 2003d04:	1885883a 	add	r2,r3,r2
 2003d08:	10800e04 	addi	r2,r2,56
 2003d0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003d10:	e0bffb17 	ldw	r2,-20(fp)
 2003d14:	10800a17 	ldw	r2,40(r2)
 2003d18:	10800044 	addi	r2,r2,1
 2003d1c:	10c1ffcc 	andi	r3,r2,2047
 2003d20:	e0bffb17 	ldw	r2,-20(fp)
 2003d24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2003d28:	003fe006 	br	2003cac <__alt_mem_onchip_memory2_0+0xfdff3cac>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2003d2c:	e0bff917 	ldw	r2,-28(fp)
 2003d30:	10bfffec 	andhi	r2,r2,65535
 2003d34:	10000f26 	beq	r2,zero,2003d74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003d38:	e0bffb17 	ldw	r2,-20(fp)
 2003d3c:	10c00817 	ldw	r3,32(r2)
 2003d40:	00bfff84 	movi	r2,-2
 2003d44:	1886703a 	and	r3,r3,r2
 2003d48:	e0bffb17 	ldw	r2,-20(fp)
 2003d4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2003d50:	e0bffc17 	ldw	r2,-16(fp)
 2003d54:	10800104 	addi	r2,r2,4
 2003d58:	1007883a 	mov	r3,r2
 2003d5c:	e0bffb17 	ldw	r2,-20(fp)
 2003d60:	10800817 	ldw	r2,32(r2)
 2003d64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003d68:	e0bffc17 	ldw	r2,-16(fp)
 2003d6c:	10800104 	addi	r2,r2,4
 2003d70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2003d74:	e0bffd17 	ldw	r2,-12(fp)
 2003d78:	1080800c 	andi	r2,r2,512
 2003d7c:	10003126 	beq	r2,zero,2003e44 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2003d80:	e0bffd17 	ldw	r2,-12(fp)
 2003d84:	1004d43a 	srli	r2,r2,16
 2003d88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003d8c:	00001406 	br	2003de0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2003d90:	e0bffc17 	ldw	r2,-16(fp)
 2003d94:	e0fffb17 	ldw	r3,-20(fp)
 2003d98:	18c00d17 	ldw	r3,52(r3)
 2003d9c:	e13ffb17 	ldw	r4,-20(fp)
 2003da0:	20c7883a 	add	r3,r4,r3
 2003da4:	18c20e04 	addi	r3,r3,2104
 2003da8:	18c00003 	ldbu	r3,0(r3)
 2003dac:	18c03fcc 	andi	r3,r3,255
 2003db0:	18c0201c 	xori	r3,r3,128
 2003db4:	18ffe004 	addi	r3,r3,-128
 2003db8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003dbc:	e0bffb17 	ldw	r2,-20(fp)
 2003dc0:	10800d17 	ldw	r2,52(r2)
 2003dc4:	10800044 	addi	r2,r2,1
 2003dc8:	10c1ffcc 	andi	r3,r2,2047
 2003dcc:	e0bffb17 	ldw	r2,-20(fp)
 2003dd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2003dd4:	e0bffa17 	ldw	r2,-24(fp)
 2003dd8:	10bfffc4 	addi	r2,r2,-1
 2003ddc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003de0:	e0bffa17 	ldw	r2,-24(fp)
 2003de4:	10000526 	beq	r2,zero,2003dfc <altera_avalon_jtag_uart_irq+0x1a8>
 2003de8:	e0bffb17 	ldw	r2,-20(fp)
 2003dec:	10c00d17 	ldw	r3,52(r2)
 2003df0:	e0bffb17 	ldw	r2,-20(fp)
 2003df4:	10800c17 	ldw	r2,48(r2)
 2003df8:	18bfe51e 	bne	r3,r2,2003d90 <__alt_mem_onchip_memory2_0+0xfdff3d90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2003dfc:	e0bffa17 	ldw	r2,-24(fp)
 2003e00:	10001026 	beq	r2,zero,2003e44 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2003e04:	e0bffb17 	ldw	r2,-20(fp)
 2003e08:	10c00817 	ldw	r3,32(r2)
 2003e0c:	00bfff44 	movi	r2,-3
 2003e10:	1886703a 	and	r3,r3,r2
 2003e14:	e0bffb17 	ldw	r2,-20(fp)
 2003e18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2003e1c:	e0bffb17 	ldw	r2,-20(fp)
 2003e20:	10800017 	ldw	r2,0(r2)
 2003e24:	10800104 	addi	r2,r2,4
 2003e28:	1007883a 	mov	r3,r2
 2003e2c:	e0bffb17 	ldw	r2,-20(fp)
 2003e30:	10800817 	ldw	r2,32(r2)
 2003e34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003e38:	e0bffc17 	ldw	r2,-16(fp)
 2003e3c:	10800104 	addi	r2,r2,4
 2003e40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2003e44:	003f8c06 	br	2003c78 <__alt_mem_onchip_memory2_0+0xfdff3c78>
}
 2003e48:	e037883a 	mov	sp,fp
 2003e4c:	df000017 	ldw	fp,0(sp)
 2003e50:	dec00104 	addi	sp,sp,4
 2003e54:	f800283a 	ret

02003e58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2003e58:	defff804 	addi	sp,sp,-32
 2003e5c:	df000715 	stw	fp,28(sp)
 2003e60:	df000704 	addi	fp,sp,28
 2003e64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2003e68:	e0bffb17 	ldw	r2,-20(fp)
 2003e6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2003e70:	e0bff917 	ldw	r2,-28(fp)
 2003e74:	10800017 	ldw	r2,0(r2)
 2003e78:	10800104 	addi	r2,r2,4
 2003e7c:	10800037 	ldwio	r2,0(r2)
 2003e80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2003e84:	e0bffa17 	ldw	r2,-24(fp)
 2003e88:	1081000c 	andi	r2,r2,1024
 2003e8c:	10000b26 	beq	r2,zero,2003ebc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2003e90:	e0bff917 	ldw	r2,-28(fp)
 2003e94:	10800017 	ldw	r2,0(r2)
 2003e98:	10800104 	addi	r2,r2,4
 2003e9c:	1007883a 	mov	r3,r2
 2003ea0:	e0bff917 	ldw	r2,-28(fp)
 2003ea4:	10800817 	ldw	r2,32(r2)
 2003ea8:	10810014 	ori	r2,r2,1024
 2003eac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2003eb0:	e0bff917 	ldw	r2,-28(fp)
 2003eb4:	10000915 	stw	zero,36(r2)
 2003eb8:	00000a06 	br	2003ee4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2003ebc:	e0bff917 	ldw	r2,-28(fp)
 2003ec0:	10c00917 	ldw	r3,36(r2)
 2003ec4:	00a00034 	movhi	r2,32768
 2003ec8:	10bfff04 	addi	r2,r2,-4
 2003ecc:	10c00536 	bltu	r2,r3,2003ee4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2003ed0:	e0bff917 	ldw	r2,-28(fp)
 2003ed4:	10800917 	ldw	r2,36(r2)
 2003ed8:	10c00044 	addi	r3,r2,1
 2003edc:	e0bff917 	ldw	r2,-28(fp)
 2003ee0:	10c00915 	stw	r3,36(r2)
 2003ee4:	00808074 	movhi	r2,513
 2003ee8:	10a30904 	addi	r2,r2,-29660
 2003eec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2003ef0:	e037883a 	mov	sp,fp
 2003ef4:	df000017 	ldw	fp,0(sp)
 2003ef8:	dec00104 	addi	sp,sp,4
 2003efc:	f800283a 	ret

02003f00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2003f00:	defffd04 	addi	sp,sp,-12
 2003f04:	df000215 	stw	fp,8(sp)
 2003f08:	df000204 	addi	fp,sp,8
 2003f0c:	e13ffe15 	stw	r4,-8(fp)
 2003f10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003f14:	00000506 	br	2003f2c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2003f18:	e0bfff17 	ldw	r2,-4(fp)
 2003f1c:	1090000c 	andi	r2,r2,16384
 2003f20:	10000226 	beq	r2,zero,2003f2c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2003f24:	00bffd44 	movi	r2,-11
 2003f28:	00000b06 	br	2003f58 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003f2c:	e0bffe17 	ldw	r2,-8(fp)
 2003f30:	10c00d17 	ldw	r3,52(r2)
 2003f34:	e0bffe17 	ldw	r2,-8(fp)
 2003f38:	10800c17 	ldw	r2,48(r2)
 2003f3c:	18800526 	beq	r3,r2,2003f54 <altera_avalon_jtag_uart_close+0x54>
 2003f40:	e0bffe17 	ldw	r2,-8(fp)
 2003f44:	10c00917 	ldw	r3,36(r2)
 2003f48:	e0bffe17 	ldw	r2,-8(fp)
 2003f4c:	10800117 	ldw	r2,4(r2)
 2003f50:	18bff136 	bltu	r3,r2,2003f18 <__alt_mem_onchip_memory2_0+0xfdff3f18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2003f54:	0005883a 	mov	r2,zero
}
 2003f58:	e037883a 	mov	sp,fp
 2003f5c:	df000017 	ldw	fp,0(sp)
 2003f60:	dec00104 	addi	sp,sp,4
 2003f64:	f800283a 	ret

02003f68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2003f68:	defffa04 	addi	sp,sp,-24
 2003f6c:	df000515 	stw	fp,20(sp)
 2003f70:	df000504 	addi	fp,sp,20
 2003f74:	e13ffd15 	stw	r4,-12(fp)
 2003f78:	e17ffe15 	stw	r5,-8(fp)
 2003f7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2003f80:	00bff9c4 	movi	r2,-25
 2003f84:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2003f88:	e0bffe17 	ldw	r2,-8(fp)
 2003f8c:	10da8060 	cmpeqi	r3,r2,27137
 2003f90:	1800031e 	bne	r3,zero,2003fa0 <altera_avalon_jtag_uart_ioctl+0x38>
 2003f94:	109a80a0 	cmpeqi	r2,r2,27138
 2003f98:	1000191e 	bne	r2,zero,2004000 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 2003f9c:	00002806 	br	2004040 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2003fa0:	e0bffd17 	ldw	r2,-12(fp)
 2003fa4:	10c00117 	ldw	r3,4(r2)
 2003fa8:	00a00034 	movhi	r2,32768
 2003fac:	10bfffc4 	addi	r2,r2,-1
 2003fb0:	18801226 	beq	r3,r2,2003ffc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 2003fb4:	e0bfff17 	ldw	r2,-4(fp)
 2003fb8:	10800017 	ldw	r2,0(r2)
 2003fbc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2003fc0:	e0bffc17 	ldw	r2,-16(fp)
 2003fc4:	10800090 	cmplti	r2,r2,2
 2003fc8:	1000061e 	bne	r2,zero,2003fe4 <altera_avalon_jtag_uart_ioctl+0x7c>
 2003fcc:	e0fffc17 	ldw	r3,-16(fp)
 2003fd0:	00a00034 	movhi	r2,32768
 2003fd4:	10bfffc4 	addi	r2,r2,-1
 2003fd8:	18800226 	beq	r3,r2,2003fe4 <altera_avalon_jtag_uart_ioctl+0x7c>
 2003fdc:	e0bffc17 	ldw	r2,-16(fp)
 2003fe0:	00000206 	br	2003fec <altera_avalon_jtag_uart_ioctl+0x84>
 2003fe4:	00a00034 	movhi	r2,32768
 2003fe8:	10bfff84 	addi	r2,r2,-2
 2003fec:	e0fffd17 	ldw	r3,-12(fp)
 2003ff0:	18800115 	stw	r2,4(r3)
      rc = 0;
 2003ff4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2003ff8:	00001106 	br	2004040 <altera_avalon_jtag_uart_ioctl+0xd8>
 2003ffc:	00001006 	br	2004040 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2004000:	e0bffd17 	ldw	r2,-12(fp)
 2004004:	10c00117 	ldw	r3,4(r2)
 2004008:	00a00034 	movhi	r2,32768
 200400c:	10bfffc4 	addi	r2,r2,-1
 2004010:	18800a26 	beq	r3,r2,200403c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2004014:	e0bffd17 	ldw	r2,-12(fp)
 2004018:	10c00917 	ldw	r3,36(r2)
 200401c:	e0bffd17 	ldw	r2,-12(fp)
 2004020:	10800117 	ldw	r2,4(r2)
 2004024:	1885803a 	cmpltu	r2,r3,r2
 2004028:	10c03fcc 	andi	r3,r2,255
 200402c:	e0bfff17 	ldw	r2,-4(fp)
 2004030:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2004034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2004038:	00000006 	br	200403c <altera_avalon_jtag_uart_ioctl+0xd4>
 200403c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2004040:	e0bffb17 	ldw	r2,-20(fp)
}
 2004044:	e037883a 	mov	sp,fp
 2004048:	df000017 	ldw	fp,0(sp)
 200404c:	dec00104 	addi	sp,sp,4
 2004050:	f800283a 	ret

02004054 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2004054:	defff304 	addi	sp,sp,-52
 2004058:	dfc00c15 	stw	ra,48(sp)
 200405c:	df000b15 	stw	fp,44(sp)
 2004060:	df000b04 	addi	fp,sp,44
 2004064:	e13ffc15 	stw	r4,-16(fp)
 2004068:	e17ffd15 	stw	r5,-12(fp)
 200406c:	e1bffe15 	stw	r6,-8(fp)
 2004070:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2004074:	e0bffd17 	ldw	r2,-12(fp)
 2004078:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200407c:	00004906 	br	20041a4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2004080:	e0bffc17 	ldw	r2,-16(fp)
 2004084:	10800a17 	ldw	r2,40(r2)
 2004088:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200408c:	e0bffc17 	ldw	r2,-16(fp)
 2004090:	10800b17 	ldw	r2,44(r2)
 2004094:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2004098:	e0fff717 	ldw	r3,-36(fp)
 200409c:	e0bff817 	ldw	r2,-32(fp)
 20040a0:	18800536 	bltu	r3,r2,20040b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20040a4:	e0fff717 	ldw	r3,-36(fp)
 20040a8:	e0bff817 	ldw	r2,-32(fp)
 20040ac:	1885c83a 	sub	r2,r3,r2
 20040b0:	e0bff615 	stw	r2,-40(fp)
 20040b4:	00000406 	br	20040c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20040b8:	00c20004 	movi	r3,2048
 20040bc:	e0bff817 	ldw	r2,-32(fp)
 20040c0:	1885c83a 	sub	r2,r3,r2
 20040c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 20040c8:	e0bff617 	ldw	r2,-40(fp)
 20040cc:	1000011e 	bne	r2,zero,20040d4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 20040d0:	00001d06 	br	2004148 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 20040d4:	e0fffe17 	ldw	r3,-8(fp)
 20040d8:	e0bff617 	ldw	r2,-40(fp)
 20040dc:	1880022e 	bgeu	r3,r2,20040e8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 20040e0:	e0bffe17 	ldw	r2,-8(fp)
 20040e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 20040e8:	e0bff817 	ldw	r2,-32(fp)
 20040ec:	10800e04 	addi	r2,r2,56
 20040f0:	e0fffc17 	ldw	r3,-16(fp)
 20040f4:	1885883a 	add	r2,r3,r2
 20040f8:	e13ff517 	ldw	r4,-44(fp)
 20040fc:	100b883a 	mov	r5,r2
 2004100:	e1bff617 	ldw	r6,-40(fp)
 2004104:	20011800 	call	2001180 <memcpy>
      ptr   += n;
 2004108:	e0fff517 	ldw	r3,-44(fp)
 200410c:	e0bff617 	ldw	r2,-40(fp)
 2004110:	1885883a 	add	r2,r3,r2
 2004114:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2004118:	e0fffe17 	ldw	r3,-8(fp)
 200411c:	e0bff617 	ldw	r2,-40(fp)
 2004120:	1885c83a 	sub	r2,r3,r2
 2004124:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004128:	e0fff817 	ldw	r3,-32(fp)
 200412c:	e0bff617 	ldw	r2,-40(fp)
 2004130:	1885883a 	add	r2,r3,r2
 2004134:	10c1ffcc 	andi	r3,r2,2047
 2004138:	e0bffc17 	ldw	r2,-16(fp)
 200413c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2004140:	e0bffe17 	ldw	r2,-8(fp)
 2004144:	00bfce16 	blt	zero,r2,2004080 <__alt_mem_onchip_memory2_0+0xfdff4080>

    /* If we read any data then return it */
    if (ptr != buffer)
 2004148:	e0fff517 	ldw	r3,-44(fp)
 200414c:	e0bffd17 	ldw	r2,-12(fp)
 2004150:	18800126 	beq	r3,r2,2004158 <altera_avalon_jtag_uart_read+0x104>
      break;
 2004154:	00001506 	br	20041ac <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2004158:	e0bfff17 	ldw	r2,-4(fp)
 200415c:	1090000c 	andi	r2,r2,16384
 2004160:	10000126 	beq	r2,zero,2004168 <altera_avalon_jtag_uart_read+0x114>
      break;
 2004164:	00001106 	br	20041ac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2004168:	0001883a 	nop
 200416c:	e0bffc17 	ldw	r2,-16(fp)
 2004170:	10c00a17 	ldw	r3,40(r2)
 2004174:	e0bff717 	ldw	r2,-36(fp)
 2004178:	1880051e 	bne	r3,r2,2004190 <altera_avalon_jtag_uart_read+0x13c>
 200417c:	e0bffc17 	ldw	r2,-16(fp)
 2004180:	10c00917 	ldw	r3,36(r2)
 2004184:	e0bffc17 	ldw	r2,-16(fp)
 2004188:	10800117 	ldw	r2,4(r2)
 200418c:	18bff736 	bltu	r3,r2,200416c <__alt_mem_onchip_memory2_0+0xfdff416c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2004190:	e0bffc17 	ldw	r2,-16(fp)
 2004194:	10c00a17 	ldw	r3,40(r2)
 2004198:	e0bff717 	ldw	r2,-36(fp)
 200419c:	1880011e 	bne	r3,r2,20041a4 <altera_avalon_jtag_uart_read+0x150>
      break;
 20041a0:	00000206 	br	20041ac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20041a4:	e0bffe17 	ldw	r2,-8(fp)
 20041a8:	00bfb516 	blt	zero,r2,2004080 <__alt_mem_onchip_memory2_0+0xfdff4080>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 20041ac:	e0fff517 	ldw	r3,-44(fp)
 20041b0:	e0bffd17 	ldw	r2,-12(fp)
 20041b4:	18801826 	beq	r3,r2,2004218 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20041b8:	0005303a 	rdctl	r2,status
 20041bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20041c0:	e0fffa17 	ldw	r3,-24(fp)
 20041c4:	00bfff84 	movi	r2,-2
 20041c8:	1884703a 	and	r2,r3,r2
 20041cc:	1001703a 	wrctl	status,r2
  
  return context;
 20041d0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20041d4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20041d8:	e0bffc17 	ldw	r2,-16(fp)
 20041dc:	10800817 	ldw	r2,32(r2)
 20041e0:	10c00054 	ori	r3,r2,1
 20041e4:	e0bffc17 	ldw	r2,-16(fp)
 20041e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20041ec:	e0bffc17 	ldw	r2,-16(fp)
 20041f0:	10800017 	ldw	r2,0(r2)
 20041f4:	10800104 	addi	r2,r2,4
 20041f8:	1007883a 	mov	r3,r2
 20041fc:	e0bffc17 	ldw	r2,-16(fp)
 2004200:	10800817 	ldw	r2,32(r2)
 2004204:	18800035 	stwio	r2,0(r3)
 2004208:	e0bff917 	ldw	r2,-28(fp)
 200420c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004210:	e0bffb17 	ldw	r2,-20(fp)
 2004214:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2004218:	e0fff517 	ldw	r3,-44(fp)
 200421c:	e0bffd17 	ldw	r2,-12(fp)
 2004220:	18800426 	beq	r3,r2,2004234 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 2004224:	e0fff517 	ldw	r3,-44(fp)
 2004228:	e0bffd17 	ldw	r2,-12(fp)
 200422c:	1885c83a 	sub	r2,r3,r2
 2004230:	00000606 	br	200424c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 2004234:	e0bfff17 	ldw	r2,-4(fp)
 2004238:	1090000c 	andi	r2,r2,16384
 200423c:	10000226 	beq	r2,zero,2004248 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 2004240:	00bffd44 	movi	r2,-11
 2004244:	00000106 	br	200424c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 2004248:	00bffec4 	movi	r2,-5
}
 200424c:	e037883a 	mov	sp,fp
 2004250:	dfc00117 	ldw	ra,4(sp)
 2004254:	df000017 	ldw	fp,0(sp)
 2004258:	dec00204 	addi	sp,sp,8
 200425c:	f800283a 	ret

02004260 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2004260:	defff304 	addi	sp,sp,-52
 2004264:	dfc00c15 	stw	ra,48(sp)
 2004268:	df000b15 	stw	fp,44(sp)
 200426c:	df000b04 	addi	fp,sp,44
 2004270:	e13ffc15 	stw	r4,-16(fp)
 2004274:	e17ffd15 	stw	r5,-12(fp)
 2004278:	e1bffe15 	stw	r6,-8(fp)
 200427c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2004280:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2004284:	e0bffd17 	ldw	r2,-12(fp)
 2004288:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200428c:	00003806 	br	2004370 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2004290:	e0bffc17 	ldw	r2,-16(fp)
 2004294:	10800c17 	ldw	r2,48(r2)
 2004298:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 200429c:	e0bffc17 	ldw	r2,-16(fp)
 20042a0:	10800d17 	ldw	r2,52(r2)
 20042a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 20042a8:	e0fff817 	ldw	r3,-32(fp)
 20042ac:	e0bff517 	ldw	r2,-44(fp)
 20042b0:	1880062e 	bgeu	r3,r2,20042cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 20042b4:	e0fff517 	ldw	r3,-44(fp)
 20042b8:	e0bff817 	ldw	r2,-32(fp)
 20042bc:	1885c83a 	sub	r2,r3,r2
 20042c0:	10bfffc4 	addi	r2,r2,-1
 20042c4:	e0bff615 	stw	r2,-40(fp)
 20042c8:	00000b06 	br	20042f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 20042cc:	e0bff517 	ldw	r2,-44(fp)
 20042d0:	10000526 	beq	r2,zero,20042e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20042d4:	00c20004 	movi	r3,2048
 20042d8:	e0bff817 	ldw	r2,-32(fp)
 20042dc:	1885c83a 	sub	r2,r3,r2
 20042e0:	e0bff615 	stw	r2,-40(fp)
 20042e4:	00000406 	br	20042f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20042e8:	00c1ffc4 	movi	r3,2047
 20042ec:	e0bff817 	ldw	r2,-32(fp)
 20042f0:	1885c83a 	sub	r2,r3,r2
 20042f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 20042f8:	e0bff617 	ldw	r2,-40(fp)
 20042fc:	1000011e 	bne	r2,zero,2004304 <altera_avalon_jtag_uart_write+0xa4>
        break;
 2004300:	00001d06 	br	2004378 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 2004304:	e0fffe17 	ldw	r3,-8(fp)
 2004308:	e0bff617 	ldw	r2,-40(fp)
 200430c:	1880022e 	bgeu	r3,r2,2004318 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 2004310:	e0bffe17 	ldw	r2,-8(fp)
 2004314:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2004318:	e0bff817 	ldw	r2,-32(fp)
 200431c:	10820e04 	addi	r2,r2,2104
 2004320:	e0fffc17 	ldw	r3,-16(fp)
 2004324:	1885883a 	add	r2,r3,r2
 2004328:	1009883a 	mov	r4,r2
 200432c:	e17ffd17 	ldw	r5,-12(fp)
 2004330:	e1bff617 	ldw	r6,-40(fp)
 2004334:	20011800 	call	2001180 <memcpy>
      ptr   += n;
 2004338:	e0fffd17 	ldw	r3,-12(fp)
 200433c:	e0bff617 	ldw	r2,-40(fp)
 2004340:	1885883a 	add	r2,r3,r2
 2004344:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2004348:	e0fffe17 	ldw	r3,-8(fp)
 200434c:	e0bff617 	ldw	r2,-40(fp)
 2004350:	1885c83a 	sub	r2,r3,r2
 2004354:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004358:	e0fff817 	ldw	r3,-32(fp)
 200435c:	e0bff617 	ldw	r2,-40(fp)
 2004360:	1885883a 	add	r2,r3,r2
 2004364:	10c1ffcc 	andi	r3,r2,2047
 2004368:	e0bffc17 	ldw	r2,-16(fp)
 200436c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2004370:	e0bffe17 	ldw	r2,-8(fp)
 2004374:	00bfc616 	blt	zero,r2,2004290 <__alt_mem_onchip_memory2_0+0xfdff4290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004378:	0005303a 	rdctl	r2,status
 200437c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004380:	e0fffa17 	ldw	r3,-24(fp)
 2004384:	00bfff84 	movi	r2,-2
 2004388:	1884703a 	and	r2,r3,r2
 200438c:	1001703a 	wrctl	status,r2
  
  return context;
 2004390:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2004394:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2004398:	e0bffc17 	ldw	r2,-16(fp)
 200439c:	10800817 	ldw	r2,32(r2)
 20043a0:	10c00094 	ori	r3,r2,2
 20043a4:	e0bffc17 	ldw	r2,-16(fp)
 20043a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20043ac:	e0bffc17 	ldw	r2,-16(fp)
 20043b0:	10800017 	ldw	r2,0(r2)
 20043b4:	10800104 	addi	r2,r2,4
 20043b8:	1007883a 	mov	r3,r2
 20043bc:	e0bffc17 	ldw	r2,-16(fp)
 20043c0:	10800817 	ldw	r2,32(r2)
 20043c4:	18800035 	stwio	r2,0(r3)
 20043c8:	e0bff917 	ldw	r2,-28(fp)
 20043cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20043d0:	e0bffb17 	ldw	r2,-20(fp)
 20043d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20043d8:	e0bffe17 	ldw	r2,-8(fp)
 20043dc:	0080120e 	bge	zero,r2,2004428 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 20043e0:	e0bfff17 	ldw	r2,-4(fp)
 20043e4:	1090000c 	andi	r2,r2,16384
 20043e8:	10000126 	beq	r2,zero,20043f0 <altera_avalon_jtag_uart_write+0x190>
        break;
 20043ec:	00001006 	br	2004430 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 20043f0:	0001883a 	nop
 20043f4:	e0bffc17 	ldw	r2,-16(fp)
 20043f8:	10c00d17 	ldw	r3,52(r2)
 20043fc:	e0bff517 	ldw	r2,-44(fp)
 2004400:	1880051e 	bne	r3,r2,2004418 <altera_avalon_jtag_uart_write+0x1b8>
 2004404:	e0bffc17 	ldw	r2,-16(fp)
 2004408:	10c00917 	ldw	r3,36(r2)
 200440c:	e0bffc17 	ldw	r2,-16(fp)
 2004410:	10800117 	ldw	r2,4(r2)
 2004414:	18bff736 	bltu	r3,r2,20043f4 <__alt_mem_onchip_memory2_0+0xfdff43f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2004418:	e0bffc17 	ldw	r2,-16(fp)
 200441c:	10800917 	ldw	r2,36(r2)
 2004420:	10000126 	beq	r2,zero,2004428 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 2004424:	00000206 	br	2004430 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 2004428:	e0bffe17 	ldw	r2,-8(fp)
 200442c:	00bf9716 	blt	zero,r2,200428c <__alt_mem_onchip_memory2_0+0xfdff428c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2004430:	e0fffd17 	ldw	r3,-12(fp)
 2004434:	e0bff717 	ldw	r2,-36(fp)
 2004438:	18800426 	beq	r3,r2,200444c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 200443c:	e0fffd17 	ldw	r3,-12(fp)
 2004440:	e0bff717 	ldw	r2,-36(fp)
 2004444:	1885c83a 	sub	r2,r3,r2
 2004448:	00000606 	br	2004464 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 200444c:	e0bfff17 	ldw	r2,-4(fp)
 2004450:	1090000c 	andi	r2,r2,16384
 2004454:	10000226 	beq	r2,zero,2004460 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 2004458:	00bffd44 	movi	r2,-11
 200445c:	00000106 	br	2004464 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2004460:	00bffec4 	movi	r2,-5
}
 2004464:	e037883a 	mov	sp,fp
 2004468:	dfc00117 	ldw	ra,4(sp)
 200446c:	df000017 	ldw	fp,0(sp)
 2004470:	dec00204 	addi	sp,sp,8
 2004474:	f800283a 	ret

02004478 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2004478:	defff504 	addi	sp,sp,-44
 200447c:	df000a15 	stw	fp,40(sp)
 2004480:	df000a04 	addi	fp,sp,40
 2004484:	e13ffc15 	stw	r4,-16(fp)
 2004488:	e17ffd15 	stw	r5,-12(fp)
 200448c:	e1bffe15 	stw	r6,-8(fp)
 2004490:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2004494:	e03ff615 	stw	zero,-40(fp)
 2004498:	00808074 	movhi	r2,513
 200449c:	10a30904 	addi	r2,r2,-29660
 20044a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20044a4:	10003f26 	beq	r2,zero,20045a4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 20044a8:	e0bffc17 	ldw	r2,-16(fp)
 20044ac:	10003b26 	beq	r2,zero,200459c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 20044b0:	e0bffc17 	ldw	r2,-16(fp)
 20044b4:	e0fffe17 	ldw	r3,-8(fp)
 20044b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20044bc:	e0bffc17 	ldw	r2,-16(fp)
 20044c0:	e0ffff17 	ldw	r3,-4(fp)
 20044c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20044c8:	0005303a 	rdctl	r2,status
 20044cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20044d0:	e0fff817 	ldw	r3,-32(fp)
 20044d4:	00bfff84 	movi	r2,-2
 20044d8:	1884703a 	and	r2,r3,r2
 20044dc:	1001703a 	wrctl	status,r2
  
  return context;
 20044e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 20044e4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20044e8:	00808074 	movhi	r2,513
 20044ec:	10a30a04 	addi	r2,r2,-29656
 20044f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 20044f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20044f8:	e0fffd17 	ldw	r3,-12(fp)
 20044fc:	e0bff617 	ldw	r2,-40(fp)
 2004500:	1885883a 	add	r2,r3,r2
 2004504:	10c00044 	addi	r3,r2,1
 2004508:	e0bffc17 	ldw	r2,-16(fp)
 200450c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2004510:	e0bffc17 	ldw	r2,-16(fp)
 2004514:	10c00217 	ldw	r3,8(r2)
 2004518:	e0bff617 	ldw	r2,-40(fp)
 200451c:	1880042e 	bgeu	r3,r2,2004530 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 2004520:	e0bffc17 	ldw	r2,-16(fp)
 2004524:	00c00044 	movi	r3,1
 2004528:	10c00405 	stb	r3,16(r2)
 200452c:	00000206 	br	2004538 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 2004530:	e0bffc17 	ldw	r2,-16(fp)
 2004534:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2004538:	e0fffc17 	ldw	r3,-16(fp)
 200453c:	00808034 	movhi	r2,512
 2004540:	109c6404 	addi	r2,r2,29072
 2004544:	e0bff915 	stw	r2,-28(fp)
 2004548:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200454c:	e0bffa17 	ldw	r2,-24(fp)
 2004550:	e0fff917 	ldw	r3,-28(fp)
 2004554:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2004558:	e0bff917 	ldw	r2,-28(fp)
 200455c:	10c00017 	ldw	r3,0(r2)
 2004560:	e0bffa17 	ldw	r2,-24(fp)
 2004564:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004568:	e0bff917 	ldw	r2,-28(fp)
 200456c:	10800017 	ldw	r2,0(r2)
 2004570:	e0fffa17 	ldw	r3,-24(fp)
 2004574:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2004578:	e0bff917 	ldw	r2,-28(fp)
 200457c:	e0fffa17 	ldw	r3,-24(fp)
 2004580:	10c00015 	stw	r3,0(r2)
 2004584:	e0bff717 	ldw	r2,-36(fp)
 2004588:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200458c:	e0bffb17 	ldw	r2,-20(fp)
 2004590:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2004594:	0005883a 	mov	r2,zero
 2004598:	00000306 	br	20045a8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 200459c:	00bffa84 	movi	r2,-22
 20045a0:	00000106 	br	20045a8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 20045a4:	00bfde84 	movi	r2,-134
  }
}
 20045a8:	e037883a 	mov	sp,fp
 20045ac:	df000017 	ldw	fp,0(sp)
 20045b0:	dec00104 	addi	sp,sp,4
 20045b4:	f800283a 	ret

020045b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20045b8:	deffff04 	addi	sp,sp,-4
 20045bc:	df000015 	stw	fp,0(sp)
 20045c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20045c4:	e037883a 	mov	sp,fp
 20045c8:	df000017 	ldw	fp,0(sp)
 20045cc:	dec00104 	addi	sp,sp,4
 20045d0:	f800283a 	ret

020045d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20045d4:	defffe04 	addi	sp,sp,-8
 20045d8:	dfc00115 	stw	ra,4(sp)
 20045dc:	df000015 	stw	fp,0(sp)
 20045e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20045e4:	00808034 	movhi	r2,512
 20045e8:	109c6104 	addi	r2,r2,29060
 20045ec:	10800017 	ldw	r2,0(r2)
 20045f0:	10000526 	beq	r2,zero,2004608 <alt_get_errno+0x34>
 20045f4:	00808034 	movhi	r2,512
 20045f8:	109c6104 	addi	r2,r2,29060
 20045fc:	10800017 	ldw	r2,0(r2)
 2004600:	103ee83a 	callr	r2
 2004604:	00000206 	br	2004610 <alt_get_errno+0x3c>
 2004608:	00808074 	movhi	r2,513
 200460c:	10a30404 	addi	r2,r2,-29680
}
 2004610:	e037883a 	mov	sp,fp
 2004614:	dfc00117 	ldw	ra,4(sp)
 2004618:	df000017 	ldw	fp,0(sp)
 200461c:	dec00204 	addi	sp,sp,8
 2004620:	f800283a 	ret

02004624 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2004624:	defffa04 	addi	sp,sp,-24
 2004628:	dfc00515 	stw	ra,20(sp)
 200462c:	df000415 	stw	fp,16(sp)
 2004630:	df000404 	addi	fp,sp,16
 2004634:	e13ffe15 	stw	r4,-8(fp)
 2004638:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200463c:	e0bffe17 	ldw	r2,-8(fp)
 2004640:	10000326 	beq	r2,zero,2004650 <alt_dev_llist_insert+0x2c>
 2004644:	e0bffe17 	ldw	r2,-8(fp)
 2004648:	10800217 	ldw	r2,8(r2)
 200464c:	1000061e 	bne	r2,zero,2004668 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2004650:	20045d40 	call	20045d4 <alt_get_errno>
 2004654:	1007883a 	mov	r3,r2
 2004658:	00800584 	movi	r2,22
 200465c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2004660:	00bffa84 	movi	r2,-22
 2004664:	00001306 	br	20046b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2004668:	e0bffe17 	ldw	r2,-8(fp)
 200466c:	e0ffff17 	ldw	r3,-4(fp)
 2004670:	e0fffc15 	stw	r3,-16(fp)
 2004674:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2004678:	e0bffd17 	ldw	r2,-12(fp)
 200467c:	e0fffc17 	ldw	r3,-16(fp)
 2004680:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2004684:	e0bffc17 	ldw	r2,-16(fp)
 2004688:	10c00017 	ldw	r3,0(r2)
 200468c:	e0bffd17 	ldw	r2,-12(fp)
 2004690:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004694:	e0bffc17 	ldw	r2,-16(fp)
 2004698:	10800017 	ldw	r2,0(r2)
 200469c:	e0fffd17 	ldw	r3,-12(fp)
 20046a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20046a4:	e0bffc17 	ldw	r2,-16(fp)
 20046a8:	e0fffd17 	ldw	r3,-12(fp)
 20046ac:	10c00015 	stw	r3,0(r2)

  return 0;  
 20046b0:	0005883a 	mov	r2,zero
}
 20046b4:	e037883a 	mov	sp,fp
 20046b8:	dfc00117 	ldw	ra,4(sp)
 20046bc:	df000017 	ldw	fp,0(sp)
 20046c0:	dec00204 	addi	sp,sp,8
 20046c4:	f800283a 	ret

020046c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20046c8:	defffd04 	addi	sp,sp,-12
 20046cc:	dfc00215 	stw	ra,8(sp)
 20046d0:	df000115 	stw	fp,4(sp)
 20046d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20046d8:	00808034 	movhi	r2,512
 20046dc:	1095b604 	addi	r2,r2,22232
 20046e0:	e0bfff15 	stw	r2,-4(fp)
 20046e4:	00000606 	br	2004700 <_do_ctors+0x38>
        (*ctor) (); 
 20046e8:	e0bfff17 	ldw	r2,-4(fp)
 20046ec:	10800017 	ldw	r2,0(r2)
 20046f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20046f4:	e0bfff17 	ldw	r2,-4(fp)
 20046f8:	10bfff04 	addi	r2,r2,-4
 20046fc:	e0bfff15 	stw	r2,-4(fp)
 2004700:	e0ffff17 	ldw	r3,-4(fp)
 2004704:	00808034 	movhi	r2,512
 2004708:	1095b704 	addi	r2,r2,22236
 200470c:	18bff62e 	bgeu	r3,r2,20046e8 <__alt_mem_onchip_memory2_0+0xfdff46e8>
        (*ctor) (); 
}
 2004710:	e037883a 	mov	sp,fp
 2004714:	dfc00117 	ldw	ra,4(sp)
 2004718:	df000017 	ldw	fp,0(sp)
 200471c:	dec00204 	addi	sp,sp,8
 2004720:	f800283a 	ret

02004724 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2004724:	defffd04 	addi	sp,sp,-12
 2004728:	dfc00215 	stw	ra,8(sp)
 200472c:	df000115 	stw	fp,4(sp)
 2004730:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004734:	00808034 	movhi	r2,512
 2004738:	1095b604 	addi	r2,r2,22232
 200473c:	e0bfff15 	stw	r2,-4(fp)
 2004740:	00000606 	br	200475c <_do_dtors+0x38>
        (*dtor) (); 
 2004744:	e0bfff17 	ldw	r2,-4(fp)
 2004748:	10800017 	ldw	r2,0(r2)
 200474c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004750:	e0bfff17 	ldw	r2,-4(fp)
 2004754:	10bfff04 	addi	r2,r2,-4
 2004758:	e0bfff15 	stw	r2,-4(fp)
 200475c:	e0ffff17 	ldw	r3,-4(fp)
 2004760:	00808034 	movhi	r2,512
 2004764:	1095b704 	addi	r2,r2,22236
 2004768:	18bff62e 	bgeu	r3,r2,2004744 <__alt_mem_onchip_memory2_0+0xfdff4744>
        (*dtor) (); 
}
 200476c:	e037883a 	mov	sp,fp
 2004770:	dfc00117 	ldw	ra,4(sp)
 2004774:	df000017 	ldw	fp,0(sp)
 2004778:	dec00204 	addi	sp,sp,8
 200477c:	f800283a 	ret

02004780 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2004780:	deffff04 	addi	sp,sp,-4
 2004784:	df000015 	stw	fp,0(sp)
 2004788:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 200478c:	e037883a 	mov	sp,fp
 2004790:	df000017 	ldw	fp,0(sp)
 2004794:	dec00104 	addi	sp,sp,4
 2004798:	f800283a 	ret

0200479c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200479c:	defff904 	addi	sp,sp,-28
 20047a0:	dfc00615 	stw	ra,24(sp)
 20047a4:	df000515 	stw	fp,20(sp)
 20047a8:	df000504 	addi	fp,sp,20
 20047ac:	e13ffc15 	stw	r4,-16(fp)
 20047b0:	e17ffd15 	stw	r5,-12(fp)
 20047b4:	e1bffe15 	stw	r6,-8(fp)
 20047b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20047bc:	e0800217 	ldw	r2,8(fp)
 20047c0:	d8800015 	stw	r2,0(sp)
 20047c4:	e13ffc17 	ldw	r4,-16(fp)
 20047c8:	e17ffd17 	ldw	r5,-12(fp)
 20047cc:	e1bffe17 	ldw	r6,-8(fp)
 20047d0:	e1ffff17 	ldw	r7,-4(fp)
 20047d4:	200497c0 	call	200497c <alt_iic_isr_register>
}  
 20047d8:	e037883a 	mov	sp,fp
 20047dc:	dfc00117 	ldw	ra,4(sp)
 20047e0:	df000017 	ldw	fp,0(sp)
 20047e4:	dec00204 	addi	sp,sp,8
 20047e8:	f800283a 	ret

020047ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20047ec:	defff904 	addi	sp,sp,-28
 20047f0:	df000615 	stw	fp,24(sp)
 20047f4:	df000604 	addi	fp,sp,24
 20047f8:	e13ffe15 	stw	r4,-8(fp)
 20047fc:	e17fff15 	stw	r5,-4(fp)
 2004800:	e0bfff17 	ldw	r2,-4(fp)
 2004804:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004808:	0005303a 	rdctl	r2,status
 200480c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004810:	e0fffb17 	ldw	r3,-20(fp)
 2004814:	00bfff84 	movi	r2,-2
 2004818:	1884703a 	and	r2,r3,r2
 200481c:	1001703a 	wrctl	status,r2
  
  return context;
 2004820:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2004824:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2004828:	e0bffa17 	ldw	r2,-24(fp)
 200482c:	00c00044 	movi	r3,1
 2004830:	1884983a 	sll	r2,r3,r2
 2004834:	1007883a 	mov	r3,r2
 2004838:	00808074 	movhi	r2,513
 200483c:	10a30804 	addi	r2,r2,-29664
 2004840:	10800017 	ldw	r2,0(r2)
 2004844:	1886b03a 	or	r3,r3,r2
 2004848:	00808074 	movhi	r2,513
 200484c:	10a30804 	addi	r2,r2,-29664
 2004850:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2004854:	00808074 	movhi	r2,513
 2004858:	10a30804 	addi	r2,r2,-29664
 200485c:	10800017 	ldw	r2,0(r2)
 2004860:	100170fa 	wrctl	ienable,r2
 2004864:	e0bffc17 	ldw	r2,-16(fp)
 2004868:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200486c:	e0bffd17 	ldw	r2,-12(fp)
 2004870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2004874:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2004878:	0001883a 	nop
}
 200487c:	e037883a 	mov	sp,fp
 2004880:	df000017 	ldw	fp,0(sp)
 2004884:	dec00104 	addi	sp,sp,4
 2004888:	f800283a 	ret

0200488c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200488c:	defff904 	addi	sp,sp,-28
 2004890:	df000615 	stw	fp,24(sp)
 2004894:	df000604 	addi	fp,sp,24
 2004898:	e13ffe15 	stw	r4,-8(fp)
 200489c:	e17fff15 	stw	r5,-4(fp)
 20048a0:	e0bfff17 	ldw	r2,-4(fp)
 20048a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20048a8:	0005303a 	rdctl	r2,status
 20048ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20048b0:	e0fffb17 	ldw	r3,-20(fp)
 20048b4:	00bfff84 	movi	r2,-2
 20048b8:	1884703a 	and	r2,r3,r2
 20048bc:	1001703a 	wrctl	status,r2
  
  return context;
 20048c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20048c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 20048c8:	e0bffa17 	ldw	r2,-24(fp)
 20048cc:	00c00044 	movi	r3,1
 20048d0:	1884983a 	sll	r2,r3,r2
 20048d4:	0084303a 	nor	r2,zero,r2
 20048d8:	1007883a 	mov	r3,r2
 20048dc:	00808074 	movhi	r2,513
 20048e0:	10a30804 	addi	r2,r2,-29664
 20048e4:	10800017 	ldw	r2,0(r2)
 20048e8:	1886703a 	and	r3,r3,r2
 20048ec:	00808074 	movhi	r2,513
 20048f0:	10a30804 	addi	r2,r2,-29664
 20048f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20048f8:	00808074 	movhi	r2,513
 20048fc:	10a30804 	addi	r2,r2,-29664
 2004900:	10800017 	ldw	r2,0(r2)
 2004904:	100170fa 	wrctl	ienable,r2
 2004908:	e0bffc17 	ldw	r2,-16(fp)
 200490c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004910:	e0bffd17 	ldw	r2,-12(fp)
 2004914:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2004918:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 200491c:	0001883a 	nop
}
 2004920:	e037883a 	mov	sp,fp
 2004924:	df000017 	ldw	fp,0(sp)
 2004928:	dec00104 	addi	sp,sp,4
 200492c:	f800283a 	ret

02004930 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2004930:	defffc04 	addi	sp,sp,-16
 2004934:	df000315 	stw	fp,12(sp)
 2004938:	df000304 	addi	fp,sp,12
 200493c:	e13ffe15 	stw	r4,-8(fp)
 2004940:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2004944:	000530fa 	rdctl	r2,ienable
 2004948:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200494c:	e0bfff17 	ldw	r2,-4(fp)
 2004950:	00c00044 	movi	r3,1
 2004954:	1884983a 	sll	r2,r3,r2
 2004958:	1007883a 	mov	r3,r2
 200495c:	e0bffd17 	ldw	r2,-12(fp)
 2004960:	1884703a 	and	r2,r3,r2
 2004964:	1004c03a 	cmpne	r2,r2,zero
 2004968:	10803fcc 	andi	r2,r2,255
}
 200496c:	e037883a 	mov	sp,fp
 2004970:	df000017 	ldw	fp,0(sp)
 2004974:	dec00104 	addi	sp,sp,4
 2004978:	f800283a 	ret

0200497c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200497c:	defff504 	addi	sp,sp,-44
 2004980:	dfc00a15 	stw	ra,40(sp)
 2004984:	df000915 	stw	fp,36(sp)
 2004988:	df000904 	addi	fp,sp,36
 200498c:	e13ffc15 	stw	r4,-16(fp)
 2004990:	e17ffd15 	stw	r5,-12(fp)
 2004994:	e1bffe15 	stw	r6,-8(fp)
 2004998:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 200499c:	00bffa84 	movi	r2,-22
 20049a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20049a4:	e0bffd17 	ldw	r2,-12(fp)
 20049a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20049ac:	e0bff817 	ldw	r2,-32(fp)
 20049b0:	10800808 	cmpgei	r2,r2,32
 20049b4:	1000271e 	bne	r2,zero,2004a54 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20049b8:	0005303a 	rdctl	r2,status
 20049bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20049c0:	e0fffa17 	ldw	r3,-24(fp)
 20049c4:	00bfff84 	movi	r2,-2
 20049c8:	1884703a 	and	r2,r3,r2
 20049cc:	1001703a 	wrctl	status,r2
  
  return context;
 20049d0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20049d4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 20049d8:	00808074 	movhi	r2,513
 20049dc:	10a31604 	addi	r2,r2,-29608
 20049e0:	e0fff817 	ldw	r3,-32(fp)
 20049e4:	180690fa 	slli	r3,r3,3
 20049e8:	10c5883a 	add	r2,r2,r3
 20049ec:	e0fffe17 	ldw	r3,-8(fp)
 20049f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 20049f4:	00808074 	movhi	r2,513
 20049f8:	10a31604 	addi	r2,r2,-29608
 20049fc:	e0fff817 	ldw	r3,-32(fp)
 2004a00:	180690fa 	slli	r3,r3,3
 2004a04:	18c00104 	addi	r3,r3,4
 2004a08:	10c5883a 	add	r2,r2,r3
 2004a0c:	e0ffff17 	ldw	r3,-4(fp)
 2004a10:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2004a14:	e0bffe17 	ldw	r2,-8(fp)
 2004a18:	10000526 	beq	r2,zero,2004a30 <alt_iic_isr_register+0xb4>
 2004a1c:	e0bff817 	ldw	r2,-32(fp)
 2004a20:	e13ffc17 	ldw	r4,-16(fp)
 2004a24:	100b883a 	mov	r5,r2
 2004a28:	20047ec0 	call	20047ec <alt_ic_irq_enable>
 2004a2c:	00000406 	br	2004a40 <alt_iic_isr_register+0xc4>
 2004a30:	e0bff817 	ldw	r2,-32(fp)
 2004a34:	e13ffc17 	ldw	r4,-16(fp)
 2004a38:	100b883a 	mov	r5,r2
 2004a3c:	200488c0 	call	200488c <alt_ic_irq_disable>
 2004a40:	e0bff715 	stw	r2,-36(fp)
 2004a44:	e0bff917 	ldw	r2,-28(fp)
 2004a48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004a4c:	e0bffb17 	ldw	r2,-20(fp)
 2004a50:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2004a54:	e0bff717 	ldw	r2,-36(fp)
}
 2004a58:	e037883a 	mov	sp,fp
 2004a5c:	dfc00117 	ldw	ra,4(sp)
 2004a60:	df000017 	ldw	fp,0(sp)
 2004a64:	dec00204 	addi	sp,sp,8
 2004a68:	f800283a 	ret

02004a6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2004a6c:	defff804 	addi	sp,sp,-32
 2004a70:	dfc00715 	stw	ra,28(sp)
 2004a74:	df000615 	stw	fp,24(sp)
 2004a78:	dc000515 	stw	r16,20(sp)
 2004a7c:	df000604 	addi	fp,sp,24
 2004a80:	e13ffb15 	stw	r4,-20(fp)
 2004a84:	e17ffc15 	stw	r5,-16(fp)
 2004a88:	e1bffd15 	stw	r6,-12(fp)
 2004a8c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2004a90:	e13ffc17 	ldw	r4,-16(fp)
 2004a94:	e17ffd17 	ldw	r5,-12(fp)
 2004a98:	e1bffe17 	ldw	r6,-8(fp)
 2004a9c:	2004d080 	call	2004d08 <open>
 2004aa0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2004aa4:	e0bffa17 	ldw	r2,-24(fp)
 2004aa8:	10002216 	blt	r2,zero,2004b34 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2004aac:	04008034 	movhi	r16,512
 2004ab0:	8417e004 	addi	r16,r16,24448
 2004ab4:	e0bffa17 	ldw	r2,-24(fp)
 2004ab8:	1009883a 	mov	r4,r2
 2004abc:	01400304 	movi	r5,12
 2004ac0:	2002f600 	call	2002f60 <__mulsi3>
 2004ac4:	8085883a 	add	r2,r16,r2
 2004ac8:	10c00017 	ldw	r3,0(r2)
 2004acc:	e0bffb17 	ldw	r2,-20(fp)
 2004ad0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2004ad4:	04008034 	movhi	r16,512
 2004ad8:	8417e004 	addi	r16,r16,24448
 2004adc:	e0bffa17 	ldw	r2,-24(fp)
 2004ae0:	1009883a 	mov	r4,r2
 2004ae4:	01400304 	movi	r5,12
 2004ae8:	2002f600 	call	2002f60 <__mulsi3>
 2004aec:	10800104 	addi	r2,r2,4
 2004af0:	8085883a 	add	r2,r16,r2
 2004af4:	10c00017 	ldw	r3,0(r2)
 2004af8:	e0bffb17 	ldw	r2,-20(fp)
 2004afc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2004b00:	04008034 	movhi	r16,512
 2004b04:	8417e004 	addi	r16,r16,24448
 2004b08:	e0bffa17 	ldw	r2,-24(fp)
 2004b0c:	1009883a 	mov	r4,r2
 2004b10:	01400304 	movi	r5,12
 2004b14:	2002f600 	call	2002f60 <__mulsi3>
 2004b18:	10800204 	addi	r2,r2,8
 2004b1c:	8085883a 	add	r2,r16,r2
 2004b20:	10c00017 	ldw	r3,0(r2)
 2004b24:	e0bffb17 	ldw	r2,-20(fp)
 2004b28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2004b2c:	e13ffa17 	ldw	r4,-24(fp)
 2004b30:	20036fc0 	call	20036fc <alt_release_fd>
  }
} 
 2004b34:	e6ffff04 	addi	sp,fp,-4
 2004b38:	dfc00217 	ldw	ra,8(sp)
 2004b3c:	df000117 	ldw	fp,4(sp)
 2004b40:	dc000017 	ldw	r16,0(sp)
 2004b44:	dec00304 	addi	sp,sp,12
 2004b48:	f800283a 	ret

02004b4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2004b4c:	defffb04 	addi	sp,sp,-20
 2004b50:	dfc00415 	stw	ra,16(sp)
 2004b54:	df000315 	stw	fp,12(sp)
 2004b58:	df000304 	addi	fp,sp,12
 2004b5c:	e13ffd15 	stw	r4,-12(fp)
 2004b60:	e17ffe15 	stw	r5,-8(fp)
 2004b64:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2004b68:	01008034 	movhi	r4,512
 2004b6c:	2117e304 	addi	r4,r4,24460
 2004b70:	e17ffd17 	ldw	r5,-12(fp)
 2004b74:	01800044 	movi	r6,1
 2004b78:	01c07fc4 	movi	r7,511
 2004b7c:	2004a6c0 	call	2004a6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2004b80:	01008034 	movhi	r4,512
 2004b84:	2117e004 	addi	r4,r4,24448
 2004b88:	e17ffe17 	ldw	r5,-8(fp)
 2004b8c:	000d883a 	mov	r6,zero
 2004b90:	01c07fc4 	movi	r7,511
 2004b94:	2004a6c0 	call	2004a6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2004b98:	01008034 	movhi	r4,512
 2004b9c:	2117e604 	addi	r4,r4,24472
 2004ba0:	e17fff17 	ldw	r5,-4(fp)
 2004ba4:	01800044 	movi	r6,1
 2004ba8:	01c07fc4 	movi	r7,511
 2004bac:	2004a6c0 	call	2004a6c <alt_open_fd>
}  
 2004bb0:	e037883a 	mov	sp,fp
 2004bb4:	dfc00117 	ldw	ra,4(sp)
 2004bb8:	df000017 	ldw	fp,0(sp)
 2004bbc:	dec00204 	addi	sp,sp,8
 2004bc0:	f800283a 	ret

02004bc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004bc4:	defffe04 	addi	sp,sp,-8
 2004bc8:	dfc00115 	stw	ra,4(sp)
 2004bcc:	df000015 	stw	fp,0(sp)
 2004bd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004bd4:	00808034 	movhi	r2,512
 2004bd8:	109c6104 	addi	r2,r2,29060
 2004bdc:	10800017 	ldw	r2,0(r2)
 2004be0:	10000526 	beq	r2,zero,2004bf8 <alt_get_errno+0x34>
 2004be4:	00808034 	movhi	r2,512
 2004be8:	109c6104 	addi	r2,r2,29060
 2004bec:	10800017 	ldw	r2,0(r2)
 2004bf0:	103ee83a 	callr	r2
 2004bf4:	00000206 	br	2004c00 <alt_get_errno+0x3c>
 2004bf8:	00808074 	movhi	r2,513
 2004bfc:	10a30404 	addi	r2,r2,-29680
}
 2004c00:	e037883a 	mov	sp,fp
 2004c04:	dfc00117 	ldw	ra,4(sp)
 2004c08:	df000017 	ldw	fp,0(sp)
 2004c0c:	dec00204 	addi	sp,sp,8
 2004c10:	f800283a 	ret

02004c14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2004c14:	defffb04 	addi	sp,sp,-20
 2004c18:	dfc00415 	stw	ra,16(sp)
 2004c1c:	df000315 	stw	fp,12(sp)
 2004c20:	dc000215 	stw	r16,8(sp)
 2004c24:	df000304 	addi	fp,sp,12
 2004c28:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2004c2c:	e0bffe17 	ldw	r2,-8(fp)
 2004c30:	10800217 	ldw	r2,8(r2)
 2004c34:	10d00034 	orhi	r3,r2,16384
 2004c38:	e0bffe17 	ldw	r2,-8(fp)
 2004c3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004c40:	e03ffd15 	stw	zero,-12(fp)
 2004c44:	00002306 	br	2004cd4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004c48:	04008034 	movhi	r16,512
 2004c4c:	8417e004 	addi	r16,r16,24448
 2004c50:	e0bffd17 	ldw	r2,-12(fp)
 2004c54:	1009883a 	mov	r4,r2
 2004c58:	01400304 	movi	r5,12
 2004c5c:	2002f600 	call	2002f60 <__mulsi3>
 2004c60:	8085883a 	add	r2,r16,r2
 2004c64:	10c00017 	ldw	r3,0(r2)
 2004c68:	e0bffe17 	ldw	r2,-8(fp)
 2004c6c:	10800017 	ldw	r2,0(r2)
 2004c70:	1880151e 	bne	r3,r2,2004cc8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2004c74:	04008034 	movhi	r16,512
 2004c78:	8417e004 	addi	r16,r16,24448
 2004c7c:	e0bffd17 	ldw	r2,-12(fp)
 2004c80:	1009883a 	mov	r4,r2
 2004c84:	01400304 	movi	r5,12
 2004c88:	2002f600 	call	2002f60 <__mulsi3>
 2004c8c:	10800204 	addi	r2,r2,8
 2004c90:	8085883a 	add	r2,r16,r2
 2004c94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004c98:	10000b0e 	bge	r2,zero,2004cc8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2004c9c:	e13ffd17 	ldw	r4,-12(fp)
 2004ca0:	01400304 	movi	r5,12
 2004ca4:	2002f600 	call	2002f60 <__mulsi3>
 2004ca8:	1007883a 	mov	r3,r2
 2004cac:	00808034 	movhi	r2,512
 2004cb0:	1097e004 	addi	r2,r2,24448
 2004cb4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2004cb8:	e0bffe17 	ldw	r2,-8(fp)
 2004cbc:	18800226 	beq	r3,r2,2004cc8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2004cc0:	00bffcc4 	movi	r2,-13
 2004cc4:	00000a06 	br	2004cf0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004cc8:	e0bffd17 	ldw	r2,-12(fp)
 2004ccc:	10800044 	addi	r2,r2,1
 2004cd0:	e0bffd15 	stw	r2,-12(fp)
 2004cd4:	00808034 	movhi	r2,512
 2004cd8:	109c6004 	addi	r2,r2,29056
 2004cdc:	10800017 	ldw	r2,0(r2)
 2004ce0:	1007883a 	mov	r3,r2
 2004ce4:	e0bffd17 	ldw	r2,-12(fp)
 2004ce8:	18bfd72e 	bgeu	r3,r2,2004c48 <__alt_mem_onchip_memory2_0+0xfdff4c48>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2004cec:	0005883a 	mov	r2,zero
}
 2004cf0:	e6ffff04 	addi	sp,fp,-4
 2004cf4:	dfc00217 	ldw	ra,8(sp)
 2004cf8:	df000117 	ldw	fp,4(sp)
 2004cfc:	dc000017 	ldw	r16,0(sp)
 2004d00:	dec00304 	addi	sp,sp,12
 2004d04:	f800283a 	ret

02004d08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2004d08:	defff604 	addi	sp,sp,-40
 2004d0c:	dfc00915 	stw	ra,36(sp)
 2004d10:	df000815 	stw	fp,32(sp)
 2004d14:	df000804 	addi	fp,sp,32
 2004d18:	e13ffd15 	stw	r4,-12(fp)
 2004d1c:	e17ffe15 	stw	r5,-8(fp)
 2004d20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2004d24:	00bfffc4 	movi	r2,-1
 2004d28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2004d2c:	00bffb44 	movi	r2,-19
 2004d30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2004d34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2004d38:	e13ffd17 	ldw	r4,-12(fp)
 2004d3c:	01408034 	movhi	r5,512
 2004d40:	295c5e04 	addi	r5,r5,29048
 2004d44:	20050240 	call	2005024 <alt_find_dev>
 2004d48:	e0bff815 	stw	r2,-32(fp)
 2004d4c:	e0bff817 	ldw	r2,-32(fp)
 2004d50:	1000051e 	bne	r2,zero,2004d68 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2004d54:	e13ffd17 	ldw	r4,-12(fp)
 2004d58:	20050b40 	call	20050b4 <alt_find_file>
 2004d5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2004d60:	00800044 	movi	r2,1
 2004d64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2004d68:	e0bff817 	ldw	r2,-32(fp)
 2004d6c:	10002b26 	beq	r2,zero,2004e1c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2004d70:	e13ff817 	ldw	r4,-32(fp)
 2004d74:	20051c80 	call	20051c8 <alt_get_fd>
 2004d78:	e0bff915 	stw	r2,-28(fp)
 2004d7c:	e0bff917 	ldw	r2,-28(fp)
 2004d80:	1000030e 	bge	r2,zero,2004d90 <open+0x88>
    {
      status = index;
 2004d84:	e0bff917 	ldw	r2,-28(fp)
 2004d88:	e0bffa15 	stw	r2,-24(fp)
 2004d8c:	00002506 	br	2004e24 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2004d90:	e13ff917 	ldw	r4,-28(fp)
 2004d94:	01400304 	movi	r5,12
 2004d98:	2002f600 	call	2002f60 <__mulsi3>
 2004d9c:	1007883a 	mov	r3,r2
 2004da0:	00808034 	movhi	r2,512
 2004da4:	1097e004 	addi	r2,r2,24448
 2004da8:	1885883a 	add	r2,r3,r2
 2004dac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2004db0:	e0fffe17 	ldw	r3,-8(fp)
 2004db4:	00900034 	movhi	r2,16384
 2004db8:	10bfffc4 	addi	r2,r2,-1
 2004dbc:	1886703a 	and	r3,r3,r2
 2004dc0:	e0bffc17 	ldw	r2,-16(fp)
 2004dc4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2004dc8:	e0bffb17 	ldw	r2,-20(fp)
 2004dcc:	1000051e 	bne	r2,zero,2004de4 <open+0xdc>
 2004dd0:	e13ffc17 	ldw	r4,-16(fp)
 2004dd4:	2004c140 	call	2004c14 <alt_file_locked>
 2004dd8:	e0bffa15 	stw	r2,-24(fp)
 2004ddc:	e0bffa17 	ldw	r2,-24(fp)
 2004de0:	10001016 	blt	r2,zero,2004e24 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2004de4:	e0bff817 	ldw	r2,-32(fp)
 2004de8:	10800317 	ldw	r2,12(r2)
 2004dec:	10000826 	beq	r2,zero,2004e10 <open+0x108>
 2004df0:	e0bff817 	ldw	r2,-32(fp)
 2004df4:	10800317 	ldw	r2,12(r2)
 2004df8:	e13ffc17 	ldw	r4,-16(fp)
 2004dfc:	e17ffd17 	ldw	r5,-12(fp)
 2004e00:	e1bffe17 	ldw	r6,-8(fp)
 2004e04:	e1ffff17 	ldw	r7,-4(fp)
 2004e08:	103ee83a 	callr	r2
 2004e0c:	00000106 	br	2004e14 <open+0x10c>
 2004e10:	0005883a 	mov	r2,zero
 2004e14:	e0bffa15 	stw	r2,-24(fp)
 2004e18:	00000206 	br	2004e24 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2004e1c:	00bffb44 	movi	r2,-19
 2004e20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2004e24:	e0bffa17 	ldw	r2,-24(fp)
 2004e28:	1000090e 	bge	r2,zero,2004e50 <open+0x148>
  {
    alt_release_fd (index);  
 2004e2c:	e13ff917 	ldw	r4,-28(fp)
 2004e30:	20036fc0 	call	20036fc <alt_release_fd>
    ALT_ERRNO = -status;
 2004e34:	2004bc40 	call	2004bc4 <alt_get_errno>
 2004e38:	1007883a 	mov	r3,r2
 2004e3c:	e0bffa17 	ldw	r2,-24(fp)
 2004e40:	0085c83a 	sub	r2,zero,r2
 2004e44:	18800015 	stw	r2,0(r3)
    return -1;
 2004e48:	00bfffc4 	movi	r2,-1
 2004e4c:	00000106 	br	2004e54 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 2004e50:	e0bff917 	ldw	r2,-28(fp)
}
 2004e54:	e037883a 	mov	sp,fp
 2004e58:	dfc00117 	ldw	ra,4(sp)
 2004e5c:	df000017 	ldw	fp,0(sp)
 2004e60:	dec00204 	addi	sp,sp,8
 2004e64:	f800283a 	ret

02004e68 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2004e68:	defffa04 	addi	sp,sp,-24
 2004e6c:	df000515 	stw	fp,20(sp)
 2004e70:	df000504 	addi	fp,sp,20
 2004e74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004e78:	0005303a 	rdctl	r2,status
 2004e7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004e80:	e0fffc17 	ldw	r3,-16(fp)
 2004e84:	00bfff84 	movi	r2,-2
 2004e88:	1884703a 	and	r2,r3,r2
 2004e8c:	1001703a 	wrctl	status,r2
  
  return context;
 2004e90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2004e94:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2004e98:	e0bfff17 	ldw	r2,-4(fp)
 2004e9c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2004ea0:	e0bffd17 	ldw	r2,-12(fp)
 2004ea4:	10800017 	ldw	r2,0(r2)
 2004ea8:	e0fffd17 	ldw	r3,-12(fp)
 2004eac:	18c00117 	ldw	r3,4(r3)
 2004eb0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2004eb4:	e0bffd17 	ldw	r2,-12(fp)
 2004eb8:	10800117 	ldw	r2,4(r2)
 2004ebc:	e0fffd17 	ldw	r3,-12(fp)
 2004ec0:	18c00017 	ldw	r3,0(r3)
 2004ec4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2004ec8:	e0bffd17 	ldw	r2,-12(fp)
 2004ecc:	e0fffd17 	ldw	r3,-12(fp)
 2004ed0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2004ed4:	e0bffd17 	ldw	r2,-12(fp)
 2004ed8:	e0fffd17 	ldw	r3,-12(fp)
 2004edc:	10c00015 	stw	r3,0(r2)
 2004ee0:	e0bffb17 	ldw	r2,-20(fp)
 2004ee4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004ee8:	e0bffe17 	ldw	r2,-8(fp)
 2004eec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2004ef0:	e037883a 	mov	sp,fp
 2004ef4:	df000017 	ldw	fp,0(sp)
 2004ef8:	dec00104 	addi	sp,sp,4
 2004efc:	f800283a 	ret

02004f00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2004f00:	defffb04 	addi	sp,sp,-20
 2004f04:	dfc00415 	stw	ra,16(sp)
 2004f08:	df000315 	stw	fp,12(sp)
 2004f0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2004f10:	d0a00c17 	ldw	r2,-32720(gp)
 2004f14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2004f18:	d0a6b217 	ldw	r2,-25912(gp)
 2004f1c:	10800044 	addi	r2,r2,1
 2004f20:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004f24:	00002e06 	br	2004fe0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2004f28:	e0bffd17 	ldw	r2,-12(fp)
 2004f2c:	10800017 	ldw	r2,0(r2)
 2004f30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2004f34:	e0bffd17 	ldw	r2,-12(fp)
 2004f38:	10800403 	ldbu	r2,16(r2)
 2004f3c:	10803fcc 	andi	r2,r2,255
 2004f40:	10000426 	beq	r2,zero,2004f54 <alt_tick+0x54>
 2004f44:	d0a6b217 	ldw	r2,-25912(gp)
 2004f48:	1000021e 	bne	r2,zero,2004f54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2004f4c:	e0bffd17 	ldw	r2,-12(fp)
 2004f50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2004f54:	e0bffd17 	ldw	r2,-12(fp)
 2004f58:	10800217 	ldw	r2,8(r2)
 2004f5c:	d0e6b217 	ldw	r3,-25912(gp)
 2004f60:	18801d36 	bltu	r3,r2,2004fd8 <alt_tick+0xd8>
 2004f64:	e0bffd17 	ldw	r2,-12(fp)
 2004f68:	10800403 	ldbu	r2,16(r2)
 2004f6c:	10803fcc 	andi	r2,r2,255
 2004f70:	1000191e 	bne	r2,zero,2004fd8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2004f74:	e0bffd17 	ldw	r2,-12(fp)
 2004f78:	10800317 	ldw	r2,12(r2)
 2004f7c:	e0fffd17 	ldw	r3,-12(fp)
 2004f80:	18c00517 	ldw	r3,20(r3)
 2004f84:	1809883a 	mov	r4,r3
 2004f88:	103ee83a 	callr	r2
 2004f8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2004f90:	e0bfff17 	ldw	r2,-4(fp)
 2004f94:	1000031e 	bne	r2,zero,2004fa4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2004f98:	e13ffd17 	ldw	r4,-12(fp)
 2004f9c:	2004e680 	call	2004e68 <alt_alarm_stop>
 2004fa0:	00000d06 	br	2004fd8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2004fa4:	e0bffd17 	ldw	r2,-12(fp)
 2004fa8:	10c00217 	ldw	r3,8(r2)
 2004fac:	e0bfff17 	ldw	r2,-4(fp)
 2004fb0:	1887883a 	add	r3,r3,r2
 2004fb4:	e0bffd17 	ldw	r2,-12(fp)
 2004fb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2004fbc:	e0bffd17 	ldw	r2,-12(fp)
 2004fc0:	10c00217 	ldw	r3,8(r2)
 2004fc4:	d0a6b217 	ldw	r2,-25912(gp)
 2004fc8:	1880032e 	bgeu	r3,r2,2004fd8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2004fcc:	e0bffd17 	ldw	r2,-12(fp)
 2004fd0:	00c00044 	movi	r3,1
 2004fd4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2004fd8:	e0bffe17 	ldw	r2,-8(fp)
 2004fdc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004fe0:	e0fffd17 	ldw	r3,-12(fp)
 2004fe4:	d0a00c04 	addi	r2,gp,-32720
 2004fe8:	18bfcf1e 	bne	r3,r2,2004f28 <__alt_mem_onchip_memory2_0+0xfdff4f28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2004fec:	0001883a 	nop
}
 2004ff0:	e037883a 	mov	sp,fp
 2004ff4:	dfc00117 	ldw	ra,4(sp)
 2004ff8:	df000017 	ldw	fp,0(sp)
 2004ffc:	dec00204 	addi	sp,sp,8
 2005000:	f800283a 	ret

02005004 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2005004:	deffff04 	addi	sp,sp,-4
 2005008:	df000015 	stw	fp,0(sp)
 200500c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2005010:	000170fa 	wrctl	ienable,zero
}
 2005014:	e037883a 	mov	sp,fp
 2005018:	df000017 	ldw	fp,0(sp)
 200501c:	dec00104 	addi	sp,sp,4
 2005020:	f800283a 	ret

02005024 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2005024:	defffa04 	addi	sp,sp,-24
 2005028:	dfc00515 	stw	ra,20(sp)
 200502c:	df000415 	stw	fp,16(sp)
 2005030:	df000404 	addi	fp,sp,16
 2005034:	e13ffe15 	stw	r4,-8(fp)
 2005038:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200503c:	e0bfff17 	ldw	r2,-4(fp)
 2005040:	10800017 	ldw	r2,0(r2)
 2005044:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2005048:	e13ffe17 	ldw	r4,-8(fp)
 200504c:	200038c0 	call	200038c <strlen>
 2005050:	10800044 	addi	r2,r2,1
 2005054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2005058:	00000d06 	br	2005090 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200505c:	e0bffc17 	ldw	r2,-16(fp)
 2005060:	10c00217 	ldw	r3,8(r2)
 2005064:	e0bffd17 	ldw	r2,-12(fp)
 2005068:	1809883a 	mov	r4,r3
 200506c:	e17ffe17 	ldw	r5,-8(fp)
 2005070:	100d883a 	mov	r6,r2
 2005074:	20053840 	call	2005384 <memcmp>
 2005078:	1000021e 	bne	r2,zero,2005084 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200507c:	e0bffc17 	ldw	r2,-16(fp)
 2005080:	00000706 	br	20050a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2005084:	e0bffc17 	ldw	r2,-16(fp)
 2005088:	10800017 	ldw	r2,0(r2)
 200508c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2005090:	e0fffc17 	ldw	r3,-16(fp)
 2005094:	e0bfff17 	ldw	r2,-4(fp)
 2005098:	18bff01e 	bne	r3,r2,200505c <__alt_mem_onchip_memory2_0+0xfdff505c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200509c:	0005883a 	mov	r2,zero
}
 20050a0:	e037883a 	mov	sp,fp
 20050a4:	dfc00117 	ldw	ra,4(sp)
 20050a8:	df000017 	ldw	fp,0(sp)
 20050ac:	dec00204 	addi	sp,sp,8
 20050b0:	f800283a 	ret

020050b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20050b4:	defffb04 	addi	sp,sp,-20
 20050b8:	dfc00415 	stw	ra,16(sp)
 20050bc:	df000315 	stw	fp,12(sp)
 20050c0:	df000304 	addi	fp,sp,12
 20050c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20050c8:	00808034 	movhi	r2,512
 20050cc:	109c5c04 	addi	r2,r2,29040
 20050d0:	10800017 	ldw	r2,0(r2)
 20050d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20050d8:	00003106 	br	20051a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 20050dc:	e0bffd17 	ldw	r2,-12(fp)
 20050e0:	10800217 	ldw	r2,8(r2)
 20050e4:	1009883a 	mov	r4,r2
 20050e8:	200038c0 	call	200038c <strlen>
 20050ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20050f0:	e0bffd17 	ldw	r2,-12(fp)
 20050f4:	10c00217 	ldw	r3,8(r2)
 20050f8:	e0bffe17 	ldw	r2,-8(fp)
 20050fc:	10bfffc4 	addi	r2,r2,-1
 2005100:	1885883a 	add	r2,r3,r2
 2005104:	10800003 	ldbu	r2,0(r2)
 2005108:	10803fcc 	andi	r2,r2,255
 200510c:	1080201c 	xori	r2,r2,128
 2005110:	10bfe004 	addi	r2,r2,-128
 2005114:	10800bd8 	cmpnei	r2,r2,47
 2005118:	1000031e 	bne	r2,zero,2005128 <alt_find_file+0x74>
    {
      len -= 1;
 200511c:	e0bffe17 	ldw	r2,-8(fp)
 2005120:	10bfffc4 	addi	r2,r2,-1
 2005124:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2005128:	e0bffe17 	ldw	r2,-8(fp)
 200512c:	e0ffff17 	ldw	r3,-4(fp)
 2005130:	1885883a 	add	r2,r3,r2
 2005134:	10800003 	ldbu	r2,0(r2)
 2005138:	10803fcc 	andi	r2,r2,255
 200513c:	1080201c 	xori	r2,r2,128
 2005140:	10bfe004 	addi	r2,r2,-128
 2005144:	10800be0 	cmpeqi	r2,r2,47
 2005148:	1000081e 	bne	r2,zero,200516c <alt_find_file+0xb8>
 200514c:	e0bffe17 	ldw	r2,-8(fp)
 2005150:	e0ffff17 	ldw	r3,-4(fp)
 2005154:	1885883a 	add	r2,r3,r2
 2005158:	10800003 	ldbu	r2,0(r2)
 200515c:	10803fcc 	andi	r2,r2,255
 2005160:	1080201c 	xori	r2,r2,128
 2005164:	10bfe004 	addi	r2,r2,-128
 2005168:	10000a1e 	bne	r2,zero,2005194 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 200516c:	e0bffd17 	ldw	r2,-12(fp)
 2005170:	10c00217 	ldw	r3,8(r2)
 2005174:	e0bffe17 	ldw	r2,-8(fp)
 2005178:	1809883a 	mov	r4,r3
 200517c:	e17fff17 	ldw	r5,-4(fp)
 2005180:	100d883a 	mov	r6,r2
 2005184:	20053840 	call	2005384 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2005188:	1000021e 	bne	r2,zero,2005194 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200518c:	e0bffd17 	ldw	r2,-12(fp)
 2005190:	00000806 	br	20051b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 2005194:	e0bffd17 	ldw	r2,-12(fp)
 2005198:	10800017 	ldw	r2,0(r2)
 200519c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20051a0:	e0fffd17 	ldw	r3,-12(fp)
 20051a4:	00808034 	movhi	r2,512
 20051a8:	109c5c04 	addi	r2,r2,29040
 20051ac:	18bfcb1e 	bne	r3,r2,20050dc <__alt_mem_onchip_memory2_0+0xfdff50dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20051b0:	0005883a 	mov	r2,zero
}
 20051b4:	e037883a 	mov	sp,fp
 20051b8:	dfc00117 	ldw	ra,4(sp)
 20051bc:	df000017 	ldw	fp,0(sp)
 20051c0:	dec00204 	addi	sp,sp,8
 20051c4:	f800283a 	ret

020051c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20051c8:	defffa04 	addi	sp,sp,-24
 20051cc:	dfc00515 	stw	ra,20(sp)
 20051d0:	df000415 	stw	fp,16(sp)
 20051d4:	dc000315 	stw	r16,12(sp)
 20051d8:	df000404 	addi	fp,sp,16
 20051dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 20051e0:	00bffa04 	movi	r2,-24
 20051e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20051e8:	e03ffc15 	stw	zero,-16(fp)
 20051ec:	00002106 	br	2005274 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 20051f0:	04008034 	movhi	r16,512
 20051f4:	8417e004 	addi	r16,r16,24448
 20051f8:	e0bffc17 	ldw	r2,-16(fp)
 20051fc:	1009883a 	mov	r4,r2
 2005200:	01400304 	movi	r5,12
 2005204:	2002f600 	call	2002f60 <__mulsi3>
 2005208:	8085883a 	add	r2,r16,r2
 200520c:	10800017 	ldw	r2,0(r2)
 2005210:	1000151e 	bne	r2,zero,2005268 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 2005214:	04008034 	movhi	r16,512
 2005218:	8417e004 	addi	r16,r16,24448
 200521c:	e0bffc17 	ldw	r2,-16(fp)
 2005220:	1009883a 	mov	r4,r2
 2005224:	01400304 	movi	r5,12
 2005228:	2002f600 	call	2002f60 <__mulsi3>
 200522c:	8085883a 	add	r2,r16,r2
 2005230:	e0fffe17 	ldw	r3,-8(fp)
 2005234:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2005238:	00808034 	movhi	r2,512
 200523c:	109c6004 	addi	r2,r2,29056
 2005240:	10c00017 	ldw	r3,0(r2)
 2005244:	e0bffc17 	ldw	r2,-16(fp)
 2005248:	1880040e 	bge	r3,r2,200525c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 200524c:	00808034 	movhi	r2,512
 2005250:	109c6004 	addi	r2,r2,29056
 2005254:	e0fffc17 	ldw	r3,-16(fp)
 2005258:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 200525c:	e0bffc17 	ldw	r2,-16(fp)
 2005260:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2005264:	00000606 	br	2005280 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005268:	e0bffc17 	ldw	r2,-16(fp)
 200526c:	10800044 	addi	r2,r2,1
 2005270:	e0bffc15 	stw	r2,-16(fp)
 2005274:	e0bffc17 	ldw	r2,-16(fp)
 2005278:	10800810 	cmplti	r2,r2,32
 200527c:	103fdc1e 	bne	r2,zero,20051f0 <__alt_mem_onchip_memory2_0+0xfdff51f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2005280:	e0bffd17 	ldw	r2,-12(fp)
}
 2005284:	e6ffff04 	addi	sp,fp,-4
 2005288:	dfc00217 	ldw	ra,8(sp)
 200528c:	df000117 	ldw	fp,4(sp)
 2005290:	dc000017 	ldw	r16,0(sp)
 2005294:	dec00304 	addi	sp,sp,12
 2005298:	f800283a 	ret

0200529c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 200529c:	defffe04 	addi	sp,sp,-8
 20052a0:	df000115 	stw	fp,4(sp)
 20052a4:	df000104 	addi	fp,sp,4
 20052a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 20052ac:	e0bfff17 	ldw	r2,-4(fp)
 20052b0:	10bffe84 	addi	r2,r2,-6
 20052b4:	10c00428 	cmpgeui	r3,r2,16
 20052b8:	18001a1e 	bne	r3,zero,2005324 <alt_exception_cause_generated_bad_addr+0x88>
 20052bc:	100690ba 	slli	r3,r2,2
 20052c0:	00808034 	movhi	r2,512
 20052c4:	1094b504 	addi	r2,r2,21204
 20052c8:	1885883a 	add	r2,r3,r2
 20052cc:	10800017 	ldw	r2,0(r2)
 20052d0:	1000683a 	jmp	r2
 20052d4:	02005314 	movui	r8,332
 20052d8:	02005314 	movui	r8,332
 20052dc:	02005324 	muli	r8,zero,332
 20052e0:	02005324 	muli	r8,zero,332
 20052e4:	02005324 	muli	r8,zero,332
 20052e8:	02005314 	movui	r8,332
 20052ec:	0200531c 	xori	r8,zero,332
 20052f0:	02005324 	muli	r8,zero,332
 20052f4:	02005314 	movui	r8,332
 20052f8:	02005314 	movui	r8,332
 20052fc:	02005324 	muli	r8,zero,332
 2005300:	02005314 	movui	r8,332
 2005304:	0200531c 	xori	r8,zero,332
 2005308:	02005324 	muli	r8,zero,332
 200530c:	02005324 	muli	r8,zero,332
 2005310:	02005314 	movui	r8,332
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2005314:	00800044 	movi	r2,1
 2005318:	00000306 	br	2005328 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 200531c:	0005883a 	mov	r2,zero
 2005320:	00000106 	br	2005328 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2005324:	0005883a 	mov	r2,zero
  }
}
 2005328:	e037883a 	mov	sp,fp
 200532c:	df000017 	ldw	fp,0(sp)
 2005330:	dec00104 	addi	sp,sp,4
 2005334:	f800283a 	ret

02005338 <atexit>:
 2005338:	200b883a 	mov	r5,r4
 200533c:	000d883a 	mov	r6,zero
 2005340:	0009883a 	mov	r4,zero
 2005344:	000f883a 	mov	r7,zero
 2005348:	20054001 	jmpi	2005400 <__register_exitproc>

0200534c <exit>:
 200534c:	defffe04 	addi	sp,sp,-8
 2005350:	000b883a 	mov	r5,zero
 2005354:	dc000015 	stw	r16,0(sp)
 2005358:	dfc00115 	stw	ra,4(sp)
 200535c:	2021883a 	mov	r16,r4
 2005360:	20055140 	call	2005514 <__call_exitprocs>
 2005364:	00808034 	movhi	r2,512
 2005368:	109c5804 	addi	r2,r2,29024
 200536c:	11000017 	ldw	r4,0(r2)
 2005370:	20800f17 	ldw	r2,60(r4)
 2005374:	10000126 	beq	r2,zero,200537c <exit+0x30>
 2005378:	103ee83a 	callr	r2
 200537c:	8009883a 	mov	r4,r16
 2005380:	20056a80 	call	20056a8 <_exit>

02005384 <memcmp>:
 2005384:	01c000c4 	movi	r7,3
 2005388:	3980192e 	bgeu	r7,r6,20053f0 <memcmp+0x6c>
 200538c:	2144b03a 	or	r2,r4,r5
 2005390:	11c4703a 	and	r2,r2,r7
 2005394:	10000f26 	beq	r2,zero,20053d4 <memcmp+0x50>
 2005398:	20800003 	ldbu	r2,0(r4)
 200539c:	28c00003 	ldbu	r3,0(r5)
 20053a0:	10c0151e 	bne	r2,r3,20053f8 <memcmp+0x74>
 20053a4:	31bfff84 	addi	r6,r6,-2
 20053a8:	01ffffc4 	movi	r7,-1
 20053ac:	00000406 	br	20053c0 <memcmp+0x3c>
 20053b0:	20800003 	ldbu	r2,0(r4)
 20053b4:	28c00003 	ldbu	r3,0(r5)
 20053b8:	31bfffc4 	addi	r6,r6,-1
 20053bc:	10c00e1e 	bne	r2,r3,20053f8 <memcmp+0x74>
 20053c0:	21000044 	addi	r4,r4,1
 20053c4:	29400044 	addi	r5,r5,1
 20053c8:	31fff91e 	bne	r6,r7,20053b0 <__alt_mem_onchip_memory2_0+0xfdff53b0>
 20053cc:	0005883a 	mov	r2,zero
 20053d0:	f800283a 	ret
 20053d4:	20c00017 	ldw	r3,0(r4)
 20053d8:	28800017 	ldw	r2,0(r5)
 20053dc:	1880041e 	bne	r3,r2,20053f0 <memcmp+0x6c>
 20053e0:	31bfff04 	addi	r6,r6,-4
 20053e4:	21000104 	addi	r4,r4,4
 20053e8:	29400104 	addi	r5,r5,4
 20053ec:	39bff936 	bltu	r7,r6,20053d4 <__alt_mem_onchip_memory2_0+0xfdff53d4>
 20053f0:	303fe91e 	bne	r6,zero,2005398 <__alt_mem_onchip_memory2_0+0xfdff5398>
 20053f4:	003ff506 	br	20053cc <__alt_mem_onchip_memory2_0+0xfdff53cc>
 20053f8:	10c5c83a 	sub	r2,r2,r3
 20053fc:	f800283a 	ret

02005400 <__register_exitproc>:
 2005400:	00808034 	movhi	r2,512
 2005404:	defffa04 	addi	sp,sp,-24
 2005408:	109c5804 	addi	r2,r2,29024
 200540c:	dc000315 	stw	r16,12(sp)
 2005410:	14000017 	ldw	r16,0(r2)
 2005414:	dc400415 	stw	r17,16(sp)
 2005418:	dfc00515 	stw	ra,20(sp)
 200541c:	80805217 	ldw	r2,328(r16)
 2005420:	2023883a 	mov	r17,r4
 2005424:	10003626 	beq	r2,zero,2005500 <__register_exitproc+0x100>
 2005428:	10c00117 	ldw	r3,4(r2)
 200542c:	010007c4 	movi	r4,31
 2005430:	20c00e16 	blt	r4,r3,200546c <__register_exitproc+0x6c>
 2005434:	1a400044 	addi	r9,r3,1
 2005438:	8800211e 	bne	r17,zero,20054c0 <__register_exitproc+0xc0>
 200543c:	18c00084 	addi	r3,r3,2
 2005440:	18c7883a 	add	r3,r3,r3
 2005444:	18c7883a 	add	r3,r3,r3
 2005448:	12400115 	stw	r9,4(r2)
 200544c:	10c7883a 	add	r3,r2,r3
 2005450:	19400015 	stw	r5,0(r3)
 2005454:	0005883a 	mov	r2,zero
 2005458:	dfc00517 	ldw	ra,20(sp)
 200545c:	dc400417 	ldw	r17,16(sp)
 2005460:	dc000317 	ldw	r16,12(sp)
 2005464:	dec00604 	addi	sp,sp,24
 2005468:	f800283a 	ret
 200546c:	00800034 	movhi	r2,0
 2005470:	10800004 	addi	r2,r2,0
 2005474:	10002526 	beq	r2,zero,200550c <__register_exitproc+0x10c>
 2005478:	01006404 	movi	r4,400
 200547c:	d9400015 	stw	r5,0(sp)
 2005480:	d9800115 	stw	r6,4(sp)
 2005484:	d9c00215 	stw	r7,8(sp)
 2005488:	00000000 	call	0 <__reset-0x2000000>
 200548c:	d9400017 	ldw	r5,0(sp)
 2005490:	d9800117 	ldw	r6,4(sp)
 2005494:	d9c00217 	ldw	r7,8(sp)
 2005498:	10001c26 	beq	r2,zero,200550c <__register_exitproc+0x10c>
 200549c:	80c05217 	ldw	r3,328(r16)
 20054a0:	10000115 	stw	zero,4(r2)
 20054a4:	02400044 	movi	r9,1
 20054a8:	10c00015 	stw	r3,0(r2)
 20054ac:	80805215 	stw	r2,328(r16)
 20054b0:	10006215 	stw	zero,392(r2)
 20054b4:	10006315 	stw	zero,396(r2)
 20054b8:	0007883a 	mov	r3,zero
 20054bc:	883fdf26 	beq	r17,zero,200543c <__alt_mem_onchip_memory2_0+0xfdff543c>
 20054c0:	18d1883a 	add	r8,r3,r3
 20054c4:	4211883a 	add	r8,r8,r8
 20054c8:	1211883a 	add	r8,r2,r8
 20054cc:	41802215 	stw	r6,136(r8)
 20054d0:	01000044 	movi	r4,1
 20054d4:	11806217 	ldw	r6,392(r2)
 20054d8:	20c8983a 	sll	r4,r4,r3
 20054dc:	310cb03a 	or	r6,r6,r4
 20054e0:	11806215 	stw	r6,392(r2)
 20054e4:	41c04215 	stw	r7,264(r8)
 20054e8:	01800084 	movi	r6,2
 20054ec:	89bfd31e 	bne	r17,r6,200543c <__alt_mem_onchip_memory2_0+0xfdff543c>
 20054f0:	11806317 	ldw	r6,396(r2)
 20054f4:	3108b03a 	or	r4,r6,r4
 20054f8:	11006315 	stw	r4,396(r2)
 20054fc:	003fcf06 	br	200543c <__alt_mem_onchip_memory2_0+0xfdff543c>
 2005500:	80805304 	addi	r2,r16,332
 2005504:	80805215 	stw	r2,328(r16)
 2005508:	003fc706 	br	2005428 <__alt_mem_onchip_memory2_0+0xfdff5428>
 200550c:	00bfffc4 	movi	r2,-1
 2005510:	003fd106 	br	2005458 <__alt_mem_onchip_memory2_0+0xfdff5458>

02005514 <__call_exitprocs>:
 2005514:	00808034 	movhi	r2,512
 2005518:	109c5804 	addi	r2,r2,29024
 200551c:	10800017 	ldw	r2,0(r2)
 2005520:	defff404 	addi	sp,sp,-48
 2005524:	dd800815 	stw	r22,32(sp)
 2005528:	d8800015 	stw	r2,0(sp)
 200552c:	10805204 	addi	r2,r2,328
 2005530:	dd000615 	stw	r20,24(sp)
 2005534:	dc800415 	stw	r18,16(sp)
 2005538:	dfc00b15 	stw	ra,44(sp)
 200553c:	df000a15 	stw	fp,40(sp)
 2005540:	ddc00915 	stw	r23,36(sp)
 2005544:	dd400715 	stw	r21,28(sp)
 2005548:	dcc00515 	stw	r19,20(sp)
 200554c:	dc400315 	stw	r17,12(sp)
 2005550:	dc000215 	stw	r16,8(sp)
 2005554:	2025883a 	mov	r18,r4
 2005558:	2829883a 	mov	r20,r5
 200555c:	d8800115 	stw	r2,4(sp)
 2005560:	05bfffc4 	movi	r22,-1
 2005564:	d8800017 	ldw	r2,0(sp)
 2005568:	14c05217 	ldw	r19,328(r2)
 200556c:	98001d26 	beq	r19,zero,20055e4 <__call_exitprocs+0xd0>
 2005570:	dd400117 	ldw	r21,4(sp)
 2005574:	98800117 	ldw	r2,4(r19)
 2005578:	173fffc4 	addi	fp,r2,-1
 200557c:	e0000d16 	blt	fp,zero,20055b4 <__call_exitprocs+0xa0>
 2005580:	14000044 	addi	r16,r2,1
 2005584:	8421883a 	add	r16,r16,r16
 2005588:	8421883a 	add	r16,r16,r16
 200558c:	84402004 	addi	r17,r16,128
 2005590:	9c63883a 	add	r17,r19,r17
 2005594:	9c21883a 	add	r16,r19,r16
 2005598:	a0001e26 	beq	r20,zero,2005614 <__call_exitprocs+0x100>
 200559c:	80804017 	ldw	r2,256(r16)
 20055a0:	15001c26 	beq	r2,r20,2005614 <__call_exitprocs+0x100>
 20055a4:	e73fffc4 	addi	fp,fp,-1
 20055a8:	843fff04 	addi	r16,r16,-4
 20055ac:	8c7fff04 	addi	r17,r17,-4
 20055b0:	e5bff91e 	bne	fp,r22,2005598 <__alt_mem_onchip_memory2_0+0xfdff5598>
 20055b4:	00800034 	movhi	r2,0
 20055b8:	10800004 	addi	r2,r2,0
 20055bc:	10000926 	beq	r2,zero,20055e4 <__call_exitprocs+0xd0>
 20055c0:	98800117 	ldw	r2,4(r19)
 20055c4:	1000311e 	bne	r2,zero,200568c <__call_exitprocs+0x178>
 20055c8:	98800017 	ldw	r2,0(r19)
 20055cc:	10003426 	beq	r2,zero,20056a0 <__call_exitprocs+0x18c>
 20055d0:	9809883a 	mov	r4,r19
 20055d4:	a8800015 	stw	r2,0(r21)
 20055d8:	00000000 	call	0 <__reset-0x2000000>
 20055dc:	acc00017 	ldw	r19,0(r21)
 20055e0:	983fe41e 	bne	r19,zero,2005574 <__alt_mem_onchip_memory2_0+0xfdff5574>
 20055e4:	dfc00b17 	ldw	ra,44(sp)
 20055e8:	df000a17 	ldw	fp,40(sp)
 20055ec:	ddc00917 	ldw	r23,36(sp)
 20055f0:	dd800817 	ldw	r22,32(sp)
 20055f4:	dd400717 	ldw	r21,28(sp)
 20055f8:	dd000617 	ldw	r20,24(sp)
 20055fc:	dcc00517 	ldw	r19,20(sp)
 2005600:	dc800417 	ldw	r18,16(sp)
 2005604:	dc400317 	ldw	r17,12(sp)
 2005608:	dc000217 	ldw	r16,8(sp)
 200560c:	dec00c04 	addi	sp,sp,48
 2005610:	f800283a 	ret
 2005614:	98800117 	ldw	r2,4(r19)
 2005618:	80c00017 	ldw	r3,0(r16)
 200561c:	10bfffc4 	addi	r2,r2,-1
 2005620:	17001526 	beq	r2,fp,2005678 <__call_exitprocs+0x164>
 2005624:	80000015 	stw	zero,0(r16)
 2005628:	183fde26 	beq	r3,zero,20055a4 <__alt_mem_onchip_memory2_0+0xfdff55a4>
 200562c:	00800044 	movi	r2,1
 2005630:	1708983a 	sll	r4,r2,fp
 2005634:	98806217 	ldw	r2,392(r19)
 2005638:	9dc00117 	ldw	r23,4(r19)
 200563c:	2084703a 	and	r2,r4,r2
 2005640:	1000061e 	bne	r2,zero,200565c <__call_exitprocs+0x148>
 2005644:	183ee83a 	callr	r3
 2005648:	98800117 	ldw	r2,4(r19)
 200564c:	15ffc51e 	bne	r2,r23,2005564 <__alt_mem_onchip_memory2_0+0xfdff5564>
 2005650:	a8800017 	ldw	r2,0(r21)
 2005654:	14ffd326 	beq	r2,r19,20055a4 <__alt_mem_onchip_memory2_0+0xfdff55a4>
 2005658:	003fc206 	br	2005564 <__alt_mem_onchip_memory2_0+0xfdff5564>
 200565c:	98806317 	ldw	r2,396(r19)
 2005660:	2084703a 	and	r2,r4,r2
 2005664:	1000061e 	bne	r2,zero,2005680 <__call_exitprocs+0x16c>
 2005668:	89400017 	ldw	r5,0(r17)
 200566c:	9009883a 	mov	r4,r18
 2005670:	183ee83a 	callr	r3
 2005674:	003ff406 	br	2005648 <__alt_mem_onchip_memory2_0+0xfdff5648>
 2005678:	9f000115 	stw	fp,4(r19)
 200567c:	003fea06 	br	2005628 <__alt_mem_onchip_memory2_0+0xfdff5628>
 2005680:	89000017 	ldw	r4,0(r17)
 2005684:	183ee83a 	callr	r3
 2005688:	003fef06 	br	2005648 <__alt_mem_onchip_memory2_0+0xfdff5648>
 200568c:	98800017 	ldw	r2,0(r19)
 2005690:	982b883a 	mov	r21,r19
 2005694:	1027883a 	mov	r19,r2
 2005698:	983fb61e 	bne	r19,zero,2005574 <__alt_mem_onchip_memory2_0+0xfdff5574>
 200569c:	003fd106 	br	20055e4 <__alt_mem_onchip_memory2_0+0xfdff55e4>
 20056a0:	0005883a 	mov	r2,zero
 20056a4:	003ffa06 	br	2005690 <__alt_mem_onchip_memory2_0+0xfdff5690>

020056a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20056a8:	defffd04 	addi	sp,sp,-12
 20056ac:	df000215 	stw	fp,8(sp)
 20056b0:	df000204 	addi	fp,sp,8
 20056b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20056b8:	0001883a 	nop
 20056bc:	e0bfff17 	ldw	r2,-4(fp)
 20056c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20056c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20056c8:	10000226 	beq	r2,zero,20056d4 <_exit+0x2c>
    ALT_SIM_FAIL();
 20056cc:	002af070 	cmpltui	zero,zero,43969
 20056d0:	00000106 	br	20056d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 20056d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20056d8:	003fff06 	br	20056d8 <__alt_mem_onchip_memory2_0+0xfdff56d8>
