
NiosII.elf:     file format elf32-littlenios2
NiosII.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000051e8 memsz 0x000051e8 flags r-x
    LOAD off    0x00006208 vaddr 0x00015208 paddr 0x000155ac align 2**12
         filesz 0x000003a4 memsz 0x000003a4 flags rw-
    LOAD off    0x00006950 vaddr 0x00015950 paddr 0x00015950 align 2**12
         filesz 0x00000000 memsz 0x000003e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004f40  0001022c  0001022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000009c  0001516c  0001516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003a4  00015208  000155ac  00006208  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003e8  00015950  00015950  00006950  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015d38  00015d38  000065ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000065ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008e0  00000000  00000000  000065d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c322  00000000  00000000  00006eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000472c  00000000  00000000  000131d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004b56  00000000  00000000  000178fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018cc  00000000  00000000  0001c454  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000287d  00000000  00000000  0001dd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002283  00000000  00000000  0002059d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00022820  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000350  00000000  00000000  00022830  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002553c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002553f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002554b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002554c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0002554d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00025558  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00025563  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0002556e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00025574  2**0
                  CONTENTS, READONLY
 26 .jdi          00003e87  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005ce29  00000000  00000000  0002942f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
0001022c l    d  .text	00000000 .text
0001516c l    d  .rodata	00000000 .rodata
00015208 l    d  .rwdata	00000000 .rwdata
00015950 l    d  .bss	00000000 .bss
00015d38 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NiosII_Bsp/obj/HAL/src/crt0.o
00010264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Ap.c
00000000 l    df *ABS*	00000000 MSP.c
0001599c l     O .bss	00000043 Cmd
000159df l     O .bss	00000044 Resp
00015950 l     O .bss	00000001 Cmd_State
00015951 l     O .bss	00000001 Index_Data
00015954 l     O .bss	00000004 CurrentTime
00015958 l     O .bss	00000004 PreviousTime
0001595c l     O .bss	00000001 CmdReceived
0001595e l     O .bss	00000008 RcCmd.2870
00000000 l    df *ABS*	00000000 Hw_ISR.c
00000000 l    df *ABS*	00000000 Hw_Timer.c
00015968 l     O .bss	00000004 Hw_Timer_Counter
0001596c l     O .bss	00000002 Tmr_Ctn
0001596e l     O .bss	00000002 Tmr_HandleIndex
00015a24 l     O .bss	000000a0 Timer_Tbl
00015970 l     O .bss	00000001 Excute.2809
00000000 l    df *ABS*	00000000 Hw_Uart.c
00010dc0 l     F .text	000000d8 Hw_Uart_ISR_Handler
00000000 l    df *ABS*	00000000 Hw_Uart_Q.c
00000000 l    df *ABS*	00000000 Hw_Led.c
00000000 l    df *ABS*	00000000 Hw.c
00000000 l    df *ABS*	00000000 Lb_Printf.c
00000000 l    df *ABS*	00000000 Lb_Util.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00011c84 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011f10 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00015208 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012734 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00013058 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000131b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013304 l     F .text	00000038 alt_dev_reg
000152e8 l     O .rwdata	0000002c jtag_uart_0
00015314 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013638 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00013a2c l     F .text	00000098 altera_avalon_uart_irq
00013ac4 l     F .text	000000e0 altera_avalon_uart_rxirq
00013ba4 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00013d3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00013f68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00014164 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000142a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000142d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014538 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00014690 l     F .text	00000050 alt_get_errno
000146e0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015990 g     O .bss	00000004 alt_instruction_exception_handler
0001313c g     F .text	00000078 alt_main
00011e60 g     F .text	00000080 _puts_r
00015c38 g     O .bss	00000100 alt_irq
000105ec g     F .text	00000024 MSP_Get_RespPtr
00011aa0 g     F .text	00000048 Uart1_ISR
000155ac g       *ABS*	00000000 __flash_rwdata_start
00011538 g     F .text	00000138 Hw_Uart_Q_Push
00011e14 g     F .text	0000004c printf
00012568 g     F .text	00000024 vsprintf
00010bbc g     F .text	0000004c Hw_Timer_Start
00010e98 g     F .text	000000a8 Hw_Uart_Init
00011254 g     F .text	0000007c Hw_Uart_PrintEx
0001598c g     O .bss	00000004 altera_avalon_timer_ts_freq
000126d4 g     F .text	00000060 memmove
00010980 g     F .text	00000170 Hw_Timer_Tick
000105c8 g     F .text	00000024 MSP_Get_CmdPtr
00014b50 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00012638 g     F .text	0000009c __sfvwrite_small_str
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000106c0 g     F .text	00000154 MSP_SendResp
00015974 g     O .bss	00000004 errno
000114a4 g     F .text	00000038 HW_UART_Q_VAILD
00015980 g     O .bss	00000004 alt_argv
0001d580 g       *ABS*	00000000 _gp
00015400 g     O .rwdata	00000180 alt_fd_list
00014b70 g     F .text	00000090 alt_find_dev
00014618 g     F .text	00000078 alt_io_redirect
0001516c g       *ABS*	00000000 __DTOR_END__
00011ee0 g     F .text	00000014 puts
0001449c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000118f4 g     F .text	00000040 Hw_Led_Wait
0001085c g     F .text	000000d0 Hw_Timer_Init
000134c0 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00011dd8 g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00011da0 g     F .text	00000008 .hidden __udivsi3
000102f0 g     F .text	0000003c MSP_Init
00015b24 g     O .bss	000000e7 Hw_Uart_Q_Buffer
000114dc g     F .text	0000005c Hw_Uart_Q_PushReady
0001559c g     O .rwdata	00000004 alt_max_fd
00010290 g     F .text	00000060 MSP_ISR
00015580 g     O .rwdata	00000004 _global_impure_ptr
00015d38 g       *ABS*	00000000 __bss_end
00012f68 g     F .text	000000f0 alt_iic_isr_register
00014a4c g     F .text	00000104 alt_tick
0001179c g     F .text	00000034 Hw_Led_Init
00013984 g     F .text	000000a8 altera_avalon_uart_init
000117d0 g     F .text	00000060 Hw_Led_On
00012f1c g     F .text	0000004c alt_ic_irq_enabled
000149b4 g     F .text	00000098 alt_alarm_stop
00010834 g     F .text	00000028 Hw_Timer_ISR
00015978 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d0 alt_irq_handler
000153d8 g     O .rwdata	00000028 alt_dev_null
00011098 g     F .text	00000044 Hw_Uart_Open_COM2
00011124 g     F .text	0000005c Hw_Uart_Getch
00015ac4 g     O .bss	00000060 Hw_Uart_Ch
0001428c g     F .text	0000001c alt_dcache_flush_all
000119a4 g     F .text	0000003c Hw_Wait_Usec
00010358 g     F .text	00000270 MSP_Update
000155ac g       *ABS*	00000000 __ram_rwdata_end
00015594 g     O .rwdata	00000008 alt_dev_list
00013204 g     F .text	00000100 write
0001384c g     F .text	00000028 alt_timestamp_freq
00015208 g       *ABS*	00000000 __ram_rodata_end
00010f5c g     F .text	00000090 Hw_Uart_Open
00011da8 g     F .text	00000008 .hidden __umodsi3
00011670 g     F .text	0000012c Hw_Uart_Q_Pop
00015d38 g       *ABS*	00000000 end
00013fb8 g     F .text	000001ac altera_avalon_uart_write
000101cc g     F .exceptions	00000060 alt_instruction_exception_entry
0001516c g       *ABS*	00000000 __CTOR_LIST__
0001bb80 g       *ABS*	00000000 __alt_stack_pointer
000136ac g     F .text	00000088 alt_avalon_timer_sc_init
000138d4 g     F .text	00000060 altera_avalon_uart_write_fd
00013934 g     F .text	00000050 altera_avalon_uart_close_fd
000135a4 g     F .text	00000094 altera_avalon_jtag_uart_write
00011f7c g     F .text	0000056c ___vfprintf_internal_r
00014f9c g     F .text	0000019c __call_exitprocs
00010cfc g     F .text	00000034 Hw_Timer_Get_Handle
00010d30 g     F .text	00000028 Hw_Timer_Get_CountValue
0001022c g     F .text	0000003c _start
00015994 g     O .bss	00000004 _alt_tick_rate
000112d0 g     F .text	00000064 Hw_Uart_Printf
00015998 g     O .bss	00000004 _alt_nticks
00013370 g     F .text	00000090 alt_sys_init
00014e4c g     F .text	00000150 __register_exitproc
00011db0 g     F .text	00000028 .hidden __mulsi3
00015208 g       *ABS*	00000000 __ram_rwdata_start
0001516c g       *ABS*	00000000 __ram_rodata_start
00013400 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00014d14 g     F .text	000000d4 alt_get_fd
00014e1c g     F .text	00000030 memcmp
00015d38 g       *ABS*	00000000 __alt_stack_base
00011390 g     F .text	00000080 Hw_Uart_Q_Init
00010268 g     F .text	00000028 Ap_Init
00011334 g     F .text	0000005c Hw_Uart_GetchNoWait
00011894 g     F .text	00000060 Hw_Led_Toggle
00011410 g     F .text	00000094 HW_UART_Q_SIZE
00014c00 g     F .text	00000114 alt_find_file
00014324 g     F .text	000000a4 alt_dev_llist_insert
000127a0 g     F .text	0000056c ___svfprintf_internal_r
0001258c g     F .text	000000ac __sfvwrite_small_dev
00015c0c g     O .bss	0000000e Hw_Uart_Q_Size
00010814 g     F .text	00000020 Hw_ISR_Init
00015950 g       *ABS*	00000000 __bss_start
00010948 g     F .text	0000001c Hw_Timer_SetupISR
00011ae8 g     F .text	00000170 main
00015984 g     O .bss	00000004 alt_envp
00013460 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000110dc g     F .text	00000048 Hw_Uart_SetReceiveFuncISR
00010cc0 g     F .text	0000003c Hw_Timer_Delay_ms
00013734 g     F .text	00000088 alt_timestamp_start
000155a0 g     O .rwdata	00000004 alt_errno
00011a14 g     F .text	00000028 micros
00011cf0 g     F .text	00000054 .hidden __divsi3
00010c50 g     F .text	00000070 Hw_Timer_Reset
0001516c g       *ABS*	00000000 __CTOR_END__
0001516c g       *ABS*	00000000 __flash_rodata_start
0001516c g       *ABS*	00000000 __DTOR_LIST__
00011a3c g     F .text	00000034 delay
0001333c g     F .text	00000034 alt_irq_init
00014934 g     F .text	00000080 alt_release_fd
0001032c g     F .text	0000002c MSP_GetReceived
00014de8 g     F .text	00000014 atexit
00012d30 g     F .text	00000058 _write_r
0001250c g     F .text	0000005c _vsprintf_r
00010f40 g     F .text	0000001c Hw_Uart_DeInit
00015584 g     O .rwdata	00000004 _impure_ptr
0001597c g     O .bss	00000004 alt_argc
00015988 g     O .bss	00000004 altera_avalon_timer_ts_base
00014424 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00011a70 g     F .text	00000030 delay_second
0001558c g     O .rwdata	00000008 alt_fs_list
00012d0c g     F .text	00000024 __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010af0 g     F .text	000000cc Hw_Timer_Set
000137bc g     F .text	00000090 alt_timestamp
00012d88 g     F .text	00000050 alt_ic_isr_register
000155ac g       *ABS*	00000000 _edata
00013874 g     F .text	00000060 altera_avalon_uart_read_fd
00015d38 g       *ABS*	00000000 _end
00011934 g     F .text	00000030 Hw_Init
0001022c g       *ABS*	00000000 __ram_exceptions_end
00010d58 g     F .text	00000038 Hw_Timer_TimeStart
00012e78 g     F .text	000000a4 alt_ic_irq_disable
00015c1a g     O .bss	0000000e Hw_Uart_Q_End
00014dfc g     F .text	00000020 exit
00010fec g     F .text	000000ac Hw_Uart_Open_COM1
00010610 g     F .text	000000b0 MSP_Get_CmdRcPtr
00011d44 g     F .text	0000005c .hidden __modsi3
0001bb80 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00013ce8 g     F .text	00000054 altera_avalon_uart_close
00015138 g     F .text	00000034 _exit
00011964 g     F .text	00000040 Hw_Wait
00011c58 g     F .text	0000002c Main_Init
00011ef4 g     F .text	0000001c strlen
00011830 g     F .text	00000064 Hw_Led_Off
000147d4 g     F .text	00000160 open
00010c08 g     F .text	00000048 Hw_Timer_Stop
00014480 g     F .text	0000001c alt_icache_flush_all
00015588 g     O .rwdata	00000004 alt_priority_mask
00012dd8 g     F .text	000000a0 alt_ic_irq_enable
0001092c g     F .text	0000001c Hw_Timer_DeInit
000124e8 g     F .text	00000024 __vfprintf_internal
00013d8c g     F .text	000001dc altera_avalon_uart_read
00010d90 g     F .text	00000030 Hw_Timer_TimeGetElapse
000155a4 g     O .rwdata	00000008 alt_alarm_list
000143c8 g     F .text	0000005c _do_ctors
000119e0 g     F .text	00000034 millis
000141b4 g     F .text	000000d8 close
000130bc g     F .text	00000080 alt_load
00010964 g     F .text	0000001c Hw_Timer_Setup
00000000  w      *UND*	00000000 free
00015c28 g     O .bss	0000000e Hw_Uart_Q_Start
00011180 g     F .text	000000d4 Hw_Uart_Putch



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408b14 	ori	at,at,556
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	10970e04 	addi	r2,r2,23608
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10970e04 	addi	r2,r2,23608
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	21000104 	addi	r4,r4,4
   10168:	1105883a 	add	r2,r2,r4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff2bac>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff2ba0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e0:	00bfffc4 	movi	r2,-1
   101e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101ec:	d0a10417 	ldw	r2,-31728(gp)
   101f0:	10000726 	beq	r2,zero,10210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f4:	d0a10417 	ldw	r2,-31728(gp)
   101f8:	e0fffd17 	ldw	r3,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	e17fff17 	ldw	r5,-4(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	103ee83a 	callr	r2
   1020c:	00000206 	br	10218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10214:	0005883a 	mov	r2,zero
}
   10218:	e037883a 	mov	sp,fp
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	df000017 	ldw	fp,0(sp)
   10224:	dec00204 	addi	sp,sp,8
   10228:	f800283a 	ret

Disassembly of section .text:

0001022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1022c:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10230:	deeee014 	ori	sp,sp,48000
    movhi gp, %hi(_gp)
   10234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10238:	d6b56014 	ori	gp,gp,54656
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   1023c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10240:	10965414 	ori	r2,r2,22864

    movhi r3, %hi(__bss_end)
   10244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10248:	18d74e14 	ori	r3,r3,23864

    beq r2, r3, 1f
   1024c:	10c00326 	beq	r2,r3,1025c <_start+0x30>

0:
    stw zero, (r2)
   10250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10258:	10fffd36 	bltu	r2,r3,10250 <_gp+0xffff2cd0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   1025c:	00130bc0 	call	130bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10260:	001313c0 	call	1313c <alt_main>

00010264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10264:	003fff06 	br	10264 <_gp+0xffff2ce4>

00010268 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
   10268:	defffe04 	addi	sp,sp,-8
   1026c:	dfc00115 	stw	ra,4(sp)
   10270:	df000015 	stw	fp,0(sp)
   10274:	d839883a 	mov	fp,sp
	MSP_Init();
   10278:	00102f00 	call	102f0 <MSP_Init>
}
   1027c:	e037883a 	mov	sp,fp
   10280:	dfc00117 	ldw	ra,4(sp)
   10284:	df000017 	ldw	fp,0(sp)
   10288:	dec00204 	addi	sp,sp,8
   1028c:	f800283a 	ret

00010290 <MSP_ISR>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void MSP_ISR(char Ch)
{
   10290:	defffc04 	addi	sp,sp,-16
   10294:	dfc00315 	stw	ra,12(sp)
   10298:	df000215 	stw	fp,8(sp)
   1029c:	df000204 	addi	fp,sp,8
   102a0:	2005883a 	mov	r2,r4
   102a4:	e0bfff05 	stb	r2,-4(fp)
	BOOL Ret;

	Ret = MSP_Update(Ch);
   102a8:	e0bfff03 	ldbu	r2,-4(fp)
   102ac:	10803fcc 	andi	r2,r2,255
   102b0:	1009883a 	mov	r4,r2
   102b4:	00103580 	call	10358 <MSP_Update>
   102b8:	e0bffe05 	stb	r2,-8(fp)

	if( Ret == TRUE && CmdReceived == FALSE )
   102bc:	e0bffe03 	ldbu	r2,-8(fp)
   102c0:	10800058 	cmpnei	r2,r2,1
   102c4:	1000051e 	bne	r2,zero,102dc <MSP_ISR+0x4c>
   102c8:	d0a0f703 	ldbu	r2,-31780(gp)
   102cc:	10803fcc 	andi	r2,r2,255
   102d0:	1000021e 	bne	r2,zero,102dc <MSP_ISR+0x4c>
	{
		CmdReceived = TRUE;
   102d4:	00800044 	movi	r2,1
   102d8:	d0a0f705 	stb	r2,-31780(gp)
	}
}
   102dc:	e037883a 	mov	sp,fp
   102e0:	dfc00117 	ldw	ra,4(sp)
   102e4:	df000017 	ldw	fp,0(sp)
   102e8:	dec00204 	addi	sp,sp,8
   102ec:	f800283a 	ret

000102f0 <MSP_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void MSP_Init( void )
{
   102f0:	defffe04 	addi	sp,sp,-8
   102f4:	dfc00115 	stw	ra,4(sp)
   102f8:	df000015 	stw	fp,0(sp)
   102fc:	d839883a 	mov	fp,sp
	CmdReceived = FALSE;
   10300:	d020f705 	stb	zero,-31780(gp)
	Cmd_State   = MSP_CMD_STATE_WAIT_START;
   10304:	d020f405 	stb	zero,-31792(gp)

	Hw_Uart_SetReceiveFuncISR( HW_UART_CH_MSP, MSP_ISR );
   10308:	0009883a 	mov	r4,zero
   1030c:	01400074 	movhi	r5,1
   10310:	2940a404 	addi	r5,r5,656
   10314:	00110dc0 	call	110dc <Hw_Uart_SetReceiveFuncISR>
}
   10318:	e037883a 	mov	sp,fp
   1031c:	dfc00117 	ldw	ra,4(sp)
   10320:	df000017 	ldw	fp,0(sp)
   10324:	dec00204 	addi	sp,sp,8
   10328:	f800283a 	ret

0001032c <MSP_GetReceived>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
BOOL MSP_GetReceived( void )
{
   1032c:	defffe04 	addi	sp,sp,-8
   10330:	df000115 	stw	fp,4(sp)
   10334:	df000104 	addi	fp,sp,4
	BOOL Ret;

	Ret = CmdReceived;
   10338:	d0a0f703 	ldbu	r2,-31780(gp)
   1033c:	e0bfff05 	stb	r2,-4(fp)
	CmdReceived = FALSE;
   10340:	d020f705 	stb	zero,-31780(gp)

	return Ret;
   10344:	e0bfff03 	ldbu	r2,-4(fp)
}
   10348:	e037883a 	mov	sp,fp
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00104 	addi	sp,sp,4
   10354:	f800283a 	ret

00010358 <MSP_Update>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
BOOL MSP_Update( uint8_t ch )
{
   10358:	defffc04 	addi	sp,sp,-16
   1035c:	dfc00315 	stw	ra,12(sp)
   10360:	df000215 	stw	fp,8(sp)
   10364:	df000204 	addi	fp,sp,8
   10368:	2005883a 	mov	r2,r4
   1036c:	e0bfff05 	stb	r2,-4(fp)
	BOOL Ret = FALSE;
   10370:	e03ffe05 	stb	zero,-8(fp)



	//-- 바이트간 타임아웃 설정(200ms)
	//
	CurrentTime = micros();
   10374:	0011a140 	call	11a14 <micros>
   10378:	d0a0f515 	stw	r2,-31788(gp)

	if( (CurrentTime - PreviousTime) > 200000 )
   1037c:	d0e0f517 	ldw	r3,-31788(gp)
   10380:	d0a0f617 	ldw	r2,-31784(gp)
   10384:	1887c83a 	sub	r3,r3,r2
   10388:	008000f4 	movhi	r2,3
   1038c:	10835004 	addi	r2,r2,3392
   10390:	10c0032e 	bgeu	r2,r3,103a0 <MSP_Update+0x48>
	{
		Cmd_State    = MSP_CMD_STATE_WAIT_START;
   10394:	d020f405 	stb	zero,-31792(gp)
		PreviousTime = CurrentTime;
   10398:	d0a0f517 	ldw	r2,-31788(gp)
   1039c:	d0a0f615 	stw	r2,-31784(gp)



	//-- 명령어 상태
	//
	switch( Cmd_State )
   103a0:	d0a0f403 	ldbu	r2,-31792(gp)
   103a4:	10803fcc 	andi	r2,r2,255
   103a8:	10c001e8 	cmpgeui	r3,r2,7
   103ac:	1800801e 	bne	r3,zero,105b0 <MSP_Update+0x258>
   103b0:	100690ba 	slli	r3,r2,2
   103b4:	00800074 	movhi	r2,1
   103b8:	1080f204 	addi	r2,r2,968
   103bc:	1885883a 	add	r2,r3,r2
   103c0:	10800017 	ldw	r2,0(r2)
   103c4:	1000683a 	jmp	r2
   103c8:	000103e4 	muli	zero,zero,1039
   103cc:	00010400 	call	1040 <__reset-0xefc0>
   103d0:	00010420 	cmpeqi	zero,zero,1040
   103d4:	00010458 	cmpnei	zero,zero,1041
   103d8:	000104b0 	cmpltui	zero,zero,1042
   103dc:	00010510 	cmplti	zero,zero,1044
   103e0:	00010588 	cmpgei	zero,zero,1046
		//-- 시작 문자 기다리는 상태
		//
		case MSP_CMD_STATE_WAIT_START:

			// 시작 문자를 기다림
			if( ch == MSP_CMD_START )
   103e4:	e0bfff03 	ldbu	r2,-4(fp)
   103e8:	10800918 	cmpnei	r2,r2,36
   103ec:	1000031e 	bne	r2,zero,103fc <MSP_Update+0xa4>
			{
				Cmd_State    = MSP_CMD_STATE_WAIT_HEADER_M;
   103f0:	00800044 	movi	r2,1
   103f4:	d0a0f405 	stb	r2,-31792(gp)
			}
			break;
   103f8:	00006d06 	br	105b0 <MSP_Update+0x258>
   103fc:	00006c06 	br	105b0 <MSP_Update+0x258>


		//-- 'M' 기다리는 상태
		//
		case MSP_CMD_STATE_WAIT_HEADER_M:
			if( ch == MSP_CMD_HEADER_M )
   10400:	e0bfff03 	ldbu	r2,-4(fp)
   10404:	10801358 	cmpnei	r2,r2,77
   10408:	1000031e 	bne	r2,zero,10418 <MSP_Update+0xc0>
			{
				Cmd_State = MSP_CMD_STATE_WAIT_HEADER_ARROW;
   1040c:	00800084 	movi	r2,2
   10410:	d0a0f405 	stb	r2,-31792(gp)
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_START;
			}
			break;
   10414:	00006606 	br	105b0 <MSP_Update+0x258>
			{
				Cmd_State = MSP_CMD_STATE_WAIT_HEADER_ARROW;
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_START;
   10418:	d020f405 	stb	zero,-31792(gp)
			}
			break;
   1041c:	00006406 	br	105b0 <MSP_Update+0x258>


		//-- '<' 기다리는 상태
		//
		case MSP_CMD_STATE_WAIT_HEADER_ARROW:
			if( ch == MSP_CMD_HEADER_ARROW )
   10420:	e0bfff03 	ldbu	r2,-4(fp)
   10424:	10800f18 	cmpnei	r2,r2,60
   10428:	1000091e 	bne	r2,zero,10450 <MSP_Update+0xf8>
			{
				Cmd.CheckSum = 0x00;
   1042c:	00800074 	movhi	r2,1
   10430:	10966704 	addi	r2,r2,22940
   10434:	10000085 	stb	zero,2(r2)
				Cmd.Length   = 0;
   10438:	00800074 	movhi	r2,1
   1043c:	10966704 	addi	r2,r2,22940
   10440:	10000045 	stb	zero,1(r2)
				Cmd_State = MSP_CMD_STATE_WAIT_DATA_SIZE;
   10444:	008000c4 	movi	r2,3
   10448:	d0a0f405 	stb	r2,-31792(gp)
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_START;
			}
			break;
   1044c:	00005806 	br	105b0 <MSP_Update+0x258>
				Cmd.Length   = 0;
				Cmd_State = MSP_CMD_STATE_WAIT_DATA_SIZE;
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_START;
   10450:	d020f405 	stb	zero,-31792(gp)
			}
			break;
   10454:	00005606 	br	105b0 <MSP_Update+0x258>

		//-- 데이터 사이즈 기다리는 상태(64까지)
		//
		case MSP_CMD_STATE_WAIT_DATA_SIZE:

			if( ch <= MSP_CMD_MAX_LENGTH )
   10458:	e0bfff03 	ldbu	r2,-4(fp)
   1045c:	10801068 	cmpgeui	r2,r2,65
   10460:	1000111e 	bne	r2,zero,104a8 <MSP_Update+0x150>
			{
				Cmd.Length    = ch;
   10464:	00800074 	movhi	r2,1
   10468:	10966704 	addi	r2,r2,22940
   1046c:	e0ffff03 	ldbu	r3,-4(fp)
   10470:	10c00045 	stb	r3,1(r2)
				Index_Data    = 0;
   10474:	d020f445 	stb	zero,-31791(gp)
				Cmd.CheckSum ^= ch;
   10478:	00800074 	movhi	r2,1
   1047c:	10966704 	addi	r2,r2,22940
   10480:	10c00083 	ldbu	r3,2(r2)
   10484:	e0bfff03 	ldbu	r2,-4(fp)
   10488:	1884f03a 	xor	r2,r3,r2
   1048c:	1007883a 	mov	r3,r2
   10490:	00800074 	movhi	r2,1
   10494:	10966704 	addi	r2,r2,22940
   10498:	10c00085 	stb	r3,2(r2)
				Cmd_State     = MSP_CMD_STATE_WAIT_CMD;
   1049c:	00800104 	movi	r2,4
   104a0:	d0a0f405 	stb	r2,-31792(gp)
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_START;
			}
			break;
   104a4:	00004206 	br	105b0 <MSP_Update+0x258>
				Cmd.CheckSum ^= ch;
				Cmd_State     = MSP_CMD_STATE_WAIT_CMD;
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_START;
   104a8:	d020f405 	stb	zero,-31792(gp)
			}
			break;
   104ac:	00004006 	br	105b0 <MSP_Update+0x258>

		//-- 명령어를 기다리는 상태
		//
		case MSP_CMD_STATE_WAIT_CMD:

			Cmd.Cmd       = ch;
   104b0:	00800074 	movhi	r2,1
   104b4:	10966704 	addi	r2,r2,22940
   104b8:	e0ffff03 	ldbu	r3,-4(fp)
   104bc:	10c00005 	stb	r3,0(r2)
			Cmd.CheckSum ^= ch;
   104c0:	00800074 	movhi	r2,1
   104c4:	10966704 	addi	r2,r2,22940
   104c8:	10c00083 	ldbu	r3,2(r2)
   104cc:	e0bfff03 	ldbu	r2,-4(fp)
   104d0:	1884f03a 	xor	r2,r3,r2
   104d4:	1007883a 	mov	r3,r2
   104d8:	00800074 	movhi	r2,1
   104dc:	10966704 	addi	r2,r2,22940
   104e0:	10c00085 	stb	r3,2(r2)

			if( Cmd.Length == 0 )
   104e4:	00800074 	movhi	r2,1
   104e8:	10966704 	addi	r2,r2,22940
   104ec:	10800043 	ldbu	r2,1(r2)
   104f0:	10803fcc 	andi	r2,r2,255
   104f4:	1000031e 	bne	r2,zero,10504 <MSP_Update+0x1ac>
			{
				Cmd_State = MSP_CMD_STATE_WAIT_CHECKSUM;
   104f8:	00800184 	movi	r2,6
   104fc:	d0a0f405 	stb	r2,-31792(gp)
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_DATA;
			}
			break;
   10500:	00002b06 	br	105b0 <MSP_Update+0x258>
			{
				Cmd_State = MSP_CMD_STATE_WAIT_CHECKSUM;
			}
			else
			{
				Cmd_State = MSP_CMD_STATE_WAIT_DATA;
   10504:	00800144 	movi	r2,5
   10508:	d0a0f405 	stb	r2,-31792(gp)
			}
			break;
   1050c:	00002806 	br	105b0 <MSP_Update+0x258>

		//-- 데이터를 기다리는 상태
		//
		case MSP_CMD_STATE_WAIT_DATA:

			Cmd.CheckSum          ^= ch;
   10510:	00800074 	movhi	r2,1
   10514:	10966704 	addi	r2,r2,22940
   10518:	10c00083 	ldbu	r3,2(r2)
   1051c:	e0bfff03 	ldbu	r2,-4(fp)
   10520:	1884f03a 	xor	r2,r3,r2
   10524:	1007883a 	mov	r3,r2
   10528:	00800074 	movhi	r2,1
   1052c:	10966704 	addi	r2,r2,22940
   10530:	10c00085 	stb	r3,2(r2)
			Cmd.Data[ Index_Data ] = ch;
   10534:	d0a0f443 	ldbu	r2,-31791(gp)
   10538:	10c03fcc 	andi	r3,r2,255
   1053c:	00800074 	movhi	r2,1
   10540:	10966704 	addi	r2,r2,22940
   10544:	10c5883a 	add	r2,r2,r3
   10548:	e0ffff03 	ldbu	r3,-4(fp)
   1054c:	10c000c5 	stb	r3,3(r2)

			Index_Data++;
   10550:	d0a0f443 	ldbu	r2,-31791(gp)
   10554:	10800044 	addi	r2,r2,1
   10558:	d0a0f445 	stb	r2,-31791(gp)

			if( Index_Data >= Cmd.Length )
   1055c:	00800074 	movhi	r2,1
   10560:	10966704 	addi	r2,r2,22940
   10564:	10800043 	ldbu	r2,1(r2)
   10568:	d0e0f443 	ldbu	r3,-31791(gp)
   1056c:	10803fcc 	andi	r2,r2,255
   10570:	18c03fcc 	andi	r3,r3,255
   10574:	18800336 	bltu	r3,r2,10584 <MSP_Update+0x22c>
			{
				Cmd_State = MSP_CMD_STATE_WAIT_CHECKSUM;
   10578:	00800184 	movi	r2,6
   1057c:	d0a0f405 	stb	r2,-31792(gp)
			}
			break;
   10580:	00000b06 	br	105b0 <MSP_Update+0x258>
   10584:	00000a06 	br	105b0 <MSP_Update+0x258>

		//-- 체크섬을 기다리는 상태
		//
		case MSP_CMD_STATE_WAIT_CHECKSUM:

			if( Cmd.CheckSum == ch )
   10588:	00800074 	movhi	r2,1
   1058c:	10966704 	addi	r2,r2,22940
   10590:	10800083 	ldbu	r2,2(r2)
   10594:	10c03fcc 	andi	r3,r2,255
   10598:	e0bfff03 	ldbu	r2,-4(fp)
   1059c:	1880021e 	bne	r3,r2,105a8 <MSP_Update+0x250>
			{
				Ret = TRUE;
   105a0:	00800044 	movi	r2,1
   105a4:	e0bffe05 	stb	r2,-8(fp)
			}

			Cmd_State = MSP_CMD_STATE_WAIT_START;
   105a8:	d020f405 	stb	zero,-31792(gp)
			break;
   105ac:	0001883a 	nop
	}

	return Ret;
   105b0:	e0bffe03 	ldbu	r2,-8(fp)
}
   105b4:	e037883a 	mov	sp,fp
   105b8:	dfc00117 	ldw	ra,4(sp)
   105bc:	df000017 	ldw	fp,0(sp)
   105c0:	dec00204 	addi	sp,sp,8
   105c4:	f800283a 	ret

000105c8 <MSP_Get_CmdPtr>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
MSP_CMD_OBJ *MSP_Get_CmdPtr( void )
{
   105c8:	deffff04 	addi	sp,sp,-4
   105cc:	df000015 	stw	fp,0(sp)
   105d0:	d839883a 	mov	fp,sp
	return &Cmd;
   105d4:	00800074 	movhi	r2,1
   105d8:	10966704 	addi	r2,r2,22940
}
   105dc:	e037883a 	mov	sp,fp
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00104 	addi	sp,sp,4
   105e8:	f800283a 	ret

000105ec <MSP_Get_RespPtr>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
MSP_RESP_OBJ *MSP_Get_RespPtr( void )
{
   105ec:	deffff04 	addi	sp,sp,-4
   105f0:	df000015 	stw	fp,0(sp)
   105f4:	d839883a 	mov	fp,sp
	return &Resp;
   105f8:	00800074 	movhi	r2,1
   105fc:	109677c4 	addi	r2,r2,23007
}
   10600:	e037883a 	mov	sp,fp
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00104 	addi	sp,sp,4
   1060c:	f800283a 	ret

00010610 <MSP_Get_CmdRcPtr>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
MSP_CMD_RC_OBJ *MSP_Get_CmdRcPtr( void )
{
   10610:	defffe04 	addi	sp,sp,-8
   10614:	df000115 	stw	fp,4(sp)
   10618:	df000104 	addi	fp,sp,4
	static MSP_CMD_RC_OBJ RcCmd;
	MSP_CMD_OBJ *pCmd = &Cmd;
   1061c:	00800074 	movhi	r2,1
   10620:	10966704 	addi	r2,r2,22940
   10624:	e0bfff15 	stw	r2,-4(fp)


	RcCmd.Roll     = pCmd->Data[0] * 4 - 500;
   10628:	e0bfff17 	ldw	r2,-4(fp)
   1062c:	108000c3 	ldbu	r2,3(r2)
   10630:	10803fcc 	andi	r2,r2,255
   10634:	10bfe0c4 	addi	r2,r2,-125
   10638:	1085883a 	add	r2,r2,r2
   1063c:	1085883a 	add	r2,r2,r2
   10640:	d0a0f78d 	sth	r2,-31778(gp)
	RcCmd.Pitch    = pCmd->Data[1] * 4 - 500;
   10644:	e0bfff17 	ldw	r2,-4(fp)
   10648:	10800103 	ldbu	r2,4(r2)
   1064c:	10803fcc 	andi	r2,r2,255
   10650:	10bfe0c4 	addi	r2,r2,-125
   10654:	1085883a 	add	r2,r2,r2
   10658:	1085883a 	add	r2,r2,r2
   1065c:	1007883a 	mov	r3,r2
   10660:	d0a0f804 	addi	r2,gp,-31776
   10664:	10c0000d 	sth	r3,0(r2)
	RcCmd.Yaw      = pCmd->Data[2] * 4 - 500;
   10668:	e0bfff17 	ldw	r2,-4(fp)
   1066c:	10800143 	ldbu	r2,5(r2)
   10670:	10803fcc 	andi	r2,r2,255
   10674:	10bfe0c4 	addi	r2,r2,-125
   10678:	1085883a 	add	r2,r2,r2
   1067c:	1085883a 	add	r2,r2,r2
   10680:	1007883a 	mov	r3,r2
   10684:	d0a0f884 	addi	r2,gp,-31774
   10688:	10c0000d 	sth	r3,0(r2)
	RcCmd.Throthle = pCmd->Data[3] * 4;
   1068c:	e0bfff17 	ldw	r2,-4(fp)
   10690:	10800183 	ldbu	r2,6(r2)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	1085883a 	add	r2,r2,r2
   1069c:	1085883a 	add	r2,r2,r2
   106a0:	1007883a 	mov	r3,r2
   106a4:	d0a0f904 	addi	r2,gp,-31772
   106a8:	10c0000d 	sth	r3,0(r2)


	return &RcCmd;
   106ac:	d0a0f784 	addi	r2,gp,-31778
}
   106b0:	e037883a 	mov	sp,fp
   106b4:	df000017 	ldw	fp,0(sp)
   106b8:	dec00104 	addi	sp,sp,4
   106bc:	f800283a 	ret

000106c0 <MSP_SendResp>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void MSP_SendResp( MSP_RESP_OBJ *pResp )
{
   106c0:	defffc04 	addi	sp,sp,-16
   106c4:	dfc00315 	stw	ra,12(sp)
   106c8:	df000215 	stw	fp,8(sp)
   106cc:	df000204 	addi	fp,sp,8
   106d0:	e13fff15 	stw	r4,-4(fp)
	uint8_t i;
	uint8_t CheckSum = 0;
   106d4:	e03ffe45 	stb	zero,-7(fp)


	Hw_Uart_Putch(HW_UART_CH_MSP, MSP_CMD_START );
   106d8:	0009883a 	mov	r4,zero
   106dc:	01400904 	movi	r5,36
   106e0:	00111800 	call	11180 <Hw_Uart_Putch>
	Hw_Uart_Putch(HW_UART_CH_MSP, MSP_CMD_HEADER_M );
   106e4:	0009883a 	mov	r4,zero
   106e8:	01401344 	movi	r5,77
   106ec:	00111800 	call	11180 <Hw_Uart_Putch>

	if( pResp->ErrorCode > 0 )	Hw_Uart_Putch(HW_UART_CH_MSP, '!');
   106f0:	e0bfff17 	ldw	r2,-4(fp)
   106f4:	10800083 	ldbu	r2,2(r2)
   106f8:	10803fcc 	andi	r2,r2,255
   106fc:	10000426 	beq	r2,zero,10710 <MSP_SendResp+0x50>
   10700:	0009883a 	mov	r4,zero
   10704:	01400844 	movi	r5,33
   10708:	00111800 	call	11180 <Hw_Uart_Putch>
   1070c:	00000306 	br	1071c <MSP_SendResp+0x5c>
	else						Hw_Uart_Putch(HW_UART_CH_MSP, '>');
   10710:	0009883a 	mov	r4,zero
   10714:	01400f84 	movi	r5,62
   10718:	00111800 	call	11180 <Hw_Uart_Putch>

	Hw_Uart_Putch(HW_UART_CH_MSP, pResp->Length );
   1071c:	e0bfff17 	ldw	r2,-4(fp)
   10720:	10800043 	ldbu	r2,1(r2)
   10724:	10803fcc 	andi	r2,r2,255
   10728:	1080201c 	xori	r2,r2,128
   1072c:	10bfe004 	addi	r2,r2,-128
   10730:	0009883a 	mov	r4,zero
   10734:	100b883a 	mov	r5,r2
   10738:	00111800 	call	11180 <Hw_Uart_Putch>
	Hw_Uart_Putch(HW_UART_CH_MSP, pResp->Cmd );
   1073c:	e0bfff17 	ldw	r2,-4(fp)
   10740:	10800003 	ldbu	r2,0(r2)
   10744:	10803fcc 	andi	r2,r2,255
   10748:	1080201c 	xori	r2,r2,128
   1074c:	10bfe004 	addi	r2,r2,-128
   10750:	0009883a 	mov	r4,zero
   10754:	100b883a 	mov	r5,r2
   10758:	00111800 	call	11180 <Hw_Uart_Putch>
	CheckSum ^= pResp->Cmd;
   1075c:	e0bfff17 	ldw	r2,-4(fp)
   10760:	10c00003 	ldbu	r3,0(r2)
   10764:	e0bffe43 	ldbu	r2,-7(fp)
   10768:	1884f03a 	xor	r2,r3,r2
   1076c:	e0bffe45 	stb	r2,-7(fp)

	for( i=0; i<pResp->Length; i++ )
   10770:	e03ffe05 	stb	zero,-8(fp)
   10774:	00001606 	br	107d0 <MSP_SendResp+0x110>
	{
		Hw_Uart_Putch( HW_UART_CH_MSP, pResp->Data[i] );
   10778:	e0bffe03 	ldbu	r2,-8(fp)
   1077c:	e0ffff17 	ldw	r3,-4(fp)
   10780:	1885883a 	add	r2,r3,r2
   10784:	10800104 	addi	r2,r2,4
   10788:	10800003 	ldbu	r2,0(r2)
   1078c:	10803fcc 	andi	r2,r2,255
   10790:	1080201c 	xori	r2,r2,128
   10794:	10bfe004 	addi	r2,r2,-128
   10798:	0009883a 	mov	r4,zero
   1079c:	100b883a 	mov	r5,r2
   107a0:	00111800 	call	11180 <Hw_Uart_Putch>
		CheckSum ^= pResp->Data[i];
   107a4:	e0bffe03 	ldbu	r2,-8(fp)
   107a8:	e0ffff17 	ldw	r3,-4(fp)
   107ac:	1885883a 	add	r2,r3,r2
   107b0:	10800104 	addi	r2,r2,4
   107b4:	10c00003 	ldbu	r3,0(r2)
   107b8:	e0bffe43 	ldbu	r2,-7(fp)
   107bc:	1884f03a 	xor	r2,r3,r2
   107c0:	e0bffe45 	stb	r2,-7(fp)

	Hw_Uart_Putch(HW_UART_CH_MSP, pResp->Length );
	Hw_Uart_Putch(HW_UART_CH_MSP, pResp->Cmd );
	CheckSum ^= pResp->Cmd;

	for( i=0; i<pResp->Length; i++ )
   107c4:	e0bffe03 	ldbu	r2,-8(fp)
   107c8:	10800044 	addi	r2,r2,1
   107cc:	e0bffe05 	stb	r2,-8(fp)
   107d0:	e0bfff17 	ldw	r2,-4(fp)
   107d4:	10800043 	ldbu	r2,1(r2)
   107d8:	10803fcc 	andi	r2,r2,255
   107dc:	e0fffe03 	ldbu	r3,-8(fp)
   107e0:	18bfe536 	bltu	r3,r2,10778 <_gp+0xffff31f8>
	{
		Hw_Uart_Putch( HW_UART_CH_MSP, pResp->Data[i] );
		CheckSum ^= pResp->Data[i];
	}

	Hw_Uart_Putch(HW_UART_CH_MSP, CheckSum );
   107e4:	e0bffe43 	ldbu	r2,-7(fp)
   107e8:	10803fcc 	andi	r2,r2,255
   107ec:	1080201c 	xori	r2,r2,128
   107f0:	10bfe004 	addi	r2,r2,-128
   107f4:	0009883a 	mov	r4,zero
   107f8:	100b883a 	mov	r5,r2
   107fc:	00111800 	call	11180 <Hw_Uart_Putch>
}
   10800:	e037883a 	mov	sp,fp
   10804:	dfc00117 	ldw	ra,4(sp)
   10808:	df000017 	ldw	fp,0(sp)
   1080c:	dec00204 	addi	sp,sp,8
   10810:	f800283a 	ret

00010814 <Hw_ISR_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
s32 Hw_ISR_Init( void )
{
   10814:	deffff04 	addi	sp,sp,-4
   10818:	df000015 	stw	fp,0(sp)
   1081c:	d839883a 	mov	fp,sp


	return 1;
   10820:	00800044 	movi	r2,1
}
   10824:	e037883a 	mov	sp,fp
   10828:	df000017 	ldw	fp,0(sp)
   1082c:	dec00104 	addi	sp,sp,4
   10830:	f800283a 	ret

00010834 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
   10834:	defffe04 	addi	sp,sp,-8
   10838:	dfc00115 	stw	ra,4(sp)
   1083c:	df000015 	stw	fp,0(sp)
   10840:	d839883a 	mov	fp,sp

	Hw_Timer_Tick();  
   10844:	00109800 	call	10980 <Hw_Timer_Tick>

}
   10848:	e037883a 	mov	sp,fp
   1084c:	dfc00117 	ldw	ra,4(sp)
   10850:	df000017 	ldw	fp,0(sp)
   10854:	dec00204 	addi	sp,sp,8
   10858:	f800283a 	ret

0001085c <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
   1085c:	defffd04 	addi	sp,sp,-12
   10860:	dfc00215 	stw	ra,8(sp)
   10864:	df000115 	stw	fp,4(sp)
   10868:	df000104 	addi	fp,sp,4
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
   1086c:	d0a0fc03 	ldbu	r2,-31760(gp)
   10870:	10803fcc 	andi	r2,r2,255
   10874:	10800058 	cmpnei	r2,r2,1
   10878:	1000011e 	bne	r2,zero,10880 <Hw_Timer_Init+0x24>
   1087c:	00002606 	br	10918 <Hw_Timer_Init+0xbc>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
   10880:	e03fff05 	stb	zero,-4(fp)
   10884:	00001d06 	br	108fc <Hw_Timer_Init+0xa0>
	{
		Timer_Tbl[i].Timer_En   = OFF;
   10888:	e0ffff03 	ldbu	r3,-4(fp)
   1088c:	00800074 	movhi	r2,1
   10890:	10968904 	addi	r2,r2,23076
   10894:	1806913a 	slli	r3,r3,4
   10898:	10c5883a 	add	r2,r2,r3
   1089c:	10000005 	stb	zero,0(r2)
		Timer_Tbl[i].Timer_Ctn  = 0;
   108a0:	e0ffff03 	ldbu	r3,-4(fp)
   108a4:	00800074 	movhi	r2,1
   108a8:	10968904 	addi	r2,r2,23076
   108ac:	1806913a 	slli	r3,r3,4
   108b0:	10c5883a 	add	r2,r2,r3
   108b4:	1000008d 	sth	zero,2(r2)
		Timer_Tbl[i].Timer_Init = 0;
   108b8:	e0ffff03 	ldbu	r3,-4(fp)
   108bc:	00800074 	movhi	r2,1
   108c0:	10968904 	addi	r2,r2,23076
   108c4:	1806913a 	slli	r3,r3,4
   108c8:	18c00104 	addi	r3,r3,4
   108cc:	10c5883a 	add	r2,r2,r3
   108d0:	1000000d 	sth	zero,0(r2)
		Timer_Tbl[i].TmrFnct    = NULL;
   108d4:	e0ffff03 	ldbu	r3,-4(fp)
   108d8:	00800074 	movhi	r2,1
   108dc:	10968904 	addi	r2,r2,23076
   108e0:	1806913a 	slli	r3,r3,4
   108e4:	18c00204 	addi	r3,r3,8
   108e8:	10c5883a 	add	r2,r2,r3
   108ec:	10000015 	stw	zero,0(r2)
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
   108f0:	e0bfff03 	ldbu	r2,-4(fp)
   108f4:	10800044 	addi	r2,r2,1
   108f8:	e0bfff05 	stb	r2,-4(fp)
   108fc:	e0bfff03 	ldbu	r2,-4(fp)
   10900:	108002b0 	cmpltui	r2,r2,10
   10904:	103fe01e 	bne	r2,zero,10888 <_gp+0xffff3308>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
   10908:	00109480 	call	10948 <Hw_Timer_SetupISR>
	Hw_Timer_Setup();	
   1090c:	00109640 	call	10964 <Hw_Timer_Setup>

	Excute = 1;
   10910:	00800044 	movi	r2,1
   10914:	d0a0fc05 	stb	r2,-31760(gp)

}
   10918:	e037883a 	mov	sp,fp
   1091c:	dfc00117 	ldw	ra,4(sp)
   10920:	df000017 	ldw	fp,0(sp)
   10924:	dec00204 	addi	sp,sp,8
   10928:	f800283a 	ret

0001092c <Hw_Timer_DeInit>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_DeInit( void )
{
   1092c:	deffff04 	addi	sp,sp,-4
   10930:	df000015 	stw	fp,0(sp)
   10934:	d839883a 	mov	fp,sp

}
   10938:	e037883a 	mov	sp,fp
   1093c:	df000017 	ldw	fp,0(sp)
   10940:	dec00104 	addi	sp,sp,4
   10944:	f800283a 	ret

00010948 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
   10948:	deffff04 	addi	sp,sp,-4
   1094c:	df000015 	stw	fp,0(sp)
   10950:	d839883a 	mov	fp,sp

}
   10954:	e037883a 	mov	sp,fp
   10958:	df000017 	ldw	fp,0(sp)
   1095c:	dec00104 	addi	sp,sp,4
   10960:	f800283a 	ret

00010964 <Hw_Timer_Setup>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{
   10964:	deffff04 	addi	sp,sp,-4
   10968:	df000015 	stw	fp,0(sp)
   1096c:	d839883a 	mov	fp,sp
	
}
   10970:	e037883a 	mov	sp,fp
   10974:	df000017 	ldw	fp,0(sp)
   10978:	dec00104 	addi	sp,sp,4
   1097c:	f800283a 	ret

00010980 <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
   10980:	defffd04 	addi	sp,sp,-12
   10984:	dfc00215 	stw	ra,8(sp)
   10988:	df000115 	stw	fp,4(sp)
   1098c:	df000104 	addi	fp,sp,4
	u8 i;

	
	Hw_Timer_Counter++;
   10990:	d0a0fa17 	ldw	r2,-31768(gp)
   10994:	10800044 	addi	r2,r2,1
   10998:	d0a0fa15 	stw	r2,-31768(gp)


	if( Tmr_Ctn ) Tmr_Ctn--;
   1099c:	d0a0fb0b 	ldhu	r2,-31764(gp)
   109a0:	10bfffcc 	andi	r2,r2,65535
   109a4:	10000326 	beq	r2,zero,109b4 <Hw_Timer_Tick+0x34>
   109a8:	d0a0fb0b 	ldhu	r2,-31764(gp)
   109ac:	10bfffc4 	addi	r2,r2,-1
   109b0:	d0a0fb0d 	sth	r2,-31764(gp)
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
   109b4:	e03fff05 	stb	zero,-4(fp)
   109b8:	00004506 	br	10ad0 <Hw_Timer_Tick+0x150>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
   109bc:	e0ffff03 	ldbu	r3,-4(fp)
   109c0:	00800074 	movhi	r2,1
   109c4:	10968904 	addi	r2,r2,23076
   109c8:	1806913a 	slli	r3,r3,4
   109cc:	10c5883a 	add	r2,r2,r3
   109d0:	10800003 	ldbu	r2,0(r2)
   109d4:	10803fcc 	andi	r2,r2,255
   109d8:	10800058 	cmpnei	r2,r2,1
   109dc:	1000391e 	bne	r2,zero,10ac4 <Hw_Timer_Tick+0x144>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
   109e0:	e0ffff03 	ldbu	r3,-4(fp)
   109e4:	00800074 	movhi	r2,1
   109e8:	10968904 	addi	r2,r2,23076
   109ec:	1808913a 	slli	r4,r3,4
   109f0:	1105883a 	add	r2,r2,r4
   109f4:	1080008b 	ldhu	r2,2(r2)
   109f8:	10bfffc4 	addi	r2,r2,-1
   109fc:	1009883a 	mov	r4,r2
   10a00:	00800074 	movhi	r2,1
   10a04:	10968904 	addi	r2,r2,23076
   10a08:	1806913a 	slli	r3,r3,4
   10a0c:	10c5883a 	add	r2,r2,r3
   10a10:	1100008d 	sth	r4,2(r2)

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
   10a14:	e0ffff03 	ldbu	r3,-4(fp)
   10a18:	00800074 	movhi	r2,1
   10a1c:	10968904 	addi	r2,r2,23076
   10a20:	1806913a 	slli	r3,r3,4
   10a24:	10c5883a 	add	r2,r2,r3
   10a28:	1080008b 	ldhu	r2,2(r2)
   10a2c:	10bfffcc 	andi	r2,r2,65535
   10a30:	1000241e 	bne	r2,zero,10ac4 <Hw_Timer_Tick+0x144>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
   10a34:	e0ffff03 	ldbu	r3,-4(fp)
   10a38:	00800074 	movhi	r2,1
   10a3c:	10968904 	addi	r2,r2,23076
   10a40:	1806913a 	slli	r3,r3,4
   10a44:	10c5883a 	add	r2,r2,r3
   10a48:	10800043 	ldbu	r2,1(r2)
   10a4c:	10803fcc 	andi	r2,r2,255
   10a50:	10800058 	cmpnei	r2,r2,1
   10a54:	1000061e 	bne	r2,zero,10a70 <Hw_Timer_Tick+0xf0>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
   10a58:	e0ffff03 	ldbu	r3,-4(fp)
   10a5c:	00800074 	movhi	r2,1
   10a60:	10968904 	addi	r2,r2,23076
   10a64:	1806913a 	slli	r3,r3,4
   10a68:	10c5883a 	add	r2,r2,r3
   10a6c:	10000005 	stb	zero,0(r2)

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
   10a70:	e13fff03 	ldbu	r4,-4(fp)
   10a74:	e0ffff03 	ldbu	r3,-4(fp)
   10a78:	00800074 	movhi	r2,1
   10a7c:	10968904 	addi	r2,r2,23076
   10a80:	1806913a 	slli	r3,r3,4
   10a84:	18c00104 	addi	r3,r3,4
   10a88:	10c5883a 	add	r2,r2,r3
   10a8c:	10c0000b 	ldhu	r3,0(r2)
   10a90:	00800074 	movhi	r2,1
   10a94:	10968904 	addi	r2,r2,23076
   10a98:	2008913a 	slli	r4,r4,4
   10a9c:	1105883a 	add	r2,r2,r4
   10aa0:	10c0008d 	sth	r3,2(r2)

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
   10aa4:	e0ffff03 	ldbu	r3,-4(fp)
   10aa8:	00800074 	movhi	r2,1
   10aac:	10968904 	addi	r2,r2,23076
   10ab0:	1806913a 	slli	r3,r3,4
   10ab4:	18c00204 	addi	r3,r3,8
   10ab8:	10c5883a 	add	r2,r2,r3
   10abc:	10800017 	ldw	r2,0(r2)
   10ac0:	103ee83a 	callr	r2

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
   10ac4:	e0bfff03 	ldbu	r2,-4(fp)
   10ac8:	10800044 	addi	r2,r2,1
   10acc:	e0bfff05 	stb	r2,-4(fp)
   10ad0:	e0bfff03 	ldbu	r2,-4(fp)
   10ad4:	108002b0 	cmpltui	r2,r2,10
   10ad8:	103fb81e 	bne	r2,zero,109bc <_gp+0xffff343c>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
   10adc:	e037883a 	mov	sp,fp
   10ae0:	dfc00117 	ldw	ra,4(sp)
   10ae4:	df000017 	ldw	fp,0(sp)
   10ae8:	dec00204 	addi	sp,sp,8
   10aec:	f800283a 	ret

00010af0 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
   10af0:	defffb04 	addi	sp,sp,-20
   10af4:	df000415 	stw	fp,16(sp)
   10af8:	df000404 	addi	fp,sp,16
   10afc:	2807883a 	mov	r3,r5
   10b00:	3005883a 	mov	r2,r6
   10b04:	e1ffff15 	stw	r7,-4(fp)
   10b08:	e13ffc05 	stb	r4,-16(fp)
   10b0c:	e0fffd0d 	sth	r3,-12(fp)
   10b10:	e0bffe05 	stb	r2,-8(fp)
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
   10b14:	e0fffc03 	ldbu	r3,-16(fp)
   10b18:	00800074 	movhi	r2,1
   10b1c:	10968904 	addi	r2,r2,23076
   10b20:	1806913a 	slli	r3,r3,4
   10b24:	10c5883a 	add	r2,r2,r3
   10b28:	e0fffe03 	ldbu	r3,-8(fp)
   10b2c:	10c00045 	stb	r3,1(r2)
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
   10b30:	e0fffc03 	ldbu	r3,-16(fp)
   10b34:	00800074 	movhi	r2,1
   10b38:	10968904 	addi	r2,r2,23076
   10b3c:	1806913a 	slli	r3,r3,4
   10b40:	18c00204 	addi	r3,r3,8
   10b44:	10c5883a 	add	r2,r2,r3
   10b48:	e0ffff17 	ldw	r3,-4(fp)
   10b4c:	10c00015 	stw	r3,0(r2)
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
   10b50:	e0fffc03 	ldbu	r3,-16(fp)
   10b54:	00800074 	movhi	r2,1
   10b58:	10968904 	addi	r2,r2,23076
   10b5c:	1806913a 	slli	r3,r3,4
   10b60:	18c00304 	addi	r3,r3,12
   10b64:	10c5883a 	add	r2,r2,r3
   10b68:	e0c00117 	ldw	r3,4(fp)
   10b6c:	10c00015 	stw	r3,0(r2)
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
   10b70:	e0fffc03 	ldbu	r3,-16(fp)
   10b74:	00800074 	movhi	r2,1
   10b78:	10968904 	addi	r2,r2,23076
   10b7c:	1806913a 	slli	r3,r3,4
   10b80:	10c5883a 	add	r2,r2,r3
   10b84:	e0fffd0b 	ldhu	r3,-12(fp)
   10b88:	10c0008d 	sth	r3,2(r2)
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
   10b8c:	e0fffc03 	ldbu	r3,-16(fp)
   10b90:	00800074 	movhi	r2,1
   10b94:	10968904 	addi	r2,r2,23076
   10b98:	1806913a 	slli	r3,r3,4
   10b9c:	18c00104 	addi	r3,r3,4
   10ba0:	10c5883a 	add	r2,r2,r3
   10ba4:	e0fffd0b 	ldhu	r3,-12(fp)
   10ba8:	10c0000d 	sth	r3,0(r2)
}
   10bac:	e037883a 	mov	sp,fp
   10bb0:	df000017 	ldw	fp,0(sp)
   10bb4:	dec00104 	addi	sp,sp,4
   10bb8:	f800283a 	ret

00010bbc <Hw_Timer_Start>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
   10bbc:	defffe04 	addi	sp,sp,-8
   10bc0:	df000115 	stw	fp,4(sp)
   10bc4:	df000104 	addi	fp,sp,4
   10bc8:	2005883a 	mov	r2,r4
   10bcc:	e0bfff05 	stb	r2,-4(fp)
	if(TmrNum < TIMER_MAX)
   10bd0:	e0bfff03 	ldbu	r2,-4(fp)
   10bd4:	108002a8 	cmpgeui	r2,r2,10
   10bd8:	1000071e 	bne	r2,zero,10bf8 <Hw_Timer_Start+0x3c>
		Timer_Tbl[TmrNum].Timer_En = ON;
   10bdc:	e0ffff03 	ldbu	r3,-4(fp)
   10be0:	00800074 	movhi	r2,1
   10be4:	10968904 	addi	r2,r2,23076
   10be8:	1806913a 	slli	r3,r3,4
   10bec:	10c5883a 	add	r2,r2,r3
   10bf0:	00c00044 	movi	r3,1
   10bf4:	10c00005 	stb	r3,0(r2)
}
   10bf8:	e037883a 	mov	sp,fp
   10bfc:	df000017 	ldw	fp,0(sp)
   10c00:	dec00104 	addi	sp,sp,4
   10c04:	f800283a 	ret

00010c08 <Hw_Timer_Stop>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Stop(u8 TmrNum)
{
   10c08:	defffe04 	addi	sp,sp,-8
   10c0c:	df000115 	stw	fp,4(sp)
   10c10:	df000104 	addi	fp,sp,4
   10c14:	2005883a 	mov	r2,r4
   10c18:	e0bfff05 	stb	r2,-4(fp)
	if(TmrNum < TIMER_MAX)
   10c1c:	e0bfff03 	ldbu	r2,-4(fp)
   10c20:	108002a8 	cmpgeui	r2,r2,10
   10c24:	1000061e 	bne	r2,zero,10c40 <Hw_Timer_Stop+0x38>
		Timer_Tbl[TmrNum].Timer_En = OFF;
   10c28:	e0ffff03 	ldbu	r3,-4(fp)
   10c2c:	00800074 	movhi	r2,1
   10c30:	10968904 	addi	r2,r2,23076
   10c34:	1806913a 	slli	r3,r3,4
   10c38:	10c5883a 	add	r2,r2,r3
   10c3c:	10000005 	stb	zero,0(r2)
}
   10c40:	e037883a 	mov	sp,fp
   10c44:	df000017 	ldw	fp,0(sp)
   10c48:	dec00104 	addi	sp,sp,4
   10c4c:	f800283a 	ret

00010c50 <Hw_Timer_Reset>:
     	 	 - 타이머값 초기화
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Reset(u8 TmrNum)
{
   10c50:	defffe04 	addi	sp,sp,-8
   10c54:	df000115 	stw	fp,4(sp)
   10c58:	df000104 	addi	fp,sp,4
   10c5c:	2005883a 	mov	r2,r4
   10c60:	e0bfff05 	stb	r2,-4(fp)
	Timer_Tbl[TmrNum].Timer_En   = OFF;
   10c64:	e0ffff03 	ldbu	r3,-4(fp)
   10c68:	00800074 	movhi	r2,1
   10c6c:	10968904 	addi	r2,r2,23076
   10c70:	1806913a 	slli	r3,r3,4
   10c74:	10c5883a 	add	r2,r2,r3
   10c78:	10000005 	stb	zero,0(r2)
	Timer_Tbl[TmrNum].Timer_Ctn  = Timer_Tbl[TmrNum].Timer_Init;
   10c7c:	e13fff03 	ldbu	r4,-4(fp)
   10c80:	e0ffff03 	ldbu	r3,-4(fp)
   10c84:	00800074 	movhi	r2,1
   10c88:	10968904 	addi	r2,r2,23076
   10c8c:	1806913a 	slli	r3,r3,4
   10c90:	18c00104 	addi	r3,r3,4
   10c94:	10c5883a 	add	r2,r2,r3
   10c98:	10c0000b 	ldhu	r3,0(r2)
   10c9c:	00800074 	movhi	r2,1
   10ca0:	10968904 	addi	r2,r2,23076
   10ca4:	2008913a 	slli	r4,r4,4
   10ca8:	1105883a 	add	r2,r2,r4
   10cac:	10c0008d 	sth	r3,2(r2)
}
   10cb0:	e037883a 	mov	sp,fp
   10cb4:	df000017 	ldw	fp,0(sp)
   10cb8:	dec00104 	addi	sp,sp,4
   10cbc:	f800283a 	ret

00010cc0 <Hw_Timer_Delay_ms>:
     	 	 ms 단위로 딜레이를 준다.
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
   10cc0:	defffe04 	addi	sp,sp,-8
   10cc4:	df000115 	stw	fp,4(sp)
   10cc8:	df000104 	addi	fp,sp,4
   10ccc:	2005883a 	mov	r2,r4
   10cd0:	e0bfff0d 	sth	r2,-4(fp)
	Tmr_Ctn = DelayData;
   10cd4:	e0bfff0b 	ldhu	r2,-4(fp)
   10cd8:	d0a0fb0d 	sth	r2,-31764(gp)
	
	while( Tmr_Ctn );
   10cdc:	0001883a 	nop
   10ce0:	d0a0fb0b 	ldhu	r2,-31764(gp)
   10ce4:	10bfffcc 	andi	r2,r2,65535
   10ce8:	103ffd1e 	bne	r2,zero,10ce0 <_gp+0xffff3760>
}
   10cec:	e037883a 	mov	sp,fp
   10cf0:	df000017 	ldw	fp,0(sp)
   10cf4:	dec00104 	addi	sp,sp,4
   10cf8:	f800283a 	ret

00010cfc <Hw_Timer_Get_Handle>:
     	 	 ms 단위로 딜레이를 준다.
     ARG
     RET
---------------------------------------------------------------------------*/
s16 Hw_Timer_Get_Handle( void )
{
   10cfc:	defffe04 	addi	sp,sp,-8
   10d00:	df000115 	stw	fp,4(sp)
   10d04:	df000104 	addi	fp,sp,4
	s16 TmrIndex = Tmr_HandleIndex;
   10d08:	d0a0fb8b 	ldhu	r2,-31762(gp)
   10d0c:	e0bfff0d 	sth	r2,-4(fp)
	
	Tmr_HandleIndex++;
   10d10:	d0a0fb8b 	ldhu	r2,-31762(gp)
   10d14:	10800044 	addi	r2,r2,1
   10d18:	d0a0fb8d 	sth	r2,-31762(gp)
	
	return TmrIndex;
   10d1c:	e0bfff0b 	ldhu	r2,-4(fp)
}
   10d20:	e037883a 	mov	sp,fp
   10d24:	df000017 	ldw	fp,0(sp)
   10d28:	dec00104 	addi	sp,sp,4
   10d2c:	f800283a 	ret

00010d30 <Hw_Timer_Get_CountValue>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
   10d30:	defffe04 	addi	sp,sp,-8
   10d34:	dfc00115 	stw	ra,4(sp)
   10d38:	df000015 	stw	fp,0(sp)
   10d3c:	d839883a 	mov	fp,sp
	return millis();
   10d40:	00119e00 	call	119e0 <millis>
}
   10d44:	e037883a 	mov	sp,fp
   10d48:	dfc00117 	ldw	ra,4(sp)
   10d4c:	df000017 	ldw	fp,0(sp)
   10d50:	dec00204 	addi	sp,sp,8
   10d54:	f800283a 	ret

00010d58 <Hw_Timer_TimeStart>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_TimeStart( HW_TIMER_TIME_OBJ *TimerTimePtr )
{
   10d58:	defffd04 	addi	sp,sp,-12
   10d5c:	dfc00215 	stw	ra,8(sp)
   10d60:	df000115 	stw	fp,4(sp)
   10d64:	df000104 	addi	fp,sp,4
   10d68:	e13fff15 	stw	r4,-4(fp)
	TimerTimePtr->Start = Hw_Timer_Get_CountValue();
   10d6c:	0010d300 	call	10d30 <Hw_Timer_Get_CountValue>
   10d70:	1007883a 	mov	r3,r2
   10d74:	e0bfff17 	ldw	r2,-4(fp)
   10d78:	10c00015 	stw	r3,0(r2)
}
   10d7c:	e037883a 	mov	sp,fp
   10d80:	dfc00117 	ldw	ra,4(sp)
   10d84:	df000017 	ldw	fp,0(sp)
   10d88:	dec00204 	addi	sp,sp,8
   10d8c:	f800283a 	ret

00010d90 <Hw_Timer_TimeGetElapse>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_TimeGetElapse( HW_TIMER_TIME_OBJ *TimerTimePtr )
{
   10d90:	defffe04 	addi	sp,sp,-8
   10d94:	df000115 	stw	fp,4(sp)
   10d98:	df000104 	addi	fp,sp,4
   10d9c:	e13fff15 	stw	r4,-4(fp)
	return (Hw_Timer_Counter - TimerTimePtr->Start);
   10da0:	d0e0fa17 	ldw	r3,-31768(gp)
   10da4:	e0bfff17 	ldw	r2,-4(fp)
   10da8:	10800017 	ldw	r2,0(r2)
   10dac:	1885c83a 	sub	r2,r3,r2
}
   10db0:	e037883a 	mov	sp,fp
   10db4:	df000017 	ldw	fp,0(sp)
   10db8:	dec00104 	addi	sp,sp,4
   10dbc:	f800283a 	ret

00010dc0 <Hw_Uart_ISR_Handler>:




static void Hw_Uart_ISR_Handler(void* context)
{
   10dc0:	defffa04 	addi	sp,sp,-24
   10dc4:	dfc00515 	stw	ra,20(sp)
   10dc8:	df000415 	stw	fp,16(sp)
   10dcc:	df000404 	addi	fp,sp,16
   10dd0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 status;
	u8      UartData;

	HW_UART_OBJ *pUart = (HW_UART_OBJ *)context;
   10dd4:	e0bfff17 	ldw	r2,-4(fp)
   10dd8:	e0bffc15 	stw	r2,-16(fp)



	//-- 상태 읽기
	//
	status = IORD_ALTERA_AVALON_UART_STATUS(pUart->pBase);
   10ddc:	e0bffc17 	ldw	r2,-16(fp)
   10de0:	10800317 	ldw	r2,12(r2)
   10de4:	10800204 	addi	r2,r2,8
   10de8:	10800037 	ldwio	r2,0(r2)
   10dec:	e0bffd15 	stw	r2,-12(fp)

	//-- Clear any error flags set at the device
	//
	IOWR_ALTERA_AVALON_UART_STATUS(pUart->pBase, 0);
   10df0:	e0bffc17 	ldw	r2,-16(fp)
   10df4:	10800317 	ldw	r2,12(r2)
   10df8:	10800204 	addi	r2,r2,8
   10dfc:	0007883a 	mov	r3,zero
   10e00:	10c00035 	stwio	r3,0(r2)

	//-- Dummy read to ensure IRQ is negated before ISR returns
	//
	IORD_ALTERA_AVALON_UART_STATUS(pUart->pBase);
   10e04:	e0bffc17 	ldw	r2,-16(fp)
   10e08:	10800317 	ldw	r2,12(r2)
   10e0c:	10800204 	addi	r2,r2,8
   10e10:	10800037 	ldwio	r2,0(r2)


	//-- RX 인터럽트 처리
	//
	if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	1080200c 	andi	r2,r2,128
   10e1c:	10001926 	beq	r2,zero,10e84 <Hw_Uart_ISR_Handler+0xc4>
	{
		if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | ALTERA_AVALON_UART_STATUS_FE_MSK))
   10e20:	e0bffd17 	ldw	r2,-12(fp)
   10e24:	108000cc 	andi	r2,r2,3
   10e28:	1000161e 	bne	r2,zero,10e84 <Hw_Uart_ISR_Handler+0xc4>
		{
			return;
		}

		UartData = IORD_ALTERA_AVALON_UART_RXDATA(pUart->pBase);
   10e2c:	e0bffc17 	ldw	r2,-16(fp)
   10e30:	10800317 	ldw	r2,12(r2)
   10e34:	10800037 	ldwio	r2,0(r2)
   10e38:	e0bffe05 	stb	r2,-8(fp)

		Hw_Uart_Q_Push( pUart->Port, &UartData );
   10e3c:	e0bffc17 	ldw	r2,-16(fp)
   10e40:	10800017 	ldw	r2,0(r2)
   10e44:	10c03fcc 	andi	r3,r2,255
   10e48:	e0bffe04 	addi	r2,fp,-8
   10e4c:	1809883a 	mov	r4,r3
   10e50:	100b883a 	mov	r5,r2
   10e54:	00115380 	call	11538 <Hw_Uart_Q_Push>

		if( pUart->ISR_FuncPtr != NULL )
   10e58:	e0bffc17 	ldw	r2,-16(fp)
   10e5c:	10800217 	ldw	r2,8(r2)
   10e60:	10000826 	beq	r2,zero,10e84 <Hw_Uart_ISR_Handler+0xc4>
		{
			(*pUart->ISR_FuncPtr)(UartData);
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10800217 	ldw	r2,8(r2)
   10e6c:	e0fffe03 	ldbu	r3,-8(fp)
   10e70:	18c03fcc 	andi	r3,r3,255
   10e74:	18c0201c 	xori	r3,r3,128
   10e78:	18ffe004 	addi	r3,r3,-128
   10e7c:	1809883a 	mov	r4,r3
   10e80:	103ee83a 	callr	r2
		}
	}
}
   10e84:	e037883a 	mov	sp,fp
   10e88:	dfc00117 	ldw	ra,4(sp)
   10e8c:	df000017 	ldw	fp,0(sp)
   10e90:	dec00204 	addi	sp,sp,8
   10e94:	f800283a 	ret

00010e98 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
   10e98:	defffd04 	addi	sp,sp,-12
   10e9c:	dfc00215 	stw	ra,8(sp)
   10ea0:	df000115 	stw	fp,4(sp)
   10ea4:	df000104 	addi	fp,sp,4
	u32 i;
	
	Hw_Uart_Q_Init();
   10ea8:	00113900 	call	11390 <Hw_Uart_Q_Init>
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
   10eac:	e03fff15 	stw	zero,-4(fp)
   10eb0:	00001106 	br	10ef8 <Hw_Uart_Init+0x60>
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
   10eb4:	00800074 	movhi	r2,1
   10eb8:	1096b104 	addi	r2,r2,23236
   10ebc:	e0ffff17 	ldw	r3,-4(fp)
   10ec0:	1806913a 	slli	r3,r3,4
   10ec4:	18c00104 	addi	r3,r3,4
   10ec8:	10c5883a 	add	r2,r2,r3
   10ecc:	10000015 	stw	zero,0(r2)
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
   10ed0:	00800074 	movhi	r2,1
   10ed4:	1096b104 	addi	r2,r2,23236
   10ed8:	e0ffff17 	ldw	r3,-4(fp)
   10edc:	1806913a 	slli	r3,r3,4
   10ee0:	18c00204 	addi	r3,r3,8
   10ee4:	10c5883a 	add	r2,r2,r3
   10ee8:	10000015 	stw	zero,0(r2)
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
   10eec:	e0bfff17 	ldw	r2,-4(fp)
   10ef0:	10800044 	addi	r2,r2,1
   10ef4:	e0bfff15 	stw	r2,-4(fp)
   10ef8:	e0bfff17 	ldw	r2,-4(fp)
   10efc:	108001b0 	cmpltui	r2,r2,6
   10f00:	103fec1e 	bne	r2,zero,10eb4 <_gp+0xffff3934>
		Hw_Uart_Ch[i].Baud 		  = 0;
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
   10f04:	0009883a 	mov	r4,zero
   10f08:	014000b4 	movhi	r5,2
   10f0c:	29708004 	addi	r5,r5,-15872
   10f10:	000d883a 	mov	r6,zero
   10f14:	0010f5c0 	call	10f5c <Hw_Uart_Open>
	Hw_Uart_Open( HW_UART_COM2, 115200, NULL );	
   10f18:	01000044 	movi	r4,1
   10f1c:	014000b4 	movhi	r5,2
   10f20:	29708004 	addi	r5,r5,-15872
   10f24:	000d883a 	mov	r6,zero
   10f28:	0010f5c0 	call	10f5c <Hw_Uart_Open>
}
   10f2c:	e037883a 	mov	sp,fp
   10f30:	dfc00117 	ldw	ra,4(sp)
   10f34:	df000017 	ldw	fp,0(sp)
   10f38:	dec00204 	addi	sp,sp,8
   10f3c:	f800283a 	ret

00010f40 <Hw_Uart_DeInit>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
   10f40:	deffff04 	addi	sp,sp,-4
   10f44:	df000015 	stw	fp,0(sp)
   10f48:	d839883a 	mov	fp,sp

}
   10f4c:	e037883a 	mov	sp,fp
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00104 	addi	sp,sp,4
   10f58:	f800283a 	ret

00010f5c <Hw_Uart_Open>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
   10f5c:	defffb04 	addi	sp,sp,-20
   10f60:	dfc00415 	stw	ra,16(sp)
   10f64:	df000315 	stw	fp,12(sp)
   10f68:	df000304 	addi	fp,sp,12
   10f6c:	2005883a 	mov	r2,r4
   10f70:	e17ffe15 	stw	r5,-8(fp)
   10f74:	e1bfff15 	stw	r6,-4(fp)
   10f78:	e0bffd05 	stb	r2,-12(fp)
	switch( Ch )
   10f7c:	e0bffd03 	ldbu	r2,-12(fp)
   10f80:	10c00168 	cmpgeui	r3,r2,5
   10f84:	1800141e 	bne	r3,zero,10fd8 <Hw_Uart_Open+0x7c>
   10f88:	100690ba 	slli	r3,r2,2
   10f8c:	00800074 	movhi	r2,1
   10f90:	1083e804 	addi	r2,r2,4000
   10f94:	1885883a 	add	r2,r3,r2
   10f98:	10800017 	ldw	r2,0(r2)
   10f9c:	1000683a 	jmp	r2
   10fa0:	00010fb4 	movhi	zero,1086
   10fa4:	00010fc4 	movi	zero,1087
   10fa8:	00010fd4 	movui	zero,1087
   10fac:	00010fd4 	movui	zero,1087
   10fb0:	00010fd4 	movui	zero,1087
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
   10fb4:	e13ffe17 	ldw	r4,-8(fp)
   10fb8:	e17fff17 	ldw	r5,-4(fp)
   10fbc:	0010fec0 	call	10fec <Hw_Uart_Open_COM1>
			break;
   10fc0:	00000506 	br	10fd8 <Hw_Uart_Open+0x7c>
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
   10fc4:	e13ffe17 	ldw	r4,-8(fp)
   10fc8:	e17fff17 	ldw	r5,-4(fp)
   10fcc:	00110980 	call	11098 <Hw_Uart_Open_COM2>
			break;
   10fd0:	00000106 	br	10fd8 <Hw_Uart_Open+0x7c>

		case HW_UART_COM4:
			break;

		case HW_UART_COM5:
			break;			
   10fd4:	0001883a 	nop
	}
}
   10fd8:	e037883a 	mov	sp,fp
   10fdc:	dfc00117 	ldw	ra,4(sp)
   10fe0:	df000017 	ldw	fp,0(sp)
   10fe4:	dec00204 	addi	sp,sp,8
   10fe8:	f800283a 	ret

00010fec <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
   10fec:	defff904 	addi	sp,sp,-28
   10ff0:	dfc00615 	stw	ra,24(sp)
   10ff4:	df000515 	stw	fp,20(sp)
   10ff8:	df000504 	addi	fp,sp,20
   10ffc:	e13ffe15 	stw	r4,-8(fp)
   11000:	e17fff15 	stw	r5,-4(fp)
	u32 Reg;
	void *pBase = (void *)UART_0_BASE;
   11004:	008000b4 	movhi	r2,2
   11008:	10862804 	addi	r2,r2,6304
   1100c:	e0bffc15 	stw	r2,-16(fp)


	Hw_Uart_Ch[HW_UART_COM1].Port 		 = HW_UART_COM1;
   11010:	00800074 	movhi	r2,1
   11014:	1096b104 	addi	r2,r2,23236
   11018:	10000015 	stw	zero,0(r2)
	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
   1101c:	00800074 	movhi	r2,1
   11020:	1096b104 	addi	r2,r2,23236
   11024:	e0fffe17 	ldw	r3,-8(fp)
   11028:	10c00115 	stw	r3,4(r2)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
   1102c:	00800074 	movhi	r2,1
   11030:	1096b104 	addi	r2,r2,23236
   11034:	e0ffff17 	ldw	r3,-4(fp)
   11038:	10c00215 	stw	r3,8(r2)
	Hw_Uart_Ch[HW_UART_COM1].pBase       = pBase;
   1103c:	00800074 	movhi	r2,1
   11040:	1096b104 	addi	r2,r2,23236
   11044:	e0fffc17 	ldw	r3,-16(fp)
   11048:	10c00315 	stw	r3,12(r2)


	//-- 인터럽트 활성화
	//
	Reg = ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1104c:	00802004 	movi	r2,128
   11050:	e0bffd15 	stw	r2,-12(fp)


	IOWR_ALTERA_AVALON_UART_CONTROL(pBase, Reg);
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	10800304 	addi	r2,r2,12
   1105c:	e0fffd17 	ldw	r3,-12(fp)
   11060:	10c00035 	stwio	r3,0(r2)


	//-- 인터럽트 연결
	//
    alt_ic_isr_register( UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ, Hw_Uart_ISR_Handler, (void *)&Hw_Uart_Ch[HW_UART_COM1], 0x0);
   11064:	d8000015 	stw	zero,0(sp)
   11068:	0009883a 	mov	r4,zero
   1106c:	01400044 	movi	r5,1
   11070:	01800074 	movhi	r6,1
   11074:	31837004 	addi	r6,r6,3520
   11078:	01c00074 	movhi	r7,1
   1107c:	39d6b104 	addi	r7,r7,23236
   11080:	0012d880 	call	12d88 <alt_ic_isr_register>
}
   11084:	e037883a 	mov	sp,fp
   11088:	dfc00117 	ldw	ra,4(sp)
   1108c:	df000017 	ldw	fp,0(sp)
   11090:	dec00204 	addi	sp,sp,8
   11094:	f800283a 	ret

00011098 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
   11098:	defffd04 	addi	sp,sp,-12
   1109c:	df000215 	stw	fp,8(sp)
   110a0:	df000204 	addi	fp,sp,8
   110a4:	e13ffe15 	stw	r4,-8(fp)
   110a8:	e17fff15 	stw	r5,-4(fp)

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
   110ac:	00800074 	movhi	r2,1
   110b0:	1096b104 	addi	r2,r2,23236
   110b4:	e0fffe17 	ldw	r3,-8(fp)
   110b8:	10c00515 	stw	r3,20(r2)
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
   110bc:	00800074 	movhi	r2,1
   110c0:	1096b104 	addi	r2,r2,23236
   110c4:	e0ffff17 	ldw	r3,-4(fp)
   110c8:	10c00615 	stw	r3,24(r2)
}
   110cc:	e037883a 	mov	sp,fp
   110d0:	df000017 	ldw	fp,0(sp)
   110d4:	dec00104 	addi	sp,sp,4
   110d8:	f800283a 	ret

000110dc <Hw_Uart_SetReceiveFuncISR>:
			: 시리얼 포트에서 데이터 수신시 실행할 함수 설정 .
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_SetReceiveFuncISR( u8 Ch, void (*ISR_FuncPtr)(char Ch) )
{
   110dc:	defffd04 	addi	sp,sp,-12
   110e0:	df000215 	stw	fp,8(sp)
   110e4:	df000204 	addi	fp,sp,8
   110e8:	2005883a 	mov	r2,r4
   110ec:	e17fff15 	stw	r5,-4(fp)
   110f0:	e0bffe05 	stb	r2,-8(fp)
	Hw_Uart_Ch[Ch].ISR_FuncPtr = ISR_FuncPtr;
   110f4:	e0fffe03 	ldbu	r3,-8(fp)
   110f8:	00800074 	movhi	r2,1
   110fc:	1096b104 	addi	r2,r2,23236
   11100:	1806913a 	slli	r3,r3,4
   11104:	18c00204 	addi	r3,r3,8
   11108:	10c5883a 	add	r2,r2,r3
   1110c:	e0ffff17 	ldw	r3,-4(fp)
   11110:	10c00015 	stw	r3,0(r2)
}
   11114:	e037883a 	mov	sp,fp
   11118:	df000017 	ldw	fp,0(sp)
   1111c:	dec00104 	addi	sp,sp,4
   11120:	f800283a 	ret

00011124 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
   11124:	defffc04 	addi	sp,sp,-16
   11128:	dfc00315 	stw	ra,12(sp)
   1112c:	df000215 	stw	fp,8(sp)
   11130:	df000204 	addi	fp,sp,8
   11134:	2005883a 	mov	r2,r4
   11138:	e0bfff05 	stb	r2,-4(fp)
	u8 Uart_GetData = 0;
   1113c:	e03ffe05 	stb	zero,-8(fp)

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
   11140:	e0bfff03 	ldbu	r2,-4(fp)
   11144:	1009883a 	mov	r4,r2
   11148:	00114a40 	call	114a4 <HW_UART_Q_VAILD>
   1114c:	10000126 	beq	r2,zero,11154 <Hw_Uart_Getch+0x30>
   11150:	00000106 	br	11158 <Hw_Uart_Getch+0x34>
	}
   11154:	003ffa06 	br	11140 <_gp+0xffff3bc0>

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
   11158:	e0bfff03 	ldbu	r2,-4(fp)
   1115c:	1009883a 	mov	r4,r2
   11160:	e17ffe04 	addi	r5,fp,-8
   11164:	00116700 	call	11670 <Hw_Uart_Q_Pop>

	return Uart_GetData;
   11168:	e0bffe03 	ldbu	r2,-8(fp)
}
   1116c:	e037883a 	mov	sp,fp
   11170:	dfc00117 	ldw	ra,4(sp)
   11174:	df000017 	ldw	fp,0(sp)
   11178:	dec00204 	addi	sp,sp,8
   1117c:	f800283a 	ret

00011180 <Hw_Uart_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
   11180:	defffc04 	addi	sp,sp,-16
   11184:	df000315 	stw	fp,12(sp)
   11188:	df000304 	addi	fp,sp,12
   1118c:	2007883a 	mov	r3,r4
   11190:	2805883a 	mov	r2,r5
   11194:	e0fffe05 	stb	r3,-8(fp)
   11198:	e0bfff05 	stb	r2,-4(fp)
	u32 Reg;


	switch( Ch )
   1119c:	e0bffe03 	ldbu	r2,-8(fp)
   111a0:	10c001a8 	cmpgeui	r3,r2,6
   111a4:	1800271e 	bne	r3,zero,11244 <Hw_Uart_Putch+0xc4>
   111a8:	100690ba 	slli	r3,r2,2
   111ac:	00800074 	movhi	r2,1
   111b0:	10847004 	addi	r2,r2,4544
   111b4:	1885883a 	add	r2,r3,r2
   111b8:	10800017 	ldw	r2,0(r2)
   111bc:	1000683a 	jmp	r2
   111c0:	000111d8 	cmpnei	zero,zero,1095
   111c4:	00011240 	call	1124 <__reset-0xeedc>
   111c8:	00011240 	call	1124 <__reset-0xeedc>
   111cc:	00011240 	call	1124 <__reset-0xeedc>
   111d0:	00011240 	call	1124 <__reset-0xeedc>
   111d4:	00011240 	call	1124 <__reset-0xeedc>
	{
		case HW_UART_COM1:
			while(1)
			{
				Reg = IORD_ALTERA_AVALON_UART_STATUS( Hw_Uart_Ch[Ch].pBase );
   111d8:	e0fffe03 	ldbu	r3,-8(fp)
   111dc:	00800074 	movhi	r2,1
   111e0:	1096b104 	addi	r2,r2,23236
   111e4:	1806913a 	slli	r3,r3,4
   111e8:	18c00304 	addi	r3,r3,12
   111ec:	10c5883a 	add	r2,r2,r3
   111f0:	10800017 	ldw	r2,0(r2)
   111f4:	10800204 	addi	r2,r2,8
   111f8:	10800037 	ldwio	r2,0(r2)
   111fc:	e0bffd15 	stw	r2,-12(fp)
				if( Reg & ALTERA_AVALON_UART_STATUS_TRDY_MSK )
   11200:	e0bffd17 	ldw	r2,-12(fp)
   11204:	1080100c 	andi	r2,r2,64
   11208:	10000c26 	beq	r2,zero,1123c <Hw_Uart_Putch+0xbc>
				{
					IOWR_ALTERA_AVALON_UART_TXDATA( Hw_Uart_Ch[Ch].pBase, Uart_PutData );
   1120c:	e0fffe03 	ldbu	r3,-8(fp)
   11210:	00800074 	movhi	r2,1
   11214:	1096b104 	addi	r2,r2,23236
   11218:	1806913a 	slli	r3,r3,4
   1121c:	18c00304 	addi	r3,r3,12
   11220:	10c5883a 	add	r2,r2,r3
   11224:	10800017 	ldw	r2,0(r2)
   11228:	10800104 	addi	r2,r2,4
   1122c:	e0ffff07 	ldb	r3,-4(fp)
   11230:	10c00035 	stwio	r3,0(r2)
					break;
   11234:	0001883a 	nop
				}
			}
			break;
   11238:	00000206 	br	11244 <Hw_Uart_Putch+0xc4>
				if( Reg & ALTERA_AVALON_UART_STATUS_TRDY_MSK )
				{
					IOWR_ALTERA_AVALON_UART_TXDATA( Hw_Uart_Ch[Ch].pBase, Uart_PutData );
					break;
				}
			}
   1123c:	003fe606 	br	111d8 <_gp+0xffff3c58>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			break;	
   11240:	0001883a 	nop
	}	
}
   11244:	e037883a 	mov	sp,fp
   11248:	df000017 	ldw	fp,0(sp)
   1124c:	dec00104 	addi	sp,sp,4
   11250:	f800283a 	ret

00011254 <Hw_Uart_PrintEx>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
   11254:	defffc04 	addi	sp,sp,-16
   11258:	dfc00315 	stw	ra,12(sp)
   1125c:	df000215 	stw	fp,8(sp)
   11260:	df000204 	addi	fp,sp,8
   11264:	2005883a 	mov	r2,r4
   11268:	e17fff15 	stw	r5,-4(fp)
   1126c:	e0bffe05 	stb	r2,-8(fp)
	while( *UartPrintData != '\0' )
   11270:	00000c06 	br	112a4 <Hw_Uart_PrintEx+0x50>
	{
		Hw_Uart_Putch( Ch, *UartPrintData );
   11274:	e0fffe03 	ldbu	r3,-8(fp)
   11278:	e0bfff17 	ldw	r2,-4(fp)
   1127c:	10800003 	ldbu	r2,0(r2)
   11280:	10803fcc 	andi	r2,r2,255
   11284:	1080201c 	xori	r2,r2,128
   11288:	10bfe004 	addi	r2,r2,-128
   1128c:	1809883a 	mov	r4,r3
   11290:	100b883a 	mov	r5,r2
   11294:	00111800 	call	11180 <Hw_Uart_Putch>
		UartPrintData++;
   11298:	e0bfff17 	ldw	r2,-4(fp)
   1129c:	10800044 	addi	r2,r2,1
   112a0:	e0bfff15 	stw	r2,-4(fp)
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
	while( *UartPrintData != '\0' )
   112a4:	e0bfff17 	ldw	r2,-4(fp)
   112a8:	10800003 	ldbu	r2,0(r2)
   112ac:	10803fcc 	andi	r2,r2,255
   112b0:	1080201c 	xori	r2,r2,128
   112b4:	10bfe004 	addi	r2,r2,-128
   112b8:	103fee1e 	bne	r2,zero,11274 <_gp+0xffff3cf4>
	{
		Hw_Uart_Putch( Ch, *UartPrintData );
		UartPrintData++;
	}        
}
   112bc:	e037883a 	mov	sp,fp
   112c0:	dfc00117 	ldw	ra,4(sp)
   112c4:	df000017 	ldw	fp,0(sp)
   112c8:	dec00204 	addi	sp,sp,8
   112cc:	f800283a 	ret

000112d0 <Hw_Uart_Printf>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Printf( u8 Ch,  char *format, ... )
{
   112d0:	deffc704 	addi	sp,sp,-228
   112d4:	dfc03615 	stw	ra,216(sp)
   112d8:	df003515 	stw	fp,212(sp)
   112dc:	df003504 	addi	fp,sp,212
   112e0:	2005883a 	mov	r2,r4
   112e4:	e1800215 	stw	r6,8(fp)
   112e8:	e1c00315 	stw	r7,12(fp)
   112ec:	e17fff15 	stw	r5,-4(fp)
   112f0:	e0bffe05 	stb	r2,-8(fp)
	char Str[200];
	
	va_list ap;
	
	va_start( ap, format );
   112f4:	e0800204 	addi	r2,fp,8
   112f8:	e0bffd15 	stw	r2,-12(fp)

	//vsprintf( Str, format, ap );	

	Lb_vsprintf(Str, format, ap );
   112fc:	e0bffd17 	ldw	r2,-12(fp)
   11300:	e13fcb04 	addi	r4,fp,-212
   11304:	e17fff17 	ldw	r5,-4(fp)
   11308:	100d883a 	mov	r6,r2
   1130c:	00125680 	call	12568 <vsprintf>
	va_end(ap);
	
	
	
	
	Hw_Uart_PrintEx( Ch, Str );
   11310:	e0bffe03 	ldbu	r2,-8(fp)
   11314:	1009883a 	mov	r4,r2
   11318:	e17fcb04 	addi	r5,fp,-212
   1131c:	00112540 	call	11254 <Hw_Uart_PrintEx>
}
   11320:	e037883a 	mov	sp,fp
   11324:	dfc00117 	ldw	ra,4(sp)
   11328:	df000017 	ldw	fp,0(sp)
   1132c:	dec00404 	addi	sp,sp,16
   11330:	f800283a 	ret

00011334 <Hw_Uart_GetchNoWait>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_GetchNoWait( u8 Ch, u8 *cReturn )
{
   11334:	defffc04 	addi	sp,sp,-16
   11338:	dfc00315 	stw	ra,12(sp)
   1133c:	df000215 	stw	fp,8(sp)
   11340:	df000204 	addi	fp,sp,8
   11344:	2005883a 	mov	r2,r4
   11348:	e17fff15 	stw	r5,-4(fp)
   1134c:	e0bffe05 	stb	r2,-8(fp)
	// 버퍼에 데이터 없으면 실패로 종료.
	if( HW_UART_Q_VAILD(Ch) == 0 )
   11350:	e0bffe03 	ldbu	r2,-8(fp)
   11354:	1009883a 	mov	r4,r2
   11358:	00114a40 	call	114a4 <HW_UART_Q_VAILD>
   1135c:	1000021e 	bne	r2,zero,11368 <Hw_Uart_GetchNoWait+0x34>
	{
		return FALSE;
   11360:	0005883a 	mov	r2,zero
   11364:	00000506 	br	1137c <Hw_Uart_GetchNoWait+0x48>
	}
		   
	Hw_Uart_Q_Pop( Ch, cReturn );
   11368:	e0bffe03 	ldbu	r2,-8(fp)
   1136c:	1009883a 	mov	r4,r2
   11370:	e17fff17 	ldw	r5,-4(fp)
   11374:	00116700 	call	11670 <Hw_Uart_Q_Pop>
	
	return TRUE;
   11378:	00800044 	movi	r2,1
}
   1137c:	e037883a 	mov	sp,fp
   11380:	dfc00117 	ldw	ra,4(sp)
   11384:	df000017 	ldw	fp,0(sp)
   11388:	dec00204 	addi	sp,sp,8
   1138c:	f800283a 	ret

00011390 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
   11390:	defffe04 	addi	sp,sp,-8
   11394:	df000115 	stw	fp,4(sp)
   11398:	df000104 	addi	fp,sp,4
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
   1139c:	e03fff05 	stb	zero,-4(fp)
   113a0:	00001406 	br	113f4 <Hw_Uart_Q_Init+0x64>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
   113a4:	e13fff03 	ldbu	r4,-4(fp)
   113a8:	e0bfff03 	ldbu	r2,-4(fp)
   113ac:	00c00074 	movhi	r3,1
   113b0:	18d70684 	addi	r3,r3,23578
   113b4:	108b883a 	add	r5,r2,r2
   113b8:	1947883a 	add	r3,r3,r5
   113bc:	1800000d 	sth	zero,0(r3)
   113c0:	00c00074 	movhi	r3,1
   113c4:	18d70684 	addi	r3,r3,23578
   113c8:	1085883a 	add	r2,r2,r2
   113cc:	1885883a 	add	r2,r3,r2
   113d0:	10c0000b 	ldhu	r3,0(r2)
   113d4:	00800074 	movhi	r2,1
   113d8:	10970a04 	addi	r2,r2,23592
   113dc:	2109883a 	add	r4,r4,r4
   113e0:	1105883a 	add	r2,r2,r4
   113e4:	10c0000d 	sth	r3,0(r2)
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
   113e8:	e0bfff03 	ldbu	r2,-4(fp)
   113ec:	10800044 	addi	r2,r2,1
   113f0:	e0bfff05 	stb	r2,-4(fp)
   113f4:	e0bfff03 	ldbu	r2,-4(fp)
   113f8:	108001f0 	cmpltui	r2,r2,7
   113fc:	103fe91e 	bne	r2,zero,113a4 <_gp+0xffff3e24>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
   11400:	e037883a 	mov	sp,fp
   11404:	df000017 	ldw	fp,0(sp)
   11408:	dec00104 	addi	sp,sp,4
   1140c:	f800283a 	ret

00011410 <HW_UART_Q_SIZE>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
   11410:	defffe04 	addi	sp,sp,-8
   11414:	df000115 	stw	fp,4(sp)
   11418:	df000104 	addi	fp,sp,4
   1141c:	2005883a 	mov	r2,r4
   11420:	e0bfff05 	stb	r2,-4(fp)
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
   11424:	e0ffff03 	ldbu	r3,-4(fp)
   11428:	00800074 	movhi	r2,1
   1142c:	10970a04 	addi	r2,r2,23592
   11430:	18c7883a 	add	r3,r3,r3
   11434:	10c5883a 	add	r2,r2,r3
   11438:	1080000b 	ldhu	r2,0(r2)
   1143c:	113fffcc 	andi	r4,r2,65535
   11440:	2120001c 	xori	r4,r4,32768
   11444:	21200004 	addi	r4,r4,-32768
   11448:	e0ffff03 	ldbu	r3,-4(fp)
   1144c:	00800074 	movhi	r2,1
   11450:	10970684 	addi	r2,r2,23578
   11454:	18c7883a 	add	r3,r3,r3
   11458:	10c5883a 	add	r2,r2,r3
   1145c:	1080000b 	ldhu	r2,0(r2)
   11460:	10bfffcc 	andi	r2,r2,65535
   11464:	10a0001c 	xori	r2,r2,32768
   11468:	10a00004 	addi	r2,r2,-32768
   1146c:	2085c83a 	sub	r2,r4,r2
   11470:	10c00804 	addi	r3,r2,32
   11474:	00a00034 	movhi	r2,32768
   11478:	108007c4 	addi	r2,r2,31
   1147c:	1884703a 	and	r2,r3,r2
   11480:	1000040e 	bge	r2,zero,11494 <HW_UART_Q_SIZE+0x84>
   11484:	10bfffc4 	addi	r2,r2,-1
   11488:	00fff804 	movi	r3,-32
   1148c:	10c4b03a 	or	r2,r2,r3
   11490:	10800044 	addi	r2,r2,1
}
   11494:	e037883a 	mov	sp,fp
   11498:	df000017 	ldw	fp,0(sp)
   1149c:	dec00104 	addi	sp,sp,4
   114a0:	f800283a 	ret

000114a4 <HW_UART_Q_VAILD>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
   114a4:	defffd04 	addi	sp,sp,-12
   114a8:	dfc00215 	stw	ra,8(sp)
   114ac:	df000115 	stw	fp,4(sp)
   114b0:	df000104 	addi	fp,sp,4
   114b4:	2005883a 	mov	r2,r4
   114b8:	e0bfff05 	stb	r2,-4(fp)
	return HW_UART_Q_SIZE(Ch);
   114bc:	e0bfff03 	ldbu	r2,-4(fp)
   114c0:	1009883a 	mov	r4,r2
   114c4:	00114100 	call	11410 <HW_UART_Q_SIZE>
}
   114c8:	e037883a 	mov	sp,fp
   114cc:	dfc00117 	ldw	ra,4(sp)
   114d0:	df000017 	ldw	fp,0(sp)
   114d4:	dec00204 	addi	sp,sp,8
   114d8:	f800283a 	ret

000114dc <Hw_Uart_Q_PushReady>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_Uart_Q_PushReady( u8 Ch )
{
   114dc:	defffe04 	addi	sp,sp,-8
   114e0:	df000115 	stw	fp,4(sp)
   114e4:	df000104 	addi	fp,sp,4
   114e8:	2005883a 	mov	r2,r4
   114ec:	e0bfff05 	stb	r2,-4(fp)
	if( Hw_Uart_Q_Size[Ch] < HW_UART_Q_BUFFER_MAX )	return TRUE;
   114f0:	e0ffff03 	ldbu	r3,-4(fp)
   114f4:	00800074 	movhi	r2,1
   114f8:	10970304 	addi	r2,r2,23564
   114fc:	18c7883a 	add	r3,r3,r3
   11500:	10c5883a 	add	r2,r2,r3
   11504:	1080000b 	ldhu	r2,0(r2)
   11508:	10bfffcc 	andi	r2,r2,65535
   1150c:	10a0001c 	xori	r2,r2,32768
   11510:	10a00004 	addi	r2,r2,-32768
   11514:	10800808 	cmpgei	r2,r2,32
   11518:	1000021e 	bne	r2,zero,11524 <Hw_Uart_Q_PushReady+0x48>
   1151c:	00800044 	movi	r2,1
   11520:	00000106 	br	11528 <Hw_Uart_Q_PushReady+0x4c>
	else                                  			return FALSE;
   11524:	0005883a 	mov	r2,zero
}
   11528:	e037883a 	mov	sp,fp
   1152c:	df000017 	ldw	fp,0(sp)
   11530:	dec00104 	addi	sp,sp,4
   11534:	f800283a 	ret

00011538 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
   11538:	defff904 	addi	sp,sp,-28
   1153c:	dfc00615 	stw	ra,24(sp)
   11540:	df000515 	stw	fp,20(sp)
   11544:	dc800415 	stw	r18,16(sp)
   11548:	dc400315 	stw	r17,12(sp)
   1154c:	dc000215 	stw	r16,8(sp)
   11550:	df000504 	addi	fp,sp,20
   11554:	2005883a 	mov	r2,r4
   11558:	e17ffc15 	stw	r5,-16(fp)
   1155c:	e0bffb05 	stb	r2,-20(fp)

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
   11560:	e0bffb03 	ldbu	r2,-20(fp)
   11564:	1009883a 	mov	r4,r2
   11568:	00114100 	call	11410 <HW_UART_Q_SIZE>
   1156c:	108007d8 	cmpnei	r2,r2,31
   11570:	1000021e 	bne	r2,zero,1157c <Hw_Uart_Q_Push+0x44>
   11574:	0005883a 	mov	r2,zero
   11578:	00003506 	br	11650 <Hw_Uart_Q_Push+0x118>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
   1157c:	e17ffb03 	ldbu	r5,-20(fp)
   11580:	e0bffb03 	ldbu	r2,-20(fp)
   11584:	00c00074 	movhi	r3,1
   11588:	18d70a04 	addi	r3,r3,23592
   1158c:	1089883a 	add	r4,r2,r2
   11590:	1907883a 	add	r3,r3,r4
   11594:	1900000b 	ldhu	r4,0(r3)
   11598:	2007883a 	mov	r3,r4
   1159c:	18c00044 	addi	r3,r3,1
   115a0:	180d883a 	mov	r6,r3
   115a4:	00c00074 	movhi	r3,1
   115a8:	18d70a04 	addi	r3,r3,23592
   115ac:	1085883a 	add	r2,r2,r2
   115b0:	1885883a 	add	r2,r3,r2
   115b4:	1180000d 	sth	r6,0(r2)
   115b8:	24bfffcc 	andi	r18,r4,65535
   115bc:	94a0001c 	xori	r18,r18,32768
   115c0:	94a00004 	addi	r18,r18,-32768
   115c4:	e0bffc17 	ldw	r2,-16(fp)
   115c8:	14400003 	ldbu	r17,0(r2)
   115cc:	04000074 	movhi	r16,1
   115d0:	8416c904 	addi	r16,r16,23332
   115d4:	2809883a 	mov	r4,r5
   115d8:	01400844 	movi	r5,33
   115dc:	0011db00 	call	11db0 <__mulsi3>
   115e0:	1485883a 	add	r2,r2,r18
   115e4:	8085883a 	add	r2,r16,r2
   115e8:	14400005 	stb	r17,0(r2)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
   115ec:	e0fffb03 	ldbu	r3,-20(fp)
   115f0:	e13ffb03 	ldbu	r4,-20(fp)
   115f4:	00800074 	movhi	r2,1
   115f8:	10970a04 	addi	r2,r2,23592
   115fc:	2109883a 	add	r4,r4,r4
   11600:	1105883a 	add	r2,r2,r4
   11604:	1080000b 	ldhu	r2,0(r2)
   11608:	113fffcc 	andi	r4,r2,65535
   1160c:	2120001c 	xori	r4,r4,32768
   11610:	21200004 	addi	r4,r4,-32768
   11614:	00a00034 	movhi	r2,32768
   11618:	108007c4 	addi	r2,r2,31
   1161c:	2084703a 	and	r2,r4,r2
   11620:	1000040e 	bge	r2,zero,11634 <Hw_Uart_Q_Push+0xfc>
   11624:	10bfffc4 	addi	r2,r2,-1
   11628:	013ff804 	movi	r4,-32
   1162c:	1104b03a 	or	r2,r2,r4
   11630:	10800044 	addi	r2,r2,1
   11634:	1009883a 	mov	r4,r2
   11638:	00800074 	movhi	r2,1
   1163c:	10970a04 	addi	r2,r2,23592
   11640:	18c7883a 	add	r3,r3,r3
   11644:	10c5883a 	add	r2,r2,r3
   11648:	1100000d 	sth	r4,0(r2)

	return TRUE;
   1164c:	00800044 	movi	r2,1
}
   11650:	e6fffd04 	addi	sp,fp,-12
   11654:	dfc00417 	ldw	ra,16(sp)
   11658:	df000317 	ldw	fp,12(sp)
   1165c:	dc800217 	ldw	r18,8(sp)
   11660:	dc400117 	ldw	r17,4(sp)
   11664:	dc000017 	ldw	r16,0(sp)
   11668:	dec00504 	addi	sp,sp,20
   1166c:	f800283a 	ret

00011670 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
   11670:	defffa04 	addi	sp,sp,-24
   11674:	dfc00515 	stw	ra,20(sp)
   11678:	df000415 	stw	fp,16(sp)
   1167c:	dc400315 	stw	r17,12(sp)
   11680:	dc000215 	stw	r16,8(sp)
   11684:	df000404 	addi	fp,sp,16
   11688:	2005883a 	mov	r2,r4
   1168c:	e17ffd15 	stw	r5,-12(fp)
   11690:	e0bffc05 	stb	r2,-16(fp)
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
   11694:	e0bffc03 	ldbu	r2,-16(fp)
   11698:	1009883a 	mov	r4,r2
   1169c:	00114100 	call	11410 <HW_UART_Q_SIZE>
   116a0:	1000021e 	bne	r2,zero,116ac <Hw_Uart_Q_Pop+0x3c>
   116a4:	0005883a 	mov	r2,zero
   116a8:	00003506 	br	11780 <Hw_Uart_Q_Pop+0x110>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
   116ac:	e17ffc03 	ldbu	r5,-16(fp)
   116b0:	e0bffc03 	ldbu	r2,-16(fp)
   116b4:	00c00074 	movhi	r3,1
   116b8:	18d70684 	addi	r3,r3,23578
   116bc:	1089883a 	add	r4,r2,r2
   116c0:	1907883a 	add	r3,r3,r4
   116c4:	1900000b 	ldhu	r4,0(r3)
   116c8:	2007883a 	mov	r3,r4
   116cc:	18c00044 	addi	r3,r3,1
   116d0:	180d883a 	mov	r6,r3
   116d4:	00c00074 	movhi	r3,1
   116d8:	18d70684 	addi	r3,r3,23578
   116dc:	1085883a 	add	r2,r2,r2
   116e0:	1885883a 	add	r2,r3,r2
   116e4:	1180000d 	sth	r6,0(r2)
   116e8:	247fffcc 	andi	r17,r4,65535
   116ec:	8c60001c 	xori	r17,r17,32768
   116f0:	8c600004 	addi	r17,r17,-32768
   116f4:	04000074 	movhi	r16,1
   116f8:	8416c904 	addi	r16,r16,23332
   116fc:	2809883a 	mov	r4,r5
   11700:	01400844 	movi	r5,33
   11704:	0011db00 	call	11db0 <__mulsi3>
   11708:	1445883a 	add	r2,r2,r17
   1170c:	8085883a 	add	r2,r16,r2
   11710:	10c00003 	ldbu	r3,0(r2)
   11714:	e0bffd17 	ldw	r2,-12(fp)
   11718:	10c00005 	stb	r3,0(r2)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
   1171c:	e0fffc03 	ldbu	r3,-16(fp)
   11720:	e13ffc03 	ldbu	r4,-16(fp)
   11724:	00800074 	movhi	r2,1
   11728:	10970684 	addi	r2,r2,23578
   1172c:	2109883a 	add	r4,r4,r4
   11730:	1105883a 	add	r2,r2,r4
   11734:	1080000b 	ldhu	r2,0(r2)
   11738:	113fffcc 	andi	r4,r2,65535
   1173c:	2120001c 	xori	r4,r4,32768
   11740:	21200004 	addi	r4,r4,-32768
   11744:	00a00034 	movhi	r2,32768
   11748:	108007c4 	addi	r2,r2,31
   1174c:	2084703a 	and	r2,r4,r2
   11750:	1000040e 	bge	r2,zero,11764 <Hw_Uart_Q_Pop+0xf4>
   11754:	10bfffc4 	addi	r2,r2,-1
   11758:	013ff804 	movi	r4,-32
   1175c:	1104b03a 	or	r2,r2,r4
   11760:	10800044 	addi	r2,r2,1
   11764:	1009883a 	mov	r4,r2
   11768:	00800074 	movhi	r2,1
   1176c:	10970684 	addi	r2,r2,23578
   11770:	18c7883a 	add	r3,r3,r3
   11774:	10c5883a 	add	r2,r2,r3
   11778:	1100000d 	sth	r4,0(r2)

    return TRUE;
   1177c:	00800044 	movi	r2,1
}
   11780:	e6fffe04 	addi	sp,fp,-8
   11784:	dfc00317 	ldw	ra,12(sp)
   11788:	df000217 	ldw	fp,8(sp)
   1178c:	dc400117 	ldw	r17,4(sp)
   11790:	dc000017 	ldw	r16,0(sp)
   11794:	dec00404 	addi	sp,sp,16
   11798:	f800283a 	ret

0001179c <Hw_Led_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{
   1179c:	defffe04 	addi	sp,sp,-8
   117a0:	dfc00115 	stw	ra,4(sp)
   117a4:	df000015 	stw	fp,0(sp)
   117a8:	d839883a 	mov	fp,sp

	//-- 방향 출력으로 설정
	//


	Hw_Led_Off(0);
   117ac:	0009883a 	mov	r4,zero
   117b0:	00118300 	call	11830 <Hw_Led_Off>
	Hw_Led_Off(1);	
   117b4:	01000044 	movi	r4,1
   117b8:	00118300 	call	11830 <Hw_Led_Off>
}
   117bc:	e037883a 	mov	sp,fp
   117c0:	dfc00117 	ldw	ra,4(sp)
   117c4:	df000017 	ldw	fp,0(sp)
   117c8:	dec00204 	addi	sp,sp,8
   117cc:	f800283a 	ret

000117d0 <Hw_Led_On>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_On( u8 Ch )
{	
   117d0:	defffd04 	addi	sp,sp,-12
   117d4:	df000215 	stw	fp,8(sp)
   117d8:	df000204 	addi	fp,sp,8
   117dc:	2005883a 	mov	r2,r4
   117e0:	e0bfff05 	stb	r2,-4(fp)
	u32 Data;


	Data = IORD_ALTERA_AVALON_PIO_DATA(LED_ADDR_BASE);
   117e4:	008000b4 	movhi	r2,2
   117e8:	10863804 	addi	r2,r2,6368
   117ec:	10800037 	ldwio	r2,0(r2)
   117f0:	e0bffe15 	stw	r2,-8(fp)
	SET_BIT(Data, Ch);
   117f4:	e0bfff03 	ldbu	r2,-4(fp)
   117f8:	00c00044 	movi	r3,1
   117fc:	1884983a 	sll	r2,r3,r2
   11800:	1007883a 	mov	r3,r2
   11804:	e0bffe17 	ldw	r2,-8(fp)
   11808:	10c4b03a 	or	r2,r2,r3
   1180c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_ADDR_BASE, Data);
   11810:	e0fffe17 	ldw	r3,-8(fp)
   11814:	008000b4 	movhi	r2,2
   11818:	10863804 	addi	r2,r2,6368
   1181c:	10c00035 	stwio	r3,0(r2)
}
   11820:	e037883a 	mov	sp,fp
   11824:	df000017 	ldw	fp,0(sp)
   11828:	dec00104 	addi	sp,sp,4
   1182c:	f800283a 	ret

00011830 <Hw_Led_Off>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Off( u8 Ch )
{
   11830:	defffd04 	addi	sp,sp,-12
   11834:	df000215 	stw	fp,8(sp)
   11838:	df000204 	addi	fp,sp,8
   1183c:	2005883a 	mov	r2,r4
   11840:	e0bfff05 	stb	r2,-4(fp)
	u32 Data;

	Data = IORD_ALTERA_AVALON_PIO_DATA(LED_ADDR_BASE);
   11844:	008000b4 	movhi	r2,2
   11848:	10863804 	addi	r2,r2,6368
   1184c:	10800037 	ldwio	r2,0(r2)
   11850:	e0bffe15 	stw	r2,-8(fp)
	CLR_BIT(Data, Ch);
   11854:	e0bfff03 	ldbu	r2,-4(fp)
   11858:	00c00044 	movi	r3,1
   1185c:	1884983a 	sll	r2,r3,r2
   11860:	0084303a 	nor	r2,zero,r2
   11864:	1007883a 	mov	r3,r2
   11868:	e0bffe17 	ldw	r2,-8(fp)
   1186c:	10c4703a 	and	r2,r2,r3
   11870:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_ADDR_BASE, Data);
   11874:	e0fffe17 	ldw	r3,-8(fp)
   11878:	008000b4 	movhi	r2,2
   1187c:	10863804 	addi	r2,r2,6368
   11880:	10c00035 	stwio	r3,0(r2)
}
   11884:	e037883a 	mov	sp,fp
   11888:	df000017 	ldw	fp,0(sp)
   1188c:	dec00104 	addi	sp,sp,4
   11890:	f800283a 	ret

00011894 <Hw_Led_Toggle>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
   11894:	defffd04 	addi	sp,sp,-12
   11898:	df000215 	stw	fp,8(sp)
   1189c:	df000204 	addi	fp,sp,8
   118a0:	2005883a 	mov	r2,r4
   118a4:	e0bfff05 	stb	r2,-4(fp)
	u32 Data;


	Data = IORD_ALTERA_AVALON_PIO_DATA(LED_ADDR_BASE);
   118a8:	008000b4 	movhi	r2,2
   118ac:	10863804 	addi	r2,r2,6368
   118b0:	10800037 	ldwio	r2,0(r2)
   118b4:	e0bffe15 	stw	r2,-8(fp)
	TGL_BIT(Data, Ch);
   118b8:	e0bfff03 	ldbu	r2,-4(fp)
   118bc:	00c00044 	movi	r3,1
   118c0:	1884983a 	sll	r2,r3,r2
   118c4:	1007883a 	mov	r3,r2
   118c8:	e0bffe17 	ldw	r2,-8(fp)
   118cc:	10c4f03a 	xor	r2,r2,r3
   118d0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_ADDR_BASE, Data);
   118d4:	e0fffe17 	ldw	r3,-8(fp)
   118d8:	008000b4 	movhi	r2,2
   118dc:	10863804 	addi	r2,r2,6368
   118e0:	10c00035 	stwio	r3,0(r2)
}
   118e4:	e037883a 	mov	sp,fp
   118e8:	df000017 	ldw	fp,0(sp)
   118ec:	dec00104 	addi	sp,sp,4
   118f0:	f800283a 	ret

000118f4 <Hw_Led_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Wait( u32 delay )
{
   118f4:	defffd04 	addi	sp,sp,-12
   118f8:	df000215 	stw	fp,8(sp)
   118fc:	df000204 	addi	fp,sp,8
   11900:	e13fff15 	stw	r4,-4(fp)
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
   11904:	e03ffe15 	stw	zero,-8(fp)
   11908:	00000306 	br	11918 <Hw_Led_Wait+0x24>
   1190c:	e0bffe17 	ldw	r2,-8(fp)
   11910:	10800044 	addi	r2,r2,1
   11914:	e0bffe15 	stw	r2,-8(fp)
   11918:	e0fffe17 	ldw	r3,-8(fp)
   1191c:	e0bfff17 	ldw	r2,-4(fp)
   11920:	18bffa36 	bltu	r3,r2,1190c <_gp+0xffff438c>
}
   11924:	e037883a 	mov	sp,fp
   11928:	df000017 	ldw	fp,0(sp)
   1192c:	dec00104 	addi	sp,sp,4
   11930:	f800283a 	ret

00011934 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
   11934:	defffe04 	addi	sp,sp,-8
   11938:	dfc00115 	stw	ra,4(sp)
   1193c:	df000015 	stw	fp,0(sp)
   11940:	d839883a 	mov	fp,sp
	Hw_ISR_Init();
   11944:	00108140 	call	10814 <Hw_ISR_Init>
	Hw_Led_Init();
   11948:	001179c0 	call	1179c <Hw_Led_Init>
	Hw_Uart_Init();
   1194c:	0010e980 	call	10e98 <Hw_Uart_Init>

	Enable_ISR();
}
   11950:	e037883a 	mov	sp,fp
   11954:	dfc00117 	ldw	ra,4(sp)
   11958:	df000017 	ldw	fp,0(sp)
   1195c:	dec00204 	addi	sp,sp,8
   11960:	f800283a 	ret

00011964 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
   11964:	defffd04 	addi	sp,sp,-12
   11968:	df000215 	stw	fp,8(sp)
   1196c:	df000204 	addi	fp,sp,8
   11970:	e13fff15 	stw	r4,-4(fp)
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
   11974:	e03ffe15 	stw	zero,-8(fp)
   11978:	00000306 	br	11988 <Hw_Wait+0x24>
   1197c:	e0bffe17 	ldw	r2,-8(fp)
   11980:	10800044 	addi	r2,r2,1
   11984:	e0bffe15 	stw	r2,-8(fp)
   11988:	e0fffe17 	ldw	r3,-8(fp)
   1198c:	e0bfff17 	ldw	r2,-4(fp)
   11990:	18bffa36 	bltu	r3,r2,1197c <_gp+0xffff43fc>
}
   11994:	e037883a 	mov	sp,fp
   11998:	df000017 	ldw	fp,0(sp)
   1199c:	dec00104 	addi	sp,sp,4
   119a0:	f800283a 	ret

000119a4 <Hw_Wait_Usec>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
   119a4:	defffd04 	addi	sp,sp,-12
   119a8:	dfc00215 	stw	ra,8(sp)
   119ac:	df000115 	stw	fp,4(sp)
   119b0:	df000104 	addi	fp,sp,4
   119b4:	e13fff15 	stw	r4,-4(fp)
    Hw_Wait( usec * 83 );
   119b8:	e13fff17 	ldw	r4,-4(fp)
   119bc:	014014c4 	movi	r5,83
   119c0:	0011db00 	call	11db0 <__mulsi3>
   119c4:	1009883a 	mov	r4,r2
   119c8:	00119640 	call	11964 <Hw_Wait>
}
   119cc:	e037883a 	mov	sp,fp
   119d0:	dfc00117 	ldw	ra,4(sp)
   119d4:	df000017 	ldw	fp,0(sp)
   119d8:	dec00204 	addi	sp,sp,8
   119dc:	f800283a 	ret

000119e0 <millis>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 millis( void )
{
   119e0:	defffe04 	addi	sp,sp,-8
   119e4:	dfc00115 	stw	ra,4(sp)
   119e8:	df000015 	stw	fp,0(sp)
   119ec:	d839883a 	mov	fp,sp
	return alt_timestamp()/1000;
   119f0:	00137bc0 	call	137bc <alt_timestamp>
   119f4:	1009883a 	mov	r4,r2
   119f8:	0140fa04 	movi	r5,1000
   119fc:	0011da00 	call	11da0 <__udivsi3>
}
   11a00:	e037883a 	mov	sp,fp
   11a04:	dfc00117 	ldw	ra,4(sp)
   11a08:	df000017 	ldw	fp,0(sp)
   11a0c:	dec00204 	addi	sp,sp,8
   11a10:	f800283a 	ret

00011a14 <micros>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 micros( void )
{
   11a14:	defffe04 	addi	sp,sp,-8
   11a18:	dfc00115 	stw	ra,4(sp)
   11a1c:	df000015 	stw	fp,0(sp)
   11a20:	d839883a 	mov	fp,sp
	return alt_timestamp();
   11a24:	00137bc0 	call	137bc <alt_timestamp>
}
   11a28:	e037883a 	mov	sp,fp
   11a2c:	dfc00117 	ldw	ra,4(sp)
   11a30:	df000017 	ldw	fp,0(sp)
   11a34:	dec00204 	addi	sp,sp,8
   11a38:	f800283a 	ret

00011a3c <delay>:




void delay(volatile unsigned int timeCount)
{
   11a3c:	defffe04 	addi	sp,sp,-8
   11a40:	df000115 	stw	fp,4(sp)
   11a44:	df000104 	addi	fp,sp,4
   11a48:	e13fff15 	stw	r4,-4(fp)
    while(timeCount --);
   11a4c:	0001883a 	nop
   11a50:	e0bfff17 	ldw	r2,-4(fp)
   11a54:	10ffffc4 	addi	r3,r2,-1
   11a58:	e0ffff15 	stw	r3,-4(fp)
   11a5c:	103ffc1e 	bne	r2,zero,11a50 <_gp+0xffff44d0>
}
   11a60:	e037883a 	mov	sp,fp
   11a64:	df000017 	ldw	fp,0(sp)
   11a68:	dec00104 	addi	sp,sp,4
   11a6c:	f800283a 	ret

00011a70 <delay_second>:

void delay_second(void)
{
   11a70:	defffe04 	addi	sp,sp,-8
   11a74:	dfc00115 	stw	ra,4(sp)
   11a78:	df000015 	stw	fp,0(sp)
   11a7c:	d839883a 	mov	fp,sp
    delay(806596);
   11a80:	01000334 	movhi	r4,12
   11a84:	2113b104 	addi	r4,r4,20164
   11a88:	0011a3c0 	call	11a3c <delay>
}
   11a8c:	e037883a 	mov	sp,fp
   11a90:	dfc00117 	ldw	ra,4(sp)
   11a94:	df000017 	ldw	fp,0(sp)
   11a98:	dec00204 	addi	sp,sp,8
   11a9c:	f800283a 	ret

00011aa0 <Uart1_ISR>:




void Uart1_ISR(char Ch)
{
   11aa0:	defffd04 	addi	sp,sp,-12
   11aa4:	dfc00215 	stw	ra,8(sp)
   11aa8:	df000115 	stw	fp,4(sp)
   11aac:	df000104 	addi	fp,sp,4
   11ab0:	2005883a 	mov	r2,r4
   11ab4:	e0bfff05 	stb	r2,-4(fp)
	Lb_printf("Received : %c\n", Ch);
   11ab8:	e0bfff07 	ldb	r2,-4(fp)
   11abc:	01000074 	movhi	r4,1
   11ac0:	21145b04 	addi	r4,r4,20844
   11ac4:	100b883a 	mov	r5,r2
   11ac8:	0011e140 	call	11e14 <printf>
	Hw_Led_Toggle(7);
   11acc:	010001c4 	movi	r4,7
   11ad0:	00118940 	call	11894 <Hw_Led_Toggle>
}
   11ad4:	e037883a 	mov	sp,fp
   11ad8:	dfc00117 	ldw	ra,4(sp)
   11adc:	df000017 	ldw	fp,0(sp)
   11ae0:	dec00204 	addi	sp,sp,8
   11ae4:	f800283a 	ret

00011ae8 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
   11ae8:	defff404 	addi	sp,sp,-48
   11aec:	dfc00b15 	stw	ra,44(sp)
   11af0:	df000a15 	stw	fp,40(sp)
   11af4:	dcc00915 	stw	r19,36(sp)
   11af8:	dc800815 	stw	r18,32(sp)
   11afc:	dc400715 	stw	r17,28(sp)
   11b00:	dc000615 	stw	r16,24(sp)
   11b04:	df000a04 	addi	fp,sp,40
	vu32 Delay;
	u32 i;
	u32 tTimer[2];

	Main_Init();
   11b08:	0011c580 	call	11c58 <Main_Init>


	Lb_printf( "Start\n" );
   11b0c:	01000074 	movhi	r4,1
   11b10:	21145f04 	addi	r4,r4,20860
   11b14:	0011ee00 	call	11ee0 <puts>

	i = 0;
   11b18:	e03ff815 	stw	zero,-32(fp)

	while (1)
	{
		if( (millis()-tTimer[0]) >= 500 )
   11b1c:	00119e00 	call	119e0 <millis>
   11b20:	1007883a 	mov	r3,r2
   11b24:	e0bffa17 	ldw	r2,-24(fp)
   11b28:	1885c83a 	sub	r2,r3,r2
   11b2c:	10807d30 	cmpltui	r2,r2,500
   11b30:	1000041e 	bne	r2,zero,11b44 <main+0x5c>
		{
			tTimer[0] = millis();
   11b34:	00119e00 	call	119e0 <millis>
   11b38:	e0bffa15 	stw	r2,-24(fp)
			Hw_Led_Toggle(0);
   11b3c:	0009883a 	mov	r4,zero
   11b40:	00118940 	call	11894 <Hw_Led_Toggle>
		}

		if( (millis()-tTimer[1]) >= 500 )
   11b44:	00119e00 	call	119e0 <millis>
   11b48:	1007883a 	mov	r3,r2
   11b4c:	e0bffb17 	ldw	r2,-20(fp)
   11b50:	1885c83a 	sub	r2,r3,r2
   11b54:	10807d30 	cmpltui	r2,r2,500
   11b58:	10001b1e 	bne	r2,zero,11bc8 <main+0xe0>
		{
			tTimer[1] = millis();
   11b5c:	00119e00 	call	119e0 <millis>
   11b60:	e0bffb15 	stw	r2,-20(fp)


			IOWR(IP_PWM_0_BASE, 0, 0);
   11b64:	0007883a 	mov	r3,zero
   11b68:	0005883a 	mov	r2,zero
   11b6c:	10c00035 	stwio	r3,0(r2)
			IOWR(IP_PWM_0_BASE, 1, 100);
   11b70:	00c01904 	movi	r3,100
   11b74:	00800104 	movi	r2,4
   11b78:	10c00035 	stwio	r3,0(r2)
			IOWR(IP_PWM_0_BASE, 2, 0);
   11b7c:	0007883a 	mov	r3,zero
   11b80:	00800204 	movi	r2,8
   11b84:	10c00035 	stwio	r3,0(r2)
			IOWR(IP_PWM_0_BASE, 3, 100);
   11b88:	00c01904 	movi	r3,100
   11b8c:	00800304 	movi	r2,12
   11b90:	10c00035 	stwio	r3,0(r2)

			Lb_printf("Pwm : %d %d %d %d\n",
   11b94:	0005883a 	mov	r2,zero
   11b98:	11400037 	ldwio	r5,0(r2)
   11b9c:	00800104 	movi	r2,4
   11ba0:	11800037 	ldwio	r6,0(r2)
   11ba4:	00800204 	movi	r2,8
   11ba8:	10c00037 	ldwio	r3,0(r2)
   11bac:	00800304 	movi	r2,12
   11bb0:	10800037 	ldwio	r2,0(r2)
   11bb4:	d8800015 	stw	r2,0(sp)
   11bb8:	01000074 	movhi	r4,1
   11bbc:	21146104 	addi	r4,r4,20868
   11bc0:	180f883a 	mov	r7,r3
   11bc4:	0011e140 	call	11e14 <printf>


		}


		if( MSP_GetReceived() == TRUE )
   11bc8:	001032c0 	call	1032c <MSP_GetReceived>
   11bcc:	10803fcc 	andi	r2,r2,255
   11bd0:	10800058 	cmpnei	r2,r2,1
   11bd4:	10001f1e 	bne	r2,zero,11c54 <main+0x16c>
		{
			Lb_printf( "MSP Received : %d, R:%d, P:%d, Y:%d, T:%d\n",
					MSP_Get_CmdPtr()->Cmd,
   11bd8:	00105c80 	call	105c8 <MSP_Get_CmdPtr>
   11bdc:	10800003 	ldbu	r2,0(r2)
		}


		if( MSP_GetReceived() == TRUE )
		{
			Lb_printf( "MSP Received : %d, R:%d, P:%d, Y:%d, T:%d\n",
   11be0:	14c03fcc 	andi	r19,r2,255
					MSP_Get_CmdPtr()->Cmd,
					MSP_Get_CmdRcPtr()->Roll,
   11be4:	00106100 	call	10610 <MSP_Get_CmdRcPtr>
   11be8:	1080000b 	ldhu	r2,0(r2)
		}


		if( MSP_GetReceived() == TRUE )
		{
			Lb_printf( "MSP Received : %d, R:%d, P:%d, Y:%d, T:%d\n",
   11bec:	14bfffcc 	andi	r18,r2,65535
   11bf0:	94a0001c 	xori	r18,r18,32768
   11bf4:	94a00004 	addi	r18,r18,-32768
					MSP_Get_CmdPtr()->Cmd,
					MSP_Get_CmdRcPtr()->Roll,
					MSP_Get_CmdRcPtr()->Pitch,
   11bf8:	00106100 	call	10610 <MSP_Get_CmdRcPtr>
   11bfc:	1080008b 	ldhu	r2,2(r2)
		}


		if( MSP_GetReceived() == TRUE )
		{
			Lb_printf( "MSP Received : %d, R:%d, P:%d, Y:%d, T:%d\n",
   11c00:	147fffcc 	andi	r17,r2,65535
   11c04:	8c60001c 	xori	r17,r17,32768
   11c08:	8c600004 	addi	r17,r17,-32768
					MSP_Get_CmdPtr()->Cmd,
					MSP_Get_CmdRcPtr()->Roll,
					MSP_Get_CmdRcPtr()->Pitch,
					MSP_Get_CmdRcPtr()->Yaw,
   11c0c:	00106100 	call	10610 <MSP_Get_CmdRcPtr>
   11c10:	1080010b 	ldhu	r2,4(r2)
		}


		if( MSP_GetReceived() == TRUE )
		{
			Lb_printf( "MSP Received : %d, R:%d, P:%d, Y:%d, T:%d\n",
   11c14:	143fffcc 	andi	r16,r2,65535
   11c18:	8420001c 	xori	r16,r16,32768
   11c1c:	84200004 	addi	r16,r16,-32768
					MSP_Get_CmdPtr()->Cmd,
					MSP_Get_CmdRcPtr()->Roll,
					MSP_Get_CmdRcPtr()->Pitch,
					MSP_Get_CmdRcPtr()->Yaw,
					MSP_Get_CmdRcPtr()->Throthle);
   11c20:	00106100 	call	10610 <MSP_Get_CmdRcPtr>
   11c24:	1080018b 	ldhu	r2,6(r2)
		}


		if( MSP_GetReceived() == TRUE )
		{
			Lb_printf( "MSP Received : %d, R:%d, P:%d, Y:%d, T:%d\n",
   11c28:	10bfffcc 	andi	r2,r2,65535
   11c2c:	10a0001c 	xori	r2,r2,32768
   11c30:	10a00004 	addi	r2,r2,-32768
   11c34:	dc000015 	stw	r16,0(sp)
   11c38:	d8800115 	stw	r2,4(sp)
   11c3c:	01000074 	movhi	r4,1
   11c40:	21146604 	addi	r4,r4,20888
   11c44:	980b883a 	mov	r5,r19
   11c48:	900d883a 	mov	r6,r18
   11c4c:	880f883a 	mov	r7,r17
   11c50:	0011e140 	call	11e14 <printf>
					MSP_Get_CmdRcPtr()->Roll,
					MSP_Get_CmdRcPtr()->Pitch,
					MSP_Get_CmdRcPtr()->Yaw,
					MSP_Get_CmdRcPtr()->Throthle);
		}
	}
   11c54:	003fb106 	br	11b1c <_gp+0xffff459c>

00011c58 <Main_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
   11c58:	defffe04 	addi	sp,sp,-8
   11c5c:	dfc00115 	stw	ra,4(sp)
   11c60:	df000015 	stw	fp,0(sp)
   11c64:	d839883a 	mov	fp,sp
	Hw_Init();
   11c68:	00119340 	call	11934 <Hw_Init>
	Ap_Init();
   11c6c:	00102680 	call	10268 <Ap_Init>
}
   11c70:	e037883a 	mov	sp,fp
   11c74:	dfc00117 	ldw	ra,4(sp)
   11c78:	df000017 	ldw	fp,0(sp)
   11c7c:	dec00204 	addi	sp,sp,8
   11c80:	f800283a 	ret

00011c84 <udivmodsi4>:
   11c84:	2900182e 	bgeu	r5,r4,11ce8 <udivmodsi4+0x64>
   11c88:	28001716 	blt	r5,zero,11ce8 <udivmodsi4+0x64>
   11c8c:	00800804 	movi	r2,32
   11c90:	00c00044 	movi	r3,1
   11c94:	00000206 	br	11ca0 <udivmodsi4+0x1c>
   11c98:	10001126 	beq	r2,zero,11ce0 <udivmodsi4+0x5c>
   11c9c:	28000516 	blt	r5,zero,11cb4 <udivmodsi4+0x30>
   11ca0:	294b883a 	add	r5,r5,r5
   11ca4:	10bfffc4 	addi	r2,r2,-1
   11ca8:	18c7883a 	add	r3,r3,r3
   11cac:	293ffa36 	bltu	r5,r4,11c98 <_gp+0xffff4718>
   11cb0:	18000b26 	beq	r3,zero,11ce0 <udivmodsi4+0x5c>
   11cb4:	0005883a 	mov	r2,zero
   11cb8:	21400236 	bltu	r4,r5,11cc4 <udivmodsi4+0x40>
   11cbc:	2149c83a 	sub	r4,r4,r5
   11cc0:	10c4b03a 	or	r2,r2,r3
   11cc4:	1806d07a 	srli	r3,r3,1
   11cc8:	280ad07a 	srli	r5,r5,1
   11ccc:	183ffa1e 	bne	r3,zero,11cb8 <_gp+0xffff4738>
   11cd0:	3000011e 	bne	r6,zero,11cd8 <udivmodsi4+0x54>
   11cd4:	f800283a 	ret
   11cd8:	2005883a 	mov	r2,r4
   11cdc:	f800283a 	ret
   11ce0:	0005883a 	mov	r2,zero
   11ce4:	003ffa06 	br	11cd0 <_gp+0xffff4750>
   11ce8:	00c00044 	movi	r3,1
   11cec:	003ff106 	br	11cb4 <_gp+0xffff4734>

00011cf0 <__divsi3>:
   11cf0:	defffe04 	addi	sp,sp,-8
   11cf4:	dfc00115 	stw	ra,4(sp)
   11cf8:	dc000015 	stw	r16,0(sp)
   11cfc:	20000b16 	blt	r4,zero,11d2c <__divsi3+0x3c>
   11d00:	0021883a 	mov	r16,zero
   11d04:	28000c16 	blt	r5,zero,11d38 <__divsi3+0x48>
   11d08:	000d883a 	mov	r6,zero
   11d0c:	0011c840 	call	11c84 <udivmodsi4>
   11d10:	0407c83a 	sub	r3,zero,r16
   11d14:	1884f03a 	xor	r2,r3,r2
   11d18:	1405883a 	add	r2,r2,r16
   11d1c:	dfc00117 	ldw	ra,4(sp)
   11d20:	dc000017 	ldw	r16,0(sp)
   11d24:	dec00204 	addi	sp,sp,8
   11d28:	f800283a 	ret
   11d2c:	0109c83a 	sub	r4,zero,r4
   11d30:	04000044 	movi	r16,1
   11d34:	283ff40e 	bge	r5,zero,11d08 <_gp+0xffff4788>
   11d38:	014bc83a 	sub	r5,zero,r5
   11d3c:	8400005c 	xori	r16,r16,1
   11d40:	003ff106 	br	11d08 <_gp+0xffff4788>

00011d44 <__modsi3>:
   11d44:	defffd04 	addi	sp,sp,-12
   11d48:	dfc00215 	stw	ra,8(sp)
   11d4c:	dc400115 	stw	r17,4(sp)
   11d50:	dc000015 	stw	r16,0(sp)
   11d54:	20000c16 	blt	r4,zero,11d88 <__modsi3+0x44>
   11d58:	0023883a 	mov	r17,zero
   11d5c:	0021883a 	mov	r16,zero
   11d60:	28000d16 	blt	r5,zero,11d98 <__modsi3+0x54>
   11d64:	01800044 	movi	r6,1
   11d68:	0011c840 	call	11c84 <udivmodsi4>
   11d6c:	1404f03a 	xor	r2,r2,r16
   11d70:	8885883a 	add	r2,r17,r2
   11d74:	dfc00217 	ldw	ra,8(sp)
   11d78:	dc400117 	ldw	r17,4(sp)
   11d7c:	dc000017 	ldw	r16,0(sp)
   11d80:	dec00304 	addi	sp,sp,12
   11d84:	f800283a 	ret
   11d88:	0109c83a 	sub	r4,zero,r4
   11d8c:	04400044 	movi	r17,1
   11d90:	043fffc4 	movi	r16,-1
   11d94:	283ff30e 	bge	r5,zero,11d64 <_gp+0xffff47e4>
   11d98:	014bc83a 	sub	r5,zero,r5
   11d9c:	003ff106 	br	11d64 <_gp+0xffff47e4>

00011da0 <__udivsi3>:
   11da0:	000d883a 	mov	r6,zero
   11da4:	0011c841 	jmpi	11c84 <udivmodsi4>

00011da8 <__umodsi3>:
   11da8:	01800044 	movi	r6,1
   11dac:	0011c841 	jmpi	11c84 <udivmodsi4>

00011db0 <__mulsi3>:
   11db0:	0005883a 	mov	r2,zero
   11db4:	20000726 	beq	r4,zero,11dd4 <__mulsi3+0x24>
   11db8:	20c0004c 	andi	r3,r4,1
   11dbc:	2008d07a 	srli	r4,r4,1
   11dc0:	18000126 	beq	r3,zero,11dc8 <__mulsi3+0x18>
   11dc4:	1145883a 	add	r2,r2,r5
   11dc8:	294b883a 	add	r5,r5,r5
   11dcc:	203ffa1e 	bne	r4,zero,11db8 <_gp+0xffff4838>
   11dd0:	f800283a 	ret
   11dd4:	f800283a 	ret

00011dd8 <_printf_r>:
   11dd8:	defffd04 	addi	sp,sp,-12
   11ddc:	dfc00015 	stw	ra,0(sp)
   11de0:	d9800115 	stw	r6,4(sp)
   11de4:	d9c00215 	stw	r7,8(sp)
   11de8:	20c00217 	ldw	r3,8(r4)
   11dec:	280d883a 	mov	r6,r5
   11df0:	01400074 	movhi	r5,1
   11df4:	29496304 	addi	r5,r5,9612
   11df8:	19400115 	stw	r5,4(r3)
   11dfc:	21400217 	ldw	r5,8(r4)
   11e00:	d9c00104 	addi	r7,sp,4
   11e04:	0011f7c0 	call	11f7c <___vfprintf_internal_r>
   11e08:	dfc00017 	ldw	ra,0(sp)
   11e0c:	dec00304 	addi	sp,sp,12
   11e10:	f800283a 	ret

00011e14 <printf>:
   11e14:	defffc04 	addi	sp,sp,-16
   11e18:	dfc00015 	stw	ra,0(sp)
   11e1c:	d9400115 	stw	r5,4(sp)
   11e20:	d9800215 	stw	r6,8(sp)
   11e24:	d9c00315 	stw	r7,12(sp)
   11e28:	00800074 	movhi	r2,1
   11e2c:	10956104 	addi	r2,r2,21892
   11e30:	10800017 	ldw	r2,0(r2)
   11e34:	200b883a 	mov	r5,r4
   11e38:	01000074 	movhi	r4,1
   11e3c:	10c00217 	ldw	r3,8(r2)
   11e40:	21096304 	addi	r4,r4,9612
   11e44:	d9800104 	addi	r6,sp,4
   11e48:	19000115 	stw	r4,4(r3)
   11e4c:	11000217 	ldw	r4,8(r2)
   11e50:	00124e80 	call	124e8 <__vfprintf_internal>
   11e54:	dfc00017 	ldw	ra,0(sp)
   11e58:	dec00404 	addi	sp,sp,16
   11e5c:	f800283a 	ret

00011e60 <_puts_r>:
   11e60:	defffd04 	addi	sp,sp,-12
   11e64:	dc000015 	stw	r16,0(sp)
   11e68:	2021883a 	mov	r16,r4
   11e6c:	2809883a 	mov	r4,r5
   11e70:	dfc00215 	stw	ra,8(sp)
   11e74:	dc400115 	stw	r17,4(sp)
   11e78:	2823883a 	mov	r17,r5
   11e7c:	0011ef40 	call	11ef4 <strlen>
   11e80:	81400217 	ldw	r5,8(r16)
   11e84:	00c00074 	movhi	r3,1
   11e88:	18c96304 	addi	r3,r3,9612
   11e8c:	28c00115 	stw	r3,4(r5)
   11e90:	8009883a 	mov	r4,r16
   11e94:	880d883a 	mov	r6,r17
   11e98:	100f883a 	mov	r7,r2
   11e9c:	001258c0 	call	1258c <__sfvwrite_small_dev>
   11ea0:	00ffffc4 	movi	r3,-1
   11ea4:	10c00926 	beq	r2,r3,11ecc <_puts_r+0x6c>
   11ea8:	81400217 	ldw	r5,8(r16)
   11eac:	01800074 	movhi	r6,1
   11eb0:	8009883a 	mov	r4,r16
   11eb4:	28800117 	ldw	r2,4(r5)
   11eb8:	31947104 	addi	r6,r6,20932
   11ebc:	01c00044 	movi	r7,1
   11ec0:	103ee83a 	callr	r2
   11ec4:	10bfffe0 	cmpeqi	r2,r2,-1
   11ec8:	0085c83a 	sub	r2,zero,r2
   11ecc:	dfc00217 	ldw	ra,8(sp)
   11ed0:	dc400117 	ldw	r17,4(sp)
   11ed4:	dc000017 	ldw	r16,0(sp)
   11ed8:	dec00304 	addi	sp,sp,12
   11edc:	f800283a 	ret

00011ee0 <puts>:
   11ee0:	00800074 	movhi	r2,1
   11ee4:	10956104 	addi	r2,r2,21892
   11ee8:	200b883a 	mov	r5,r4
   11eec:	11000017 	ldw	r4,0(r2)
   11ef0:	0011e601 	jmpi	11e60 <_puts_r>

00011ef4 <strlen>:
   11ef4:	2005883a 	mov	r2,r4
   11ef8:	10c00007 	ldb	r3,0(r2)
   11efc:	18000226 	beq	r3,zero,11f08 <strlen+0x14>
   11f00:	10800044 	addi	r2,r2,1
   11f04:	003ffc06 	br	11ef8 <_gp+0xffff4978>
   11f08:	1105c83a 	sub	r2,r2,r4
   11f0c:	f800283a 	ret

00011f10 <print_repeat>:
   11f10:	defffb04 	addi	sp,sp,-20
   11f14:	dc800315 	stw	r18,12(sp)
   11f18:	dc400215 	stw	r17,8(sp)
   11f1c:	dc000115 	stw	r16,4(sp)
   11f20:	dfc00415 	stw	ra,16(sp)
   11f24:	2025883a 	mov	r18,r4
   11f28:	2823883a 	mov	r17,r5
   11f2c:	d9800005 	stb	r6,0(sp)
   11f30:	3821883a 	mov	r16,r7
   11f34:	04000a0e 	bge	zero,r16,11f60 <print_repeat+0x50>
   11f38:	88800117 	ldw	r2,4(r17)
   11f3c:	9009883a 	mov	r4,r18
   11f40:	880b883a 	mov	r5,r17
   11f44:	d80d883a 	mov	r6,sp
   11f48:	01c00044 	movi	r7,1
   11f4c:	103ee83a 	callr	r2
   11f50:	843fffc4 	addi	r16,r16,-1
   11f54:	103ff726 	beq	r2,zero,11f34 <_gp+0xffff49b4>
   11f58:	00bfffc4 	movi	r2,-1
   11f5c:	00000106 	br	11f64 <print_repeat+0x54>
   11f60:	0005883a 	mov	r2,zero
   11f64:	dfc00417 	ldw	ra,16(sp)
   11f68:	dc800317 	ldw	r18,12(sp)
   11f6c:	dc400217 	ldw	r17,8(sp)
   11f70:	dc000117 	ldw	r16,4(sp)
   11f74:	dec00504 	addi	sp,sp,20
   11f78:	f800283a 	ret

00011f7c <___vfprintf_internal_r>:
   11f7c:	deffe304 	addi	sp,sp,-116
   11f80:	d8c00804 	addi	r3,sp,32
   11f84:	df001b15 	stw	fp,108(sp)
   11f88:	ddc01a15 	stw	r23,104(sp)
   11f8c:	dd801915 	stw	r22,100(sp)
   11f90:	dd401815 	stw	r21,96(sp)
   11f94:	dd001715 	stw	r20,92(sp)
   11f98:	dcc01615 	stw	r19,88(sp)
   11f9c:	dc801515 	stw	r18,84(sp)
   11fa0:	dc401415 	stw	r17,80(sp)
   11fa4:	dc001315 	stw	r16,76(sp)
   11fa8:	dfc01c15 	stw	ra,112(sp)
   11fac:	2029883a 	mov	r20,r4
   11fb0:	2823883a 	mov	r17,r5
   11fb4:	3839883a 	mov	fp,r7
   11fb8:	d9800f15 	stw	r6,60(sp)
   11fbc:	0021883a 	mov	r16,zero
   11fc0:	d8000e15 	stw	zero,56(sp)
   11fc4:	002f883a 	mov	r23,zero
   11fc8:	002b883a 	mov	r21,zero
   11fcc:	0027883a 	mov	r19,zero
   11fd0:	0025883a 	mov	r18,zero
   11fd4:	d8000c15 	stw	zero,48(sp)
   11fd8:	d8000b15 	stw	zero,44(sp)
   11fdc:	002d883a 	mov	r22,zero
   11fe0:	d8c00915 	stw	r3,36(sp)
   11fe4:	d8c00f17 	ldw	r3,60(sp)
   11fe8:	19000003 	ldbu	r4,0(r3)
   11fec:	20803fcc 	andi	r2,r4,255
   11ff0:	1080201c 	xori	r2,r2,128
   11ff4:	10bfe004 	addi	r2,r2,-128
   11ff8:	10012e26 	beq	r2,zero,124b4 <___vfprintf_internal_r+0x538>
   11ffc:	01400044 	movi	r5,1
   12000:	b1401426 	beq	r22,r5,12054 <___vfprintf_internal_r+0xd8>
   12004:	2d800216 	blt	r5,r22,12010 <___vfprintf_internal_r+0x94>
   12008:	b0000626 	beq	r22,zero,12024 <___vfprintf_internal_r+0xa8>
   1200c:	00012506 	br	124a4 <___vfprintf_internal_r+0x528>
   12010:	01400084 	movi	r5,2
   12014:	b1401d26 	beq	r22,r5,1208c <___vfprintf_internal_r+0x110>
   12018:	014000c4 	movi	r5,3
   1201c:	b1402b26 	beq	r22,r5,120cc <___vfprintf_internal_r+0x150>
   12020:	00012006 	br	124a4 <___vfprintf_internal_r+0x528>
   12024:	01400944 	movi	r5,37
   12028:	11410d26 	beq	r2,r5,12460 <___vfprintf_internal_r+0x4e4>
   1202c:	88800117 	ldw	r2,4(r17)
   12030:	d9000005 	stb	r4,0(sp)
   12034:	880b883a 	mov	r5,r17
   12038:	a009883a 	mov	r4,r20
   1203c:	d80d883a 	mov	r6,sp
   12040:	01c00044 	movi	r7,1
   12044:	103ee83a 	callr	r2
   12048:	1000e81e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   1204c:	84000044 	addi	r16,r16,1
   12050:	00011406 	br	124a4 <___vfprintf_internal_r+0x528>
   12054:	01400c04 	movi	r5,48
   12058:	11410a26 	beq	r2,r5,12484 <___vfprintf_internal_r+0x508>
   1205c:	01400944 	movi	r5,37
   12060:	11400a1e 	bne	r2,r5,1208c <___vfprintf_internal_r+0x110>
   12064:	d8800005 	stb	r2,0(sp)
   12068:	88800117 	ldw	r2,4(r17)
   1206c:	a009883a 	mov	r4,r20
   12070:	880b883a 	mov	r5,r17
   12074:	d80d883a 	mov	r6,sp
   12078:	b00f883a 	mov	r7,r22
   1207c:	103ee83a 	callr	r2
   12080:	1000da1e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   12084:	84000044 	addi	r16,r16,1
   12088:	00010506 	br	124a0 <___vfprintf_internal_r+0x524>
   1208c:	25bff404 	addi	r22,r4,-48
   12090:	b5803fcc 	andi	r22,r22,255
   12094:	00c00244 	movi	r3,9
   12098:	1d800936 	bltu	r3,r22,120c0 <___vfprintf_internal_r+0x144>
   1209c:	00bfffc4 	movi	r2,-1
   120a0:	90800426 	beq	r18,r2,120b4 <___vfprintf_internal_r+0x138>
   120a4:	9009883a 	mov	r4,r18
   120a8:	01400284 	movi	r5,10
   120ac:	0011db00 	call	11db0 <__mulsi3>
   120b0:	00000106 	br	120b8 <___vfprintf_internal_r+0x13c>
   120b4:	0005883a 	mov	r2,zero
   120b8:	15a5883a 	add	r18,r2,r22
   120bc:	0000f206 	br	12488 <___vfprintf_internal_r+0x50c>
   120c0:	01400b84 	movi	r5,46
   120c4:	1140f426 	beq	r2,r5,12498 <___vfprintf_internal_r+0x51c>
   120c8:	05800084 	movi	r22,2
   120cc:	213ff404 	addi	r4,r4,-48
   120d0:	20c03fcc 	andi	r3,r4,255
   120d4:	01000244 	movi	r4,9
   120d8:	20c00b36 	bltu	r4,r3,12108 <___vfprintf_internal_r+0x18c>
   120dc:	00bfffc4 	movi	r2,-1
   120e0:	98800626 	beq	r19,r2,120fc <___vfprintf_internal_r+0x180>
   120e4:	9809883a 	mov	r4,r19
   120e8:	01400284 	movi	r5,10
   120ec:	d8c01115 	stw	r3,68(sp)
   120f0:	0011db00 	call	11db0 <__mulsi3>
   120f4:	d8c01117 	ldw	r3,68(sp)
   120f8:	00000106 	br	12100 <___vfprintf_internal_r+0x184>
   120fc:	0005883a 	mov	r2,zero
   12100:	10e7883a 	add	r19,r2,r3
   12104:	0000e706 	br	124a4 <___vfprintf_internal_r+0x528>
   12108:	01401b04 	movi	r5,108
   1210c:	1140e026 	beq	r2,r5,12490 <___vfprintf_internal_r+0x514>
   12110:	013fffc4 	movi	r4,-1
   12114:	99000226 	beq	r19,r4,12120 <___vfprintf_internal_r+0x1a4>
   12118:	d8000b15 	stw	zero,44(sp)
   1211c:	00000106 	br	12124 <___vfprintf_internal_r+0x1a8>
   12120:	04c00044 	movi	r19,1
   12124:	01001a44 	movi	r4,105
   12128:	11001626 	beq	r2,r4,12184 <___vfprintf_internal_r+0x208>
   1212c:	20800916 	blt	r4,r2,12154 <___vfprintf_internal_r+0x1d8>
   12130:	010018c4 	movi	r4,99
   12134:	11009626 	beq	r2,r4,12390 <___vfprintf_internal_r+0x414>
   12138:	01001904 	movi	r4,100
   1213c:	11001126 	beq	r2,r4,12184 <___vfprintf_internal_r+0x208>
   12140:	01001604 	movi	r4,88
   12144:	1100d61e 	bne	r2,r4,124a0 <___vfprintf_internal_r+0x524>
   12148:	00c00044 	movi	r3,1
   1214c:	d8c00e15 	stw	r3,56(sp)
   12150:	00001406 	br	121a4 <___vfprintf_internal_r+0x228>
   12154:	01001cc4 	movi	r4,115
   12158:	1100a626 	beq	r2,r4,123f4 <___vfprintf_internal_r+0x478>
   1215c:	20800416 	blt	r4,r2,12170 <___vfprintf_internal_r+0x1f4>
   12160:	01001bc4 	movi	r4,111
   12164:	1100ce1e 	bne	r2,r4,124a0 <___vfprintf_internal_r+0x524>
   12168:	05400204 	movi	r21,8
   1216c:	00000e06 	br	121a8 <___vfprintf_internal_r+0x22c>
   12170:	01001d44 	movi	r4,117
   12174:	11000c26 	beq	r2,r4,121a8 <___vfprintf_internal_r+0x22c>
   12178:	01001e04 	movi	r4,120
   1217c:	11000926 	beq	r2,r4,121a4 <___vfprintf_internal_r+0x228>
   12180:	0000c706 	br	124a0 <___vfprintf_internal_r+0x524>
   12184:	e0800104 	addi	r2,fp,4
   12188:	b8000726 	beq	r23,zero,121a8 <___vfprintf_internal_r+0x22c>
   1218c:	d8800d15 	stw	r2,52(sp)
   12190:	e7000017 	ldw	fp,0(fp)
   12194:	e000080e 	bge	fp,zero,121b8 <___vfprintf_internal_r+0x23c>
   12198:	0739c83a 	sub	fp,zero,fp
   1219c:	02000044 	movi	r8,1
   121a0:	00000606 	br	121bc <___vfprintf_internal_r+0x240>
   121a4:	05400404 	movi	r21,16
   121a8:	e0c00104 	addi	r3,fp,4
   121ac:	d8c00d15 	stw	r3,52(sp)
   121b0:	e7000017 	ldw	fp,0(fp)
   121b4:	002f883a 	mov	r23,zero
   121b8:	0011883a 	mov	r8,zero
   121bc:	002d883a 	mov	r22,zero
   121c0:	dd87883a 	add	r3,sp,r22
   121c4:	e0001a26 	beq	fp,zero,12230 <___vfprintf_internal_r+0x2b4>
   121c8:	e009883a 	mov	r4,fp
   121cc:	a80b883a 	mov	r5,r21
   121d0:	d8c01115 	stw	r3,68(sp)
   121d4:	da001215 	stw	r8,72(sp)
   121d8:	0011da00 	call	11da0 <__udivsi3>
   121dc:	a809883a 	mov	r4,r21
   121e0:	100b883a 	mov	r5,r2
   121e4:	d8801015 	stw	r2,64(sp)
   121e8:	0011db00 	call	11db0 <__mulsi3>
   121ec:	e085c83a 	sub	r2,fp,r2
   121f0:	01000244 	movi	r4,9
   121f4:	d8c01117 	ldw	r3,68(sp)
   121f8:	d9801017 	ldw	r6,64(sp)
   121fc:	da001217 	ldw	r8,72(sp)
   12200:	20800216 	blt	r4,r2,1220c <___vfprintf_internal_r+0x290>
   12204:	17000c04 	addi	fp,r2,48
   12208:	00000506 	br	12220 <___vfprintf_internal_r+0x2a4>
   1220c:	d9400e17 	ldw	r5,56(sp)
   12210:	28000226 	beq	r5,zero,1221c <___vfprintf_internal_r+0x2a0>
   12214:	17000dc4 	addi	fp,r2,55
   12218:	00000106 	br	12220 <___vfprintf_internal_r+0x2a4>
   1221c:	170015c4 	addi	fp,r2,87
   12220:	1f000005 	stb	fp,0(r3)
   12224:	b5800044 	addi	r22,r22,1
   12228:	3039883a 	mov	fp,r6
   1222c:	003fe406 	br	121c0 <_gp+0xffff4c40>
   12230:	1ec5c83a 	sub	r2,r3,sp
   12234:	d8800a15 	stw	r2,40(sp)
   12238:	9885c83a 	sub	r2,r19,r2
   1223c:	1839883a 	mov	fp,r3
   12240:	00800e0e 	bge	zero,r2,1227c <___vfprintf_internal_r+0x300>
   12244:	182d883a 	mov	r22,r3
   12248:	1885883a 	add	r2,r3,r2
   1224c:	01000c04 	movi	r4,48
   12250:	d9400917 	ldw	r5,36(sp)
   12254:	b007883a 	mov	r3,r22
   12258:	b140052e 	bgeu	r22,r5,12270 <___vfprintf_internal_r+0x2f4>
   1225c:	b5800044 	addi	r22,r22,1
   12260:	19000005 	stb	r4,0(r3)
   12264:	b039883a 	mov	fp,r22
   12268:	b0bff91e 	bne	r22,r2,12250 <_gp+0xffff4cd0>
   1226c:	00000106 	br	12274 <___vfprintf_internal_r+0x2f8>
   12270:	b039883a 	mov	fp,r22
   12274:	b6edc83a 	sub	r22,r22,sp
   12278:	dd800a15 	stw	r22,40(sp)
   1227c:	d8800a17 	ldw	r2,40(sp)
   12280:	1207883a 	add	r3,r2,r8
   12284:	90edc83a 	sub	r22,r18,r3
   12288:	d8c00b17 	ldw	r3,44(sp)
   1228c:	18001726 	beq	r3,zero,122ec <___vfprintf_internal_r+0x370>
   12290:	40000a26 	beq	r8,zero,122bc <___vfprintf_internal_r+0x340>
   12294:	00800b44 	movi	r2,45
   12298:	d8800805 	stb	r2,32(sp)
   1229c:	88800117 	ldw	r2,4(r17)
   122a0:	a009883a 	mov	r4,r20
   122a4:	880b883a 	mov	r5,r17
   122a8:	d9800804 	addi	r6,sp,32
   122ac:	01c00044 	movi	r7,1
   122b0:	103ee83a 	callr	r2
   122b4:	10004d1e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   122b8:	84000044 	addi	r16,r16,1
   122bc:	0580070e 	bge	zero,r22,122dc <___vfprintf_internal_r+0x360>
   122c0:	a009883a 	mov	r4,r20
   122c4:	880b883a 	mov	r5,r17
   122c8:	01800c04 	movi	r6,48
   122cc:	b00f883a 	mov	r7,r22
   122d0:	0011f100 	call	11f10 <print_repeat>
   122d4:	1000451e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   122d8:	85a1883a 	add	r16,r16,r22
   122dc:	d9000a17 	ldw	r4,40(sp)
   122e0:	e007883a 	mov	r3,fp
   122e4:	272dc83a 	sub	r22,r4,fp
   122e8:	00002206 	br	12374 <___vfprintf_internal_r+0x3f8>
   122ec:	0580090e 	bge	zero,r22,12314 <___vfprintf_internal_r+0x398>
   122f0:	a009883a 	mov	r4,r20
   122f4:	880b883a 	mov	r5,r17
   122f8:	01800804 	movi	r6,32
   122fc:	b00f883a 	mov	r7,r22
   12300:	da001215 	stw	r8,72(sp)
   12304:	0011f100 	call	11f10 <print_repeat>
   12308:	da001217 	ldw	r8,72(sp)
   1230c:	1000371e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   12310:	85a1883a 	add	r16,r16,r22
   12314:	403ff126 	beq	r8,zero,122dc <_gp+0xffff4d5c>
   12318:	00800b44 	movi	r2,45
   1231c:	d8800805 	stb	r2,32(sp)
   12320:	88800117 	ldw	r2,4(r17)
   12324:	a009883a 	mov	r4,r20
   12328:	880b883a 	mov	r5,r17
   1232c:	d9800804 	addi	r6,sp,32
   12330:	01c00044 	movi	r7,1
   12334:	103ee83a 	callr	r2
   12338:	10002c1e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   1233c:	84000044 	addi	r16,r16,1
   12340:	003fe606 	br	122dc <_gp+0xffff4d5c>
   12344:	18ffffc4 	addi	r3,r3,-1
   12348:	18800003 	ldbu	r2,0(r3)
   1234c:	a009883a 	mov	r4,r20
   12350:	d8c01115 	stw	r3,68(sp)
   12354:	d8800805 	stb	r2,32(sp)
   12358:	88800117 	ldw	r2,4(r17)
   1235c:	880b883a 	mov	r5,r17
   12360:	d9800804 	addi	r6,sp,32
   12364:	01c00044 	movi	r7,1
   12368:	103ee83a 	callr	r2
   1236c:	d8c01117 	ldw	r3,68(sp)
   12370:	10001e1e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   12374:	80c5c83a 	sub	r2,r16,r3
   12378:	1d89883a 	add	r4,r3,r22
   1237c:	e085883a 	add	r2,fp,r2
   12380:	013ff016 	blt	zero,r4,12344 <_gp+0xffff4dc4>
   12384:	1021883a 	mov	r16,r2
   12388:	df000d17 	ldw	fp,52(sp)
   1238c:	00004406 	br	124a0 <___vfprintf_internal_r+0x524>
   12390:	01000044 	movi	r4,1
   12394:	2480080e 	bge	r4,r18,123b8 <___vfprintf_internal_r+0x43c>
   12398:	95bfffc4 	addi	r22,r18,-1
   1239c:	a009883a 	mov	r4,r20
   123a0:	880b883a 	mov	r5,r17
   123a4:	01800804 	movi	r6,32
   123a8:	b00f883a 	mov	r7,r22
   123ac:	0011f100 	call	11f10 <print_repeat>
   123b0:	10000e1e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   123b4:	85a1883a 	add	r16,r16,r22
   123b8:	e0800017 	ldw	r2,0(fp)
   123bc:	a009883a 	mov	r4,r20
   123c0:	880b883a 	mov	r5,r17
   123c4:	d8800005 	stb	r2,0(sp)
   123c8:	88800117 	ldw	r2,4(r17)
   123cc:	d80d883a 	mov	r6,sp
   123d0:	01c00044 	movi	r7,1
   123d4:	e5800104 	addi	r22,fp,4
   123d8:	103ee83a 	callr	r2
   123dc:	1000031e 	bne	r2,zero,123ec <___vfprintf_internal_r+0x470>
   123e0:	84000044 	addi	r16,r16,1
   123e4:	b039883a 	mov	fp,r22
   123e8:	00002d06 	br	124a0 <___vfprintf_internal_r+0x524>
   123ec:	00bfffc4 	movi	r2,-1
   123f0:	00003106 	br	124b8 <___vfprintf_internal_r+0x53c>
   123f4:	e5800017 	ldw	r22,0(fp)
   123f8:	e0c00104 	addi	r3,fp,4
   123fc:	d8c00a15 	stw	r3,40(sp)
   12400:	b009883a 	mov	r4,r22
   12404:	0011ef40 	call	11ef4 <strlen>
   12408:	9091c83a 	sub	r8,r18,r2
   1240c:	1039883a 	mov	fp,r2
   12410:	0200090e 	bge	zero,r8,12438 <___vfprintf_internal_r+0x4bc>
   12414:	400f883a 	mov	r7,r8
   12418:	a009883a 	mov	r4,r20
   1241c:	880b883a 	mov	r5,r17
   12420:	01800804 	movi	r6,32
   12424:	da001215 	stw	r8,72(sp)
   12428:	0011f100 	call	11f10 <print_repeat>
   1242c:	da001217 	ldw	r8,72(sp)
   12430:	103fee1e 	bne	r2,zero,123ec <_gp+0xffff4e6c>
   12434:	8221883a 	add	r16,r16,r8
   12438:	88800117 	ldw	r2,4(r17)
   1243c:	a009883a 	mov	r4,r20
   12440:	880b883a 	mov	r5,r17
   12444:	b00d883a 	mov	r6,r22
   12448:	e00f883a 	mov	r7,fp
   1244c:	103ee83a 	callr	r2
   12450:	103fe61e 	bne	r2,zero,123ec <_gp+0xffff4e6c>
   12454:	8721883a 	add	r16,r16,fp
   12458:	df000a17 	ldw	fp,40(sp)
   1245c:	00001006 	br	124a0 <___vfprintf_internal_r+0x524>
   12460:	05c00044 	movi	r23,1
   12464:	04ffffc4 	movi	r19,-1
   12468:	d8000e15 	stw	zero,56(sp)
   1246c:	05400284 	movi	r21,10
   12470:	9825883a 	mov	r18,r19
   12474:	d8000c15 	stw	zero,48(sp)
   12478:	d8000b15 	stw	zero,44(sp)
   1247c:	b82d883a 	mov	r22,r23
   12480:	00000806 	br	124a4 <___vfprintf_internal_r+0x528>
   12484:	dd800b15 	stw	r22,44(sp)
   12488:	05800084 	movi	r22,2
   1248c:	00000506 	br	124a4 <___vfprintf_internal_r+0x528>
   12490:	00c00044 	movi	r3,1
   12494:	d8c00c15 	stw	r3,48(sp)
   12498:	058000c4 	movi	r22,3
   1249c:	00000106 	br	124a4 <___vfprintf_internal_r+0x528>
   124a0:	002d883a 	mov	r22,zero
   124a4:	d8c00f17 	ldw	r3,60(sp)
   124a8:	18c00044 	addi	r3,r3,1
   124ac:	d8c00f15 	stw	r3,60(sp)
   124b0:	003ecc06 	br	11fe4 <_gp+0xffff4a64>
   124b4:	8005883a 	mov	r2,r16
   124b8:	dfc01c17 	ldw	ra,112(sp)
   124bc:	df001b17 	ldw	fp,108(sp)
   124c0:	ddc01a17 	ldw	r23,104(sp)
   124c4:	dd801917 	ldw	r22,100(sp)
   124c8:	dd401817 	ldw	r21,96(sp)
   124cc:	dd001717 	ldw	r20,92(sp)
   124d0:	dcc01617 	ldw	r19,88(sp)
   124d4:	dc801517 	ldw	r18,84(sp)
   124d8:	dc401417 	ldw	r17,80(sp)
   124dc:	dc001317 	ldw	r16,76(sp)
   124e0:	dec01d04 	addi	sp,sp,116
   124e4:	f800283a 	ret

000124e8 <__vfprintf_internal>:
   124e8:	2007883a 	mov	r3,r4
   124ec:	01000074 	movhi	r4,1
   124f0:	21156104 	addi	r4,r4,21892
   124f4:	21000017 	ldw	r4,0(r4)
   124f8:	2805883a 	mov	r2,r5
   124fc:	300f883a 	mov	r7,r6
   12500:	180b883a 	mov	r5,r3
   12504:	100d883a 	mov	r6,r2
   12508:	0011f7c1 	jmpi	11f7c <___vfprintf_internal_r>

0001250c <_vsprintf_r>:
   1250c:	defff804 	addi	sp,sp,-32
   12510:	00808204 	movi	r2,520
   12514:	d880000d 	sth	r2,0(sp)
   12518:	00a00034 	movhi	r2,32768
   1251c:	10bfffc4 	addi	r2,r2,-1
   12520:	d8800515 	stw	r2,20(sp)
   12524:	d8800315 	stw	r2,12(sp)
   12528:	00bfffc4 	movi	r2,-1
   1252c:	d880008d 	sth	r2,2(sp)
   12530:	00800074 	movhi	r2,1
   12534:	d9400415 	stw	r5,16(sp)
   12538:	d9400215 	stw	r5,8(sp)
   1253c:	10898e04 	addi	r2,r2,9784
   12540:	d80b883a 	mov	r5,sp
   12544:	dfc00715 	stw	ra,28(sp)
   12548:	d8800115 	stw	r2,4(sp)
   1254c:	d8000615 	stw	zero,24(sp)
   12550:	00127a00 	call	127a0 <___svfprintf_internal_r>
   12554:	d8c00417 	ldw	r3,16(sp)
   12558:	18000005 	stb	zero,0(r3)
   1255c:	dfc00717 	ldw	ra,28(sp)
   12560:	dec00804 	addi	sp,sp,32
   12564:	f800283a 	ret

00012568 <vsprintf>:
   12568:	2007883a 	mov	r3,r4
   1256c:	01000074 	movhi	r4,1
   12570:	21156104 	addi	r4,r4,21892
   12574:	21000017 	ldw	r4,0(r4)
   12578:	2805883a 	mov	r2,r5
   1257c:	300f883a 	mov	r7,r6
   12580:	180b883a 	mov	r5,r3
   12584:	100d883a 	mov	r6,r2
   12588:	001250c1 	jmpi	1250c <_vsprintf_r>

0001258c <__sfvwrite_small_dev>:
   1258c:	2880000b 	ldhu	r2,0(r5)
   12590:	defffa04 	addi	sp,sp,-24
   12594:	dc000015 	stw	r16,0(sp)
   12598:	dfc00515 	stw	ra,20(sp)
   1259c:	dd000415 	stw	r20,16(sp)
   125a0:	dcc00315 	stw	r19,12(sp)
   125a4:	dc800215 	stw	r18,8(sp)
   125a8:	dc400115 	stw	r17,4(sp)
   125ac:	1080020c 	andi	r2,r2,8
   125b0:	2821883a 	mov	r16,r5
   125b4:	10001726 	beq	r2,zero,12614 <__sfvwrite_small_dev+0x88>
   125b8:	2880008f 	ldh	r2,2(r5)
   125bc:	10001216 	blt	r2,zero,12608 <__sfvwrite_small_dev+0x7c>
   125c0:	2027883a 	mov	r19,r4
   125c4:	3025883a 	mov	r18,r6
   125c8:	3823883a 	mov	r17,r7
   125cc:	05010004 	movi	r20,1024
   125d0:	04400b0e 	bge	zero,r17,12600 <__sfvwrite_small_dev+0x74>
   125d4:	8140008f 	ldh	r5,2(r16)
   125d8:	880f883a 	mov	r7,r17
   125dc:	a440010e 	bge	r20,r17,125e4 <__sfvwrite_small_dev+0x58>
   125e0:	01c10004 	movi	r7,1024
   125e4:	9809883a 	mov	r4,r19
   125e8:	900d883a 	mov	r6,r18
   125ec:	0012d300 	call	12d30 <_write_r>
   125f0:	0080050e 	bge	zero,r2,12608 <__sfvwrite_small_dev+0x7c>
   125f4:	88a3c83a 	sub	r17,r17,r2
   125f8:	90a5883a 	add	r18,r18,r2
   125fc:	003ff406 	br	125d0 <_gp+0xffff5050>
   12600:	0005883a 	mov	r2,zero
   12604:	00000406 	br	12618 <__sfvwrite_small_dev+0x8c>
   12608:	8080000b 	ldhu	r2,0(r16)
   1260c:	10801014 	ori	r2,r2,64
   12610:	8080000d 	sth	r2,0(r16)
   12614:	00bfffc4 	movi	r2,-1
   12618:	dfc00517 	ldw	ra,20(sp)
   1261c:	dd000417 	ldw	r20,16(sp)
   12620:	dcc00317 	ldw	r19,12(sp)
   12624:	dc800217 	ldw	r18,8(sp)
   12628:	dc400117 	ldw	r17,4(sp)
   1262c:	dc000017 	ldw	r16,0(sp)
   12630:	dec00604 	addi	sp,sp,24
   12634:	f800283a 	ret

00012638 <__sfvwrite_small_str>:
   12638:	2880000b 	ldhu	r2,0(r5)
   1263c:	defffd04 	addi	sp,sp,-12
   12640:	dc000015 	stw	r16,0(sp)
   12644:	dfc00215 	stw	ra,8(sp)
   12648:	dc400115 	stw	r17,4(sp)
   1264c:	10c0020c 	andi	r3,r2,8
   12650:	2821883a 	mov	r16,r5
   12654:	18001926 	beq	r3,zero,126bc <__sfvwrite_small_str+0x84>
   12658:	28c0008f 	ldh	r3,2(r5)
   1265c:	1800150e 	bge	r3,zero,126b4 <__sfvwrite_small_str+0x7c>
   12660:	10c0800c 	andi	r3,r2,512
   12664:	18001326 	beq	r3,zero,126b4 <__sfvwrite_small_str+0x7c>
   12668:	2c400517 	ldw	r17,20(r5)
   1266c:	89c0030e 	bge	r17,r7,1267c <__sfvwrite_small_str+0x44>
   12670:	10c0200c 	andi	r3,r2,128
   12674:	18000326 	beq	r3,zero,12684 <__sfvwrite_small_str+0x4c>
   12678:	00000e06 	br	126b4 <__sfvwrite_small_str+0x7c>
   1267c:	3c40010e 	bge	r7,r17,12684 <__sfvwrite_small_str+0x4c>
   12680:	3823883a 	mov	r17,r7
   12684:	81000417 	ldw	r4,16(r16)
   12688:	300b883a 	mov	r5,r6
   1268c:	880d883a 	mov	r6,r17
   12690:	00126d40 	call	126d4 <memmove>
   12694:	80800517 	ldw	r2,20(r16)
   12698:	1445c83a 	sub	r2,r2,r17
   1269c:	80800515 	stw	r2,20(r16)
   126a0:	80800417 	ldw	r2,16(r16)
   126a4:	1463883a 	add	r17,r2,r17
   126a8:	84400415 	stw	r17,16(r16)
   126ac:	0005883a 	mov	r2,zero
   126b0:	00000306 	br	126c0 <__sfvwrite_small_str+0x88>
   126b4:	10801014 	ori	r2,r2,64
   126b8:	8080000d 	sth	r2,0(r16)
   126bc:	00bfffc4 	movi	r2,-1
   126c0:	dfc00217 	ldw	ra,8(sp)
   126c4:	dc400117 	ldw	r17,4(sp)
   126c8:	dc000017 	ldw	r16,0(sp)
   126cc:	dec00304 	addi	sp,sp,12
   126d0:	f800283a 	ret

000126d4 <memmove>:
   126d4:	2005883a 	mov	r2,r4
   126d8:	29000d2e 	bgeu	r5,r4,12710 <memmove+0x3c>
   126dc:	298f883a 	add	r7,r5,r6
   126e0:	21c00b2e 	bgeu	r4,r7,12710 <memmove+0x3c>
   126e4:	3007883a 	mov	r3,r6
   126e8:	017fffc4 	movi	r5,-1
   126ec:	18ffffc4 	addi	r3,r3,-1
   126f0:	19400626 	beq	r3,r5,1270c <memmove+0x38>
   126f4:	1989c83a 	sub	r4,r3,r6
   126f8:	3909883a 	add	r4,r7,r4
   126fc:	22000003 	ldbu	r8,0(r4)
   12700:	10c9883a 	add	r4,r2,r3
   12704:	22000005 	stb	r8,0(r4)
   12708:	003ff806 	br	126ec <_gp+0xffff516c>
   1270c:	f800283a 	ret
   12710:	0007883a 	mov	r3,zero
   12714:	19800626 	beq	r3,r6,12730 <memmove+0x5c>
   12718:	28c9883a 	add	r4,r5,r3
   1271c:	21c00003 	ldbu	r7,0(r4)
   12720:	10c9883a 	add	r4,r2,r3
   12724:	18c00044 	addi	r3,r3,1
   12728:	21c00005 	stb	r7,0(r4)
   1272c:	003ff906 	br	12714 <_gp+0xffff5194>
   12730:	f800283a 	ret

00012734 <print_repeat>:
   12734:	defffb04 	addi	sp,sp,-20
   12738:	dc800315 	stw	r18,12(sp)
   1273c:	dc400215 	stw	r17,8(sp)
   12740:	dc000115 	stw	r16,4(sp)
   12744:	dfc00415 	stw	ra,16(sp)
   12748:	2025883a 	mov	r18,r4
   1274c:	2823883a 	mov	r17,r5
   12750:	d9800005 	stb	r6,0(sp)
   12754:	3821883a 	mov	r16,r7
   12758:	04000a0e 	bge	zero,r16,12784 <print_repeat+0x50>
   1275c:	88800117 	ldw	r2,4(r17)
   12760:	9009883a 	mov	r4,r18
   12764:	880b883a 	mov	r5,r17
   12768:	d80d883a 	mov	r6,sp
   1276c:	01c00044 	movi	r7,1
   12770:	103ee83a 	callr	r2
   12774:	843fffc4 	addi	r16,r16,-1
   12778:	103ff726 	beq	r2,zero,12758 <_gp+0xffff51d8>
   1277c:	00bfffc4 	movi	r2,-1
   12780:	00000106 	br	12788 <print_repeat+0x54>
   12784:	0005883a 	mov	r2,zero
   12788:	dfc00417 	ldw	ra,16(sp)
   1278c:	dc800317 	ldw	r18,12(sp)
   12790:	dc400217 	ldw	r17,8(sp)
   12794:	dc000117 	ldw	r16,4(sp)
   12798:	dec00504 	addi	sp,sp,20
   1279c:	f800283a 	ret

000127a0 <___svfprintf_internal_r>:
   127a0:	deffe304 	addi	sp,sp,-116
   127a4:	d8c00804 	addi	r3,sp,32
   127a8:	df001b15 	stw	fp,108(sp)
   127ac:	ddc01a15 	stw	r23,104(sp)
   127b0:	dd801915 	stw	r22,100(sp)
   127b4:	dd401815 	stw	r21,96(sp)
   127b8:	dd001715 	stw	r20,92(sp)
   127bc:	dcc01615 	stw	r19,88(sp)
   127c0:	dc801515 	stw	r18,84(sp)
   127c4:	dc401415 	stw	r17,80(sp)
   127c8:	dc001315 	stw	r16,76(sp)
   127cc:	dfc01c15 	stw	ra,112(sp)
   127d0:	2029883a 	mov	r20,r4
   127d4:	2823883a 	mov	r17,r5
   127d8:	3839883a 	mov	fp,r7
   127dc:	d9800f15 	stw	r6,60(sp)
   127e0:	0021883a 	mov	r16,zero
   127e4:	d8000e15 	stw	zero,56(sp)
   127e8:	002f883a 	mov	r23,zero
   127ec:	002b883a 	mov	r21,zero
   127f0:	0027883a 	mov	r19,zero
   127f4:	0025883a 	mov	r18,zero
   127f8:	d8000c15 	stw	zero,48(sp)
   127fc:	d8000b15 	stw	zero,44(sp)
   12800:	002d883a 	mov	r22,zero
   12804:	d8c00915 	stw	r3,36(sp)
   12808:	d8c00f17 	ldw	r3,60(sp)
   1280c:	19000003 	ldbu	r4,0(r3)
   12810:	20803fcc 	andi	r2,r4,255
   12814:	1080201c 	xori	r2,r2,128
   12818:	10bfe004 	addi	r2,r2,-128
   1281c:	10012e26 	beq	r2,zero,12cd8 <___svfprintf_internal_r+0x538>
   12820:	01400044 	movi	r5,1
   12824:	b1401426 	beq	r22,r5,12878 <___svfprintf_internal_r+0xd8>
   12828:	2d800216 	blt	r5,r22,12834 <___svfprintf_internal_r+0x94>
   1282c:	b0000626 	beq	r22,zero,12848 <___svfprintf_internal_r+0xa8>
   12830:	00012506 	br	12cc8 <___svfprintf_internal_r+0x528>
   12834:	01400084 	movi	r5,2
   12838:	b1401d26 	beq	r22,r5,128b0 <___svfprintf_internal_r+0x110>
   1283c:	014000c4 	movi	r5,3
   12840:	b1402b26 	beq	r22,r5,128f0 <___svfprintf_internal_r+0x150>
   12844:	00012006 	br	12cc8 <___svfprintf_internal_r+0x528>
   12848:	01400944 	movi	r5,37
   1284c:	11410d26 	beq	r2,r5,12c84 <___svfprintf_internal_r+0x4e4>
   12850:	88800117 	ldw	r2,4(r17)
   12854:	d9000005 	stb	r4,0(sp)
   12858:	880b883a 	mov	r5,r17
   1285c:	a009883a 	mov	r4,r20
   12860:	d80d883a 	mov	r6,sp
   12864:	01c00044 	movi	r7,1
   12868:	103ee83a 	callr	r2
   1286c:	1000e81e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12870:	84000044 	addi	r16,r16,1
   12874:	00011406 	br	12cc8 <___svfprintf_internal_r+0x528>
   12878:	01400c04 	movi	r5,48
   1287c:	11410a26 	beq	r2,r5,12ca8 <___svfprintf_internal_r+0x508>
   12880:	01400944 	movi	r5,37
   12884:	11400a1e 	bne	r2,r5,128b0 <___svfprintf_internal_r+0x110>
   12888:	d8800005 	stb	r2,0(sp)
   1288c:	88800117 	ldw	r2,4(r17)
   12890:	a009883a 	mov	r4,r20
   12894:	880b883a 	mov	r5,r17
   12898:	d80d883a 	mov	r6,sp
   1289c:	b00f883a 	mov	r7,r22
   128a0:	103ee83a 	callr	r2
   128a4:	1000da1e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   128a8:	84000044 	addi	r16,r16,1
   128ac:	00010506 	br	12cc4 <___svfprintf_internal_r+0x524>
   128b0:	25bff404 	addi	r22,r4,-48
   128b4:	b5803fcc 	andi	r22,r22,255
   128b8:	00c00244 	movi	r3,9
   128bc:	1d800936 	bltu	r3,r22,128e4 <___svfprintf_internal_r+0x144>
   128c0:	00bfffc4 	movi	r2,-1
   128c4:	90800426 	beq	r18,r2,128d8 <___svfprintf_internal_r+0x138>
   128c8:	9009883a 	mov	r4,r18
   128cc:	01400284 	movi	r5,10
   128d0:	0011db00 	call	11db0 <__mulsi3>
   128d4:	00000106 	br	128dc <___svfprintf_internal_r+0x13c>
   128d8:	0005883a 	mov	r2,zero
   128dc:	15a5883a 	add	r18,r2,r22
   128e0:	0000f206 	br	12cac <___svfprintf_internal_r+0x50c>
   128e4:	01400b84 	movi	r5,46
   128e8:	1140f426 	beq	r2,r5,12cbc <___svfprintf_internal_r+0x51c>
   128ec:	05800084 	movi	r22,2
   128f0:	213ff404 	addi	r4,r4,-48
   128f4:	20c03fcc 	andi	r3,r4,255
   128f8:	01000244 	movi	r4,9
   128fc:	20c00b36 	bltu	r4,r3,1292c <___svfprintf_internal_r+0x18c>
   12900:	00bfffc4 	movi	r2,-1
   12904:	98800626 	beq	r19,r2,12920 <___svfprintf_internal_r+0x180>
   12908:	9809883a 	mov	r4,r19
   1290c:	01400284 	movi	r5,10
   12910:	d8c01115 	stw	r3,68(sp)
   12914:	0011db00 	call	11db0 <__mulsi3>
   12918:	d8c01117 	ldw	r3,68(sp)
   1291c:	00000106 	br	12924 <___svfprintf_internal_r+0x184>
   12920:	0005883a 	mov	r2,zero
   12924:	10e7883a 	add	r19,r2,r3
   12928:	0000e706 	br	12cc8 <___svfprintf_internal_r+0x528>
   1292c:	01401b04 	movi	r5,108
   12930:	1140e026 	beq	r2,r5,12cb4 <___svfprintf_internal_r+0x514>
   12934:	013fffc4 	movi	r4,-1
   12938:	99000226 	beq	r19,r4,12944 <___svfprintf_internal_r+0x1a4>
   1293c:	d8000b15 	stw	zero,44(sp)
   12940:	00000106 	br	12948 <___svfprintf_internal_r+0x1a8>
   12944:	04c00044 	movi	r19,1
   12948:	01001a44 	movi	r4,105
   1294c:	11001626 	beq	r2,r4,129a8 <___svfprintf_internal_r+0x208>
   12950:	20800916 	blt	r4,r2,12978 <___svfprintf_internal_r+0x1d8>
   12954:	010018c4 	movi	r4,99
   12958:	11009626 	beq	r2,r4,12bb4 <___svfprintf_internal_r+0x414>
   1295c:	01001904 	movi	r4,100
   12960:	11001126 	beq	r2,r4,129a8 <___svfprintf_internal_r+0x208>
   12964:	01001604 	movi	r4,88
   12968:	1100d61e 	bne	r2,r4,12cc4 <___svfprintf_internal_r+0x524>
   1296c:	00c00044 	movi	r3,1
   12970:	d8c00e15 	stw	r3,56(sp)
   12974:	00001406 	br	129c8 <___svfprintf_internal_r+0x228>
   12978:	01001cc4 	movi	r4,115
   1297c:	1100a626 	beq	r2,r4,12c18 <___svfprintf_internal_r+0x478>
   12980:	20800416 	blt	r4,r2,12994 <___svfprintf_internal_r+0x1f4>
   12984:	01001bc4 	movi	r4,111
   12988:	1100ce1e 	bne	r2,r4,12cc4 <___svfprintf_internal_r+0x524>
   1298c:	05400204 	movi	r21,8
   12990:	00000e06 	br	129cc <___svfprintf_internal_r+0x22c>
   12994:	01001d44 	movi	r4,117
   12998:	11000c26 	beq	r2,r4,129cc <___svfprintf_internal_r+0x22c>
   1299c:	01001e04 	movi	r4,120
   129a0:	11000926 	beq	r2,r4,129c8 <___svfprintf_internal_r+0x228>
   129a4:	0000c706 	br	12cc4 <___svfprintf_internal_r+0x524>
   129a8:	e0800104 	addi	r2,fp,4
   129ac:	b8000726 	beq	r23,zero,129cc <___svfprintf_internal_r+0x22c>
   129b0:	d8800d15 	stw	r2,52(sp)
   129b4:	e7000017 	ldw	fp,0(fp)
   129b8:	e000080e 	bge	fp,zero,129dc <___svfprintf_internal_r+0x23c>
   129bc:	0739c83a 	sub	fp,zero,fp
   129c0:	02000044 	movi	r8,1
   129c4:	00000606 	br	129e0 <___svfprintf_internal_r+0x240>
   129c8:	05400404 	movi	r21,16
   129cc:	e0c00104 	addi	r3,fp,4
   129d0:	d8c00d15 	stw	r3,52(sp)
   129d4:	e7000017 	ldw	fp,0(fp)
   129d8:	002f883a 	mov	r23,zero
   129dc:	0011883a 	mov	r8,zero
   129e0:	002d883a 	mov	r22,zero
   129e4:	dd87883a 	add	r3,sp,r22
   129e8:	e0001a26 	beq	fp,zero,12a54 <___svfprintf_internal_r+0x2b4>
   129ec:	e009883a 	mov	r4,fp
   129f0:	a80b883a 	mov	r5,r21
   129f4:	d8c01115 	stw	r3,68(sp)
   129f8:	da001215 	stw	r8,72(sp)
   129fc:	0011da00 	call	11da0 <__udivsi3>
   12a00:	a809883a 	mov	r4,r21
   12a04:	100b883a 	mov	r5,r2
   12a08:	d8801015 	stw	r2,64(sp)
   12a0c:	0011db00 	call	11db0 <__mulsi3>
   12a10:	e085c83a 	sub	r2,fp,r2
   12a14:	01000244 	movi	r4,9
   12a18:	d8c01117 	ldw	r3,68(sp)
   12a1c:	d9801017 	ldw	r6,64(sp)
   12a20:	da001217 	ldw	r8,72(sp)
   12a24:	20800216 	blt	r4,r2,12a30 <___svfprintf_internal_r+0x290>
   12a28:	17000c04 	addi	fp,r2,48
   12a2c:	00000506 	br	12a44 <___svfprintf_internal_r+0x2a4>
   12a30:	d9400e17 	ldw	r5,56(sp)
   12a34:	28000226 	beq	r5,zero,12a40 <___svfprintf_internal_r+0x2a0>
   12a38:	17000dc4 	addi	fp,r2,55
   12a3c:	00000106 	br	12a44 <___svfprintf_internal_r+0x2a4>
   12a40:	170015c4 	addi	fp,r2,87
   12a44:	1f000005 	stb	fp,0(r3)
   12a48:	b5800044 	addi	r22,r22,1
   12a4c:	3039883a 	mov	fp,r6
   12a50:	003fe406 	br	129e4 <_gp+0xffff5464>
   12a54:	1ec5c83a 	sub	r2,r3,sp
   12a58:	d8800a15 	stw	r2,40(sp)
   12a5c:	9885c83a 	sub	r2,r19,r2
   12a60:	1839883a 	mov	fp,r3
   12a64:	00800e0e 	bge	zero,r2,12aa0 <___svfprintf_internal_r+0x300>
   12a68:	182d883a 	mov	r22,r3
   12a6c:	1885883a 	add	r2,r3,r2
   12a70:	01000c04 	movi	r4,48
   12a74:	d9400917 	ldw	r5,36(sp)
   12a78:	b007883a 	mov	r3,r22
   12a7c:	b140052e 	bgeu	r22,r5,12a94 <___svfprintf_internal_r+0x2f4>
   12a80:	b5800044 	addi	r22,r22,1
   12a84:	19000005 	stb	r4,0(r3)
   12a88:	b039883a 	mov	fp,r22
   12a8c:	b0bff91e 	bne	r22,r2,12a74 <_gp+0xffff54f4>
   12a90:	00000106 	br	12a98 <___svfprintf_internal_r+0x2f8>
   12a94:	b039883a 	mov	fp,r22
   12a98:	b6edc83a 	sub	r22,r22,sp
   12a9c:	dd800a15 	stw	r22,40(sp)
   12aa0:	d8800a17 	ldw	r2,40(sp)
   12aa4:	1207883a 	add	r3,r2,r8
   12aa8:	90edc83a 	sub	r22,r18,r3
   12aac:	d8c00b17 	ldw	r3,44(sp)
   12ab0:	18001726 	beq	r3,zero,12b10 <___svfprintf_internal_r+0x370>
   12ab4:	40000a26 	beq	r8,zero,12ae0 <___svfprintf_internal_r+0x340>
   12ab8:	00800b44 	movi	r2,45
   12abc:	d8800805 	stb	r2,32(sp)
   12ac0:	88800117 	ldw	r2,4(r17)
   12ac4:	a009883a 	mov	r4,r20
   12ac8:	880b883a 	mov	r5,r17
   12acc:	d9800804 	addi	r6,sp,32
   12ad0:	01c00044 	movi	r7,1
   12ad4:	103ee83a 	callr	r2
   12ad8:	10004d1e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12adc:	84000044 	addi	r16,r16,1
   12ae0:	0580070e 	bge	zero,r22,12b00 <___svfprintf_internal_r+0x360>
   12ae4:	a009883a 	mov	r4,r20
   12ae8:	880b883a 	mov	r5,r17
   12aec:	01800c04 	movi	r6,48
   12af0:	b00f883a 	mov	r7,r22
   12af4:	00127340 	call	12734 <print_repeat>
   12af8:	1000451e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12afc:	85a1883a 	add	r16,r16,r22
   12b00:	d9000a17 	ldw	r4,40(sp)
   12b04:	e007883a 	mov	r3,fp
   12b08:	272dc83a 	sub	r22,r4,fp
   12b0c:	00002206 	br	12b98 <___svfprintf_internal_r+0x3f8>
   12b10:	0580090e 	bge	zero,r22,12b38 <___svfprintf_internal_r+0x398>
   12b14:	a009883a 	mov	r4,r20
   12b18:	880b883a 	mov	r5,r17
   12b1c:	01800804 	movi	r6,32
   12b20:	b00f883a 	mov	r7,r22
   12b24:	da001215 	stw	r8,72(sp)
   12b28:	00127340 	call	12734 <print_repeat>
   12b2c:	da001217 	ldw	r8,72(sp)
   12b30:	1000371e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12b34:	85a1883a 	add	r16,r16,r22
   12b38:	403ff126 	beq	r8,zero,12b00 <_gp+0xffff5580>
   12b3c:	00800b44 	movi	r2,45
   12b40:	d8800805 	stb	r2,32(sp)
   12b44:	88800117 	ldw	r2,4(r17)
   12b48:	a009883a 	mov	r4,r20
   12b4c:	880b883a 	mov	r5,r17
   12b50:	d9800804 	addi	r6,sp,32
   12b54:	01c00044 	movi	r7,1
   12b58:	103ee83a 	callr	r2
   12b5c:	10002c1e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12b60:	84000044 	addi	r16,r16,1
   12b64:	003fe606 	br	12b00 <_gp+0xffff5580>
   12b68:	18ffffc4 	addi	r3,r3,-1
   12b6c:	18800003 	ldbu	r2,0(r3)
   12b70:	a009883a 	mov	r4,r20
   12b74:	d8c01115 	stw	r3,68(sp)
   12b78:	d8800805 	stb	r2,32(sp)
   12b7c:	88800117 	ldw	r2,4(r17)
   12b80:	880b883a 	mov	r5,r17
   12b84:	d9800804 	addi	r6,sp,32
   12b88:	01c00044 	movi	r7,1
   12b8c:	103ee83a 	callr	r2
   12b90:	d8c01117 	ldw	r3,68(sp)
   12b94:	10001e1e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12b98:	80c5c83a 	sub	r2,r16,r3
   12b9c:	1d89883a 	add	r4,r3,r22
   12ba0:	e085883a 	add	r2,fp,r2
   12ba4:	013ff016 	blt	zero,r4,12b68 <_gp+0xffff55e8>
   12ba8:	1021883a 	mov	r16,r2
   12bac:	df000d17 	ldw	fp,52(sp)
   12bb0:	00004406 	br	12cc4 <___svfprintf_internal_r+0x524>
   12bb4:	01000044 	movi	r4,1
   12bb8:	2480080e 	bge	r4,r18,12bdc <___svfprintf_internal_r+0x43c>
   12bbc:	95bfffc4 	addi	r22,r18,-1
   12bc0:	a009883a 	mov	r4,r20
   12bc4:	880b883a 	mov	r5,r17
   12bc8:	01800804 	movi	r6,32
   12bcc:	b00f883a 	mov	r7,r22
   12bd0:	00127340 	call	12734 <print_repeat>
   12bd4:	10000e1e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12bd8:	85a1883a 	add	r16,r16,r22
   12bdc:	e0800017 	ldw	r2,0(fp)
   12be0:	a009883a 	mov	r4,r20
   12be4:	880b883a 	mov	r5,r17
   12be8:	d8800005 	stb	r2,0(sp)
   12bec:	88800117 	ldw	r2,4(r17)
   12bf0:	d80d883a 	mov	r6,sp
   12bf4:	01c00044 	movi	r7,1
   12bf8:	e5800104 	addi	r22,fp,4
   12bfc:	103ee83a 	callr	r2
   12c00:	1000031e 	bne	r2,zero,12c10 <___svfprintf_internal_r+0x470>
   12c04:	84000044 	addi	r16,r16,1
   12c08:	b039883a 	mov	fp,r22
   12c0c:	00002d06 	br	12cc4 <___svfprintf_internal_r+0x524>
   12c10:	00bfffc4 	movi	r2,-1
   12c14:	00003106 	br	12cdc <___svfprintf_internal_r+0x53c>
   12c18:	e5800017 	ldw	r22,0(fp)
   12c1c:	e0c00104 	addi	r3,fp,4
   12c20:	d8c00a15 	stw	r3,40(sp)
   12c24:	b009883a 	mov	r4,r22
   12c28:	0011ef40 	call	11ef4 <strlen>
   12c2c:	9091c83a 	sub	r8,r18,r2
   12c30:	1039883a 	mov	fp,r2
   12c34:	0200090e 	bge	zero,r8,12c5c <___svfprintf_internal_r+0x4bc>
   12c38:	400f883a 	mov	r7,r8
   12c3c:	a009883a 	mov	r4,r20
   12c40:	880b883a 	mov	r5,r17
   12c44:	01800804 	movi	r6,32
   12c48:	da001215 	stw	r8,72(sp)
   12c4c:	00127340 	call	12734 <print_repeat>
   12c50:	da001217 	ldw	r8,72(sp)
   12c54:	103fee1e 	bne	r2,zero,12c10 <_gp+0xffff5690>
   12c58:	8221883a 	add	r16,r16,r8
   12c5c:	88800117 	ldw	r2,4(r17)
   12c60:	a009883a 	mov	r4,r20
   12c64:	880b883a 	mov	r5,r17
   12c68:	b00d883a 	mov	r6,r22
   12c6c:	e00f883a 	mov	r7,fp
   12c70:	103ee83a 	callr	r2
   12c74:	103fe61e 	bne	r2,zero,12c10 <_gp+0xffff5690>
   12c78:	8721883a 	add	r16,r16,fp
   12c7c:	df000a17 	ldw	fp,40(sp)
   12c80:	00001006 	br	12cc4 <___svfprintf_internal_r+0x524>
   12c84:	05c00044 	movi	r23,1
   12c88:	04ffffc4 	movi	r19,-1
   12c8c:	d8000e15 	stw	zero,56(sp)
   12c90:	05400284 	movi	r21,10
   12c94:	9825883a 	mov	r18,r19
   12c98:	d8000c15 	stw	zero,48(sp)
   12c9c:	d8000b15 	stw	zero,44(sp)
   12ca0:	b82d883a 	mov	r22,r23
   12ca4:	00000806 	br	12cc8 <___svfprintf_internal_r+0x528>
   12ca8:	dd800b15 	stw	r22,44(sp)
   12cac:	05800084 	movi	r22,2
   12cb0:	00000506 	br	12cc8 <___svfprintf_internal_r+0x528>
   12cb4:	00c00044 	movi	r3,1
   12cb8:	d8c00c15 	stw	r3,48(sp)
   12cbc:	058000c4 	movi	r22,3
   12cc0:	00000106 	br	12cc8 <___svfprintf_internal_r+0x528>
   12cc4:	002d883a 	mov	r22,zero
   12cc8:	d8c00f17 	ldw	r3,60(sp)
   12ccc:	18c00044 	addi	r3,r3,1
   12cd0:	d8c00f15 	stw	r3,60(sp)
   12cd4:	003ecc06 	br	12808 <_gp+0xffff5288>
   12cd8:	8005883a 	mov	r2,r16
   12cdc:	dfc01c17 	ldw	ra,112(sp)
   12ce0:	df001b17 	ldw	fp,108(sp)
   12ce4:	ddc01a17 	ldw	r23,104(sp)
   12ce8:	dd801917 	ldw	r22,100(sp)
   12cec:	dd401817 	ldw	r21,96(sp)
   12cf0:	dd001717 	ldw	r20,92(sp)
   12cf4:	dcc01617 	ldw	r19,88(sp)
   12cf8:	dc801517 	ldw	r18,84(sp)
   12cfc:	dc401417 	ldw	r17,80(sp)
   12d00:	dc001317 	ldw	r16,76(sp)
   12d04:	dec01d04 	addi	sp,sp,116
   12d08:	f800283a 	ret

00012d0c <__vfprintf_internal_unused>:
   12d0c:	2007883a 	mov	r3,r4
   12d10:	01000074 	movhi	r4,1
   12d14:	21156104 	addi	r4,r4,21892
   12d18:	21000017 	ldw	r4,0(r4)
   12d1c:	2805883a 	mov	r2,r5
   12d20:	300f883a 	mov	r7,r6
   12d24:	180b883a 	mov	r5,r3
   12d28:	100d883a 	mov	r6,r2
   12d2c:	00127a01 	jmpi	127a0 <___svfprintf_internal_r>

00012d30 <_write_r>:
   12d30:	defffd04 	addi	sp,sp,-12
   12d34:	dc000015 	stw	r16,0(sp)
   12d38:	04000074 	movhi	r16,1
   12d3c:	dc400115 	stw	r17,4(sp)
   12d40:	84165d04 	addi	r16,r16,22900
   12d44:	2023883a 	mov	r17,r4
   12d48:	2809883a 	mov	r4,r5
   12d4c:	300b883a 	mov	r5,r6
   12d50:	380d883a 	mov	r6,r7
   12d54:	dfc00215 	stw	ra,8(sp)
   12d58:	80000015 	stw	zero,0(r16)
   12d5c:	00132040 	call	13204 <write>
   12d60:	00ffffc4 	movi	r3,-1
   12d64:	10c0031e 	bne	r2,r3,12d74 <_write_r+0x44>
   12d68:	80c00017 	ldw	r3,0(r16)
   12d6c:	18000126 	beq	r3,zero,12d74 <_write_r+0x44>
   12d70:	88c00015 	stw	r3,0(r17)
   12d74:	dfc00217 	ldw	ra,8(sp)
   12d78:	dc400117 	ldw	r17,4(sp)
   12d7c:	dc000017 	ldw	r16,0(sp)
   12d80:	dec00304 	addi	sp,sp,12
   12d84:	f800283a 	ret

00012d88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12d88:	defff904 	addi	sp,sp,-28
   12d8c:	dfc00615 	stw	ra,24(sp)
   12d90:	df000515 	stw	fp,20(sp)
   12d94:	df000504 	addi	fp,sp,20
   12d98:	e13ffc15 	stw	r4,-16(fp)
   12d9c:	e17ffd15 	stw	r5,-12(fp)
   12da0:	e1bffe15 	stw	r6,-8(fp)
   12da4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12da8:	e0800217 	ldw	r2,8(fp)
   12dac:	d8800015 	stw	r2,0(sp)
   12db0:	e13ffc17 	ldw	r4,-16(fp)
   12db4:	e17ffd17 	ldw	r5,-12(fp)
   12db8:	e1bffe17 	ldw	r6,-8(fp)
   12dbc:	e1ffff17 	ldw	r7,-4(fp)
   12dc0:	0012f680 	call	12f68 <alt_iic_isr_register>
}  
   12dc4:	e037883a 	mov	sp,fp
   12dc8:	dfc00117 	ldw	ra,4(sp)
   12dcc:	df000017 	ldw	fp,0(sp)
   12dd0:	dec00204 	addi	sp,sp,8
   12dd4:	f800283a 	ret

00012dd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12dd8:	defff904 	addi	sp,sp,-28
   12ddc:	df000615 	stw	fp,24(sp)
   12de0:	df000604 	addi	fp,sp,24
   12de4:	e13ffe15 	stw	r4,-8(fp)
   12de8:	e17fff15 	stw	r5,-4(fp)
   12dec:	e0bfff17 	ldw	r2,-4(fp)
   12df0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12df4:	0005303a 	rdctl	r2,status
   12df8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12dfc:	e0fffb17 	ldw	r3,-20(fp)
   12e00:	00bfff84 	movi	r2,-2
   12e04:	1884703a 	and	r2,r3,r2
   12e08:	1001703a 	wrctl	status,r2
  
  return context;
   12e0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12e10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12e14:	e0bffa17 	ldw	r2,-24(fp)
   12e18:	00c00044 	movi	r3,1
   12e1c:	1884983a 	sll	r2,r3,r2
   12e20:	1007883a 	mov	r3,r2
   12e24:	00800074 	movhi	r2,1
   12e28:	10965e04 	addi	r2,r2,22904
   12e2c:	10800017 	ldw	r2,0(r2)
   12e30:	1886b03a 	or	r3,r3,r2
   12e34:	00800074 	movhi	r2,1
   12e38:	10965e04 	addi	r2,r2,22904
   12e3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12e40:	00800074 	movhi	r2,1
   12e44:	10965e04 	addi	r2,r2,22904
   12e48:	10800017 	ldw	r2,0(r2)
   12e4c:	100170fa 	wrctl	ienable,r2
   12e50:	e0bffc17 	ldw	r2,-16(fp)
   12e54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e58:	e0bffd17 	ldw	r2,-12(fp)
   12e5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12e60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12e64:	0001883a 	nop
}
   12e68:	e037883a 	mov	sp,fp
   12e6c:	df000017 	ldw	fp,0(sp)
   12e70:	dec00104 	addi	sp,sp,4
   12e74:	f800283a 	ret

00012e78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12e78:	defff904 	addi	sp,sp,-28
   12e7c:	df000615 	stw	fp,24(sp)
   12e80:	df000604 	addi	fp,sp,24
   12e84:	e13ffe15 	stw	r4,-8(fp)
   12e88:	e17fff15 	stw	r5,-4(fp)
   12e8c:	e0bfff17 	ldw	r2,-4(fp)
   12e90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e94:	0005303a 	rdctl	r2,status
   12e98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e9c:	e0fffb17 	ldw	r3,-20(fp)
   12ea0:	00bfff84 	movi	r2,-2
   12ea4:	1884703a 	and	r2,r3,r2
   12ea8:	1001703a 	wrctl	status,r2
  
  return context;
   12eac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12eb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12eb4:	e0bffa17 	ldw	r2,-24(fp)
   12eb8:	00c00044 	movi	r3,1
   12ebc:	1884983a 	sll	r2,r3,r2
   12ec0:	0084303a 	nor	r2,zero,r2
   12ec4:	1007883a 	mov	r3,r2
   12ec8:	00800074 	movhi	r2,1
   12ecc:	10965e04 	addi	r2,r2,22904
   12ed0:	10800017 	ldw	r2,0(r2)
   12ed4:	1886703a 	and	r3,r3,r2
   12ed8:	00800074 	movhi	r2,1
   12edc:	10965e04 	addi	r2,r2,22904
   12ee0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12ee4:	00800074 	movhi	r2,1
   12ee8:	10965e04 	addi	r2,r2,22904
   12eec:	10800017 	ldw	r2,0(r2)
   12ef0:	100170fa 	wrctl	ienable,r2
   12ef4:	e0bffc17 	ldw	r2,-16(fp)
   12ef8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12efc:	e0bffd17 	ldw	r2,-12(fp)
   12f00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12f04:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   12f08:	0001883a 	nop
}
   12f0c:	e037883a 	mov	sp,fp
   12f10:	df000017 	ldw	fp,0(sp)
   12f14:	dec00104 	addi	sp,sp,4
   12f18:	f800283a 	ret

00012f1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12f1c:	defffc04 	addi	sp,sp,-16
   12f20:	df000315 	stw	fp,12(sp)
   12f24:	df000304 	addi	fp,sp,12
   12f28:	e13ffe15 	stw	r4,-8(fp)
   12f2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   12f30:	000530fa 	rdctl	r2,ienable
   12f34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12f38:	e0bfff17 	ldw	r2,-4(fp)
   12f3c:	00c00044 	movi	r3,1
   12f40:	1884983a 	sll	r2,r3,r2
   12f44:	1007883a 	mov	r3,r2
   12f48:	e0bffd17 	ldw	r2,-12(fp)
   12f4c:	1884703a 	and	r2,r3,r2
   12f50:	1004c03a 	cmpne	r2,r2,zero
   12f54:	10803fcc 	andi	r2,r2,255
}
   12f58:	e037883a 	mov	sp,fp
   12f5c:	df000017 	ldw	fp,0(sp)
   12f60:	dec00104 	addi	sp,sp,4
   12f64:	f800283a 	ret

00012f68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12f68:	defff504 	addi	sp,sp,-44
   12f6c:	dfc00a15 	stw	ra,40(sp)
   12f70:	df000915 	stw	fp,36(sp)
   12f74:	df000904 	addi	fp,sp,36
   12f78:	e13ffc15 	stw	r4,-16(fp)
   12f7c:	e17ffd15 	stw	r5,-12(fp)
   12f80:	e1bffe15 	stw	r6,-8(fp)
   12f84:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12f88:	00bffa84 	movi	r2,-22
   12f8c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12f90:	e0bffd17 	ldw	r2,-12(fp)
   12f94:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12f98:	e0bff817 	ldw	r2,-32(fp)
   12f9c:	10800808 	cmpgei	r2,r2,32
   12fa0:	1000271e 	bne	r2,zero,13040 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fa4:	0005303a 	rdctl	r2,status
   12fa8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fac:	e0fffa17 	ldw	r3,-24(fp)
   12fb0:	00bfff84 	movi	r2,-2
   12fb4:	1884703a 	and	r2,r3,r2
   12fb8:	1001703a 	wrctl	status,r2
  
  return context;
   12fbc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12fc0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   12fc4:	00800074 	movhi	r2,1
   12fc8:	10970e04 	addi	r2,r2,23608
   12fcc:	e0fff817 	ldw	r3,-32(fp)
   12fd0:	180690fa 	slli	r3,r3,3
   12fd4:	10c5883a 	add	r2,r2,r3
   12fd8:	e0fffe17 	ldw	r3,-8(fp)
   12fdc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   12fe0:	00800074 	movhi	r2,1
   12fe4:	10970e04 	addi	r2,r2,23608
   12fe8:	e0fff817 	ldw	r3,-32(fp)
   12fec:	180690fa 	slli	r3,r3,3
   12ff0:	18c00104 	addi	r3,r3,4
   12ff4:	10c5883a 	add	r2,r2,r3
   12ff8:	e0ffff17 	ldw	r3,-4(fp)
   12ffc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13000:	e0bffe17 	ldw	r2,-8(fp)
   13004:	10000526 	beq	r2,zero,1301c <alt_iic_isr_register+0xb4>
   13008:	e0bff817 	ldw	r2,-32(fp)
   1300c:	e13ffc17 	ldw	r4,-16(fp)
   13010:	100b883a 	mov	r5,r2
   13014:	0012dd80 	call	12dd8 <alt_ic_irq_enable>
   13018:	00000406 	br	1302c <alt_iic_isr_register+0xc4>
   1301c:	e0bff817 	ldw	r2,-32(fp)
   13020:	e13ffc17 	ldw	r4,-16(fp)
   13024:	100b883a 	mov	r5,r2
   13028:	0012e780 	call	12e78 <alt_ic_irq_disable>
   1302c:	e0bff715 	stw	r2,-36(fp)
   13030:	e0bff917 	ldw	r2,-28(fp)
   13034:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13038:	e0bffb17 	ldw	r2,-20(fp)
   1303c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13040:	e0bff717 	ldw	r2,-36(fp)
}
   13044:	e037883a 	mov	sp,fp
   13048:	dfc00117 	ldw	ra,4(sp)
   1304c:	df000017 	ldw	fp,0(sp)
   13050:	dec00204 	addi	sp,sp,8
   13054:	f800283a 	ret

00013058 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13058:	defffc04 	addi	sp,sp,-16
   1305c:	df000315 	stw	fp,12(sp)
   13060:	df000304 	addi	fp,sp,12
   13064:	e13ffd15 	stw	r4,-12(fp)
   13068:	e17ffe15 	stw	r5,-8(fp)
   1306c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13070:	e0fffe17 	ldw	r3,-8(fp)
   13074:	e0bffd17 	ldw	r2,-12(fp)
   13078:	18800c26 	beq	r3,r2,130ac <alt_load_section+0x54>
  {
    while( to != end )
   1307c:	00000806 	br	130a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13080:	e0bffe17 	ldw	r2,-8(fp)
   13084:	10c00104 	addi	r3,r2,4
   13088:	e0fffe15 	stw	r3,-8(fp)
   1308c:	e0fffd17 	ldw	r3,-12(fp)
   13090:	19000104 	addi	r4,r3,4
   13094:	e13ffd15 	stw	r4,-12(fp)
   13098:	18c00017 	ldw	r3,0(r3)
   1309c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   130a0:	e0fffe17 	ldw	r3,-8(fp)
   130a4:	e0bfff17 	ldw	r2,-4(fp)
   130a8:	18bff51e 	bne	r3,r2,13080 <_gp+0xffff5b00>
    {
      *to++ = *from++;
    }
  }
}
   130ac:	e037883a 	mov	sp,fp
   130b0:	df000017 	ldw	fp,0(sp)
   130b4:	dec00104 	addi	sp,sp,4
   130b8:	f800283a 	ret

000130bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   130bc:	defffe04 	addi	sp,sp,-8
   130c0:	dfc00115 	stw	ra,4(sp)
   130c4:	df000015 	stw	fp,0(sp)
   130c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   130cc:	01000074 	movhi	r4,1
   130d0:	21156b04 	addi	r4,r4,21932
   130d4:	01400074 	movhi	r5,1
   130d8:	29548204 	addi	r5,r5,21000
   130dc:	01800074 	movhi	r6,1
   130e0:	31956b04 	addi	r6,r6,21932
   130e4:	00130580 	call	13058 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   130e8:	01000074 	movhi	r4,1
   130ec:	21000804 	addi	r4,r4,32
   130f0:	01400074 	movhi	r5,1
   130f4:	29400804 	addi	r5,r5,32
   130f8:	01800074 	movhi	r6,1
   130fc:	31808b04 	addi	r6,r6,556
   13100:	00130580 	call	13058 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13104:	01000074 	movhi	r4,1
   13108:	21145b04 	addi	r4,r4,20844
   1310c:	01400074 	movhi	r5,1
   13110:	29545b04 	addi	r5,r5,20844
   13114:	01800074 	movhi	r6,1
   13118:	31948204 	addi	r6,r6,21000
   1311c:	00130580 	call	13058 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13120:	001428c0 	call	1428c <alt_dcache_flush_all>
  alt_icache_flush_all();
   13124:	00144800 	call	14480 <alt_icache_flush_all>
}
   13128:	e037883a 	mov	sp,fp
   1312c:	dfc00117 	ldw	ra,4(sp)
   13130:	df000017 	ldw	fp,0(sp)
   13134:	dec00204 	addi	sp,sp,8
   13138:	f800283a 	ret

0001313c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1313c:	defffd04 	addi	sp,sp,-12
   13140:	dfc00215 	stw	ra,8(sp)
   13144:	df000115 	stw	fp,4(sp)
   13148:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1314c:	0009883a 	mov	r4,zero
   13150:	001333c0 	call	1333c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13154:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13158:	00133700 	call	13370 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1315c:	01000074 	movhi	r4,1
   13160:	21147204 	addi	r4,r4,20936
   13164:	01400074 	movhi	r5,1
   13168:	29547204 	addi	r5,r5,20936
   1316c:	01800074 	movhi	r6,1
   13170:	31947204 	addi	r6,r6,20936
   13174:	00146180 	call	14618 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13178:	00143c80 	call	143c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1317c:	01000074 	movhi	r4,1
   13180:	21110904 	addi	r4,r4,17444
   13184:	0014de80 	call	14de8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13188:	d120ff17 	ldw	r4,-31748(gp)
   1318c:	d0e10017 	ldw	r3,-31744(gp)
   13190:	d0a10117 	ldw	r2,-31740(gp)
   13194:	180b883a 	mov	r5,r3
   13198:	100d883a 	mov	r6,r2
   1319c:	0011ae80 	call	11ae8 <main>
   131a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   131a4:	01000044 	movi	r4,1
   131a8:	00141b40 	call	141b4 <close>
  exit (result);
   131ac:	e13fff17 	ldw	r4,-4(fp)
   131b0:	0014dfc0 	call	14dfc <exit>

000131b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131b4:	defffe04 	addi	sp,sp,-8
   131b8:	dfc00115 	stw	ra,4(sp)
   131bc:	df000015 	stw	fp,0(sp)
   131c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131c4:	00800074 	movhi	r2,1
   131c8:	10956804 	addi	r2,r2,21920
   131cc:	10800017 	ldw	r2,0(r2)
   131d0:	10000526 	beq	r2,zero,131e8 <alt_get_errno+0x34>
   131d4:	00800074 	movhi	r2,1
   131d8:	10956804 	addi	r2,r2,21920
   131dc:	10800017 	ldw	r2,0(r2)
   131e0:	103ee83a 	callr	r2
   131e4:	00000206 	br	131f0 <alt_get_errno+0x3c>
   131e8:	00800074 	movhi	r2,1
   131ec:	10965d04 	addi	r2,r2,22900
}
   131f0:	e037883a 	mov	sp,fp
   131f4:	dfc00117 	ldw	ra,4(sp)
   131f8:	df000017 	ldw	fp,0(sp)
   131fc:	dec00204 	addi	sp,sp,8
   13200:	f800283a 	ret

00013204 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13204:	defff904 	addi	sp,sp,-28
   13208:	dfc00615 	stw	ra,24(sp)
   1320c:	df000515 	stw	fp,20(sp)
   13210:	df000504 	addi	fp,sp,20
   13214:	e13ffd15 	stw	r4,-12(fp)
   13218:	e17ffe15 	stw	r5,-8(fp)
   1321c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13220:	e0bffd17 	ldw	r2,-12(fp)
   13224:	10000816 	blt	r2,zero,13248 <write+0x44>
   13228:	e13ffd17 	ldw	r4,-12(fp)
   1322c:	01400304 	movi	r5,12
   13230:	0011db00 	call	11db0 <__mulsi3>
   13234:	1007883a 	mov	r3,r2
   13238:	00800074 	movhi	r2,1
   1323c:	10950004 	addi	r2,r2,21504
   13240:	1885883a 	add	r2,r3,r2
   13244:	00000106 	br	1324c <write+0x48>
   13248:	0005883a 	mov	r2,zero
   1324c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13250:	e0bffb17 	ldw	r2,-20(fp)
   13254:	10002126 	beq	r2,zero,132dc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13258:	e0bffb17 	ldw	r2,-20(fp)
   1325c:	10800217 	ldw	r2,8(r2)
   13260:	108000cc 	andi	r2,r2,3
   13264:	10001826 	beq	r2,zero,132c8 <write+0xc4>
   13268:	e0bffb17 	ldw	r2,-20(fp)
   1326c:	10800017 	ldw	r2,0(r2)
   13270:	10800617 	ldw	r2,24(r2)
   13274:	10001426 	beq	r2,zero,132c8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13278:	e0bffb17 	ldw	r2,-20(fp)
   1327c:	10800017 	ldw	r2,0(r2)
   13280:	10800617 	ldw	r2,24(r2)
   13284:	e0ffff17 	ldw	r3,-4(fp)
   13288:	e13ffb17 	ldw	r4,-20(fp)
   1328c:	e17ffe17 	ldw	r5,-8(fp)
   13290:	180d883a 	mov	r6,r3
   13294:	103ee83a 	callr	r2
   13298:	e0bffc15 	stw	r2,-16(fp)
   1329c:	e0bffc17 	ldw	r2,-16(fp)
   132a0:	1000070e 	bge	r2,zero,132c0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   132a4:	00131b40 	call	131b4 <alt_get_errno>
   132a8:	1007883a 	mov	r3,r2
   132ac:	e0bffc17 	ldw	r2,-16(fp)
   132b0:	0085c83a 	sub	r2,zero,r2
   132b4:	18800015 	stw	r2,0(r3)
        return -1;
   132b8:	00bfffc4 	movi	r2,-1
   132bc:	00000c06 	br	132f0 <write+0xec>
      }
      return rval;
   132c0:	e0bffc17 	ldw	r2,-16(fp)
   132c4:	00000a06 	br	132f0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   132c8:	00131b40 	call	131b4 <alt_get_errno>
   132cc:	1007883a 	mov	r3,r2
   132d0:	00800344 	movi	r2,13
   132d4:	18800015 	stw	r2,0(r3)
   132d8:	00000406 	br	132ec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   132dc:	00131b40 	call	131b4 <alt_get_errno>
   132e0:	1007883a 	mov	r3,r2
   132e4:	00801444 	movi	r2,81
   132e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   132ec:	00bfffc4 	movi	r2,-1
}
   132f0:	e037883a 	mov	sp,fp
   132f4:	dfc00117 	ldw	ra,4(sp)
   132f8:	df000017 	ldw	fp,0(sp)
   132fc:	dec00204 	addi	sp,sp,8
   13300:	f800283a 	ret

00013304 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13304:	defffd04 	addi	sp,sp,-12
   13308:	dfc00215 	stw	ra,8(sp)
   1330c:	df000115 	stw	fp,4(sp)
   13310:	df000104 	addi	fp,sp,4
   13314:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13318:	e13fff17 	ldw	r4,-4(fp)
   1331c:	01400074 	movhi	r5,1
   13320:	29556504 	addi	r5,r5,21908
   13324:	00143240 	call	14324 <alt_dev_llist_insert>
}
   13328:	e037883a 	mov	sp,fp
   1332c:	dfc00117 	ldw	ra,4(sp)
   13330:	df000017 	ldw	fp,0(sp)
   13334:	dec00204 	addi	sp,sp,8
   13338:	f800283a 	ret

0001333c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1333c:	defffd04 	addi	sp,sp,-12
   13340:	dfc00215 	stw	ra,8(sp)
   13344:	df000115 	stw	fp,4(sp)
   13348:	df000104 	addi	fp,sp,4
   1334c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   13350:	0014b500 	call	14b50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13354:	00800044 	movi	r2,1
   13358:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1335c:	e037883a 	mov	sp,fp
   13360:	dfc00117 	ldw	ra,4(sp)
   13364:	df000017 	ldw	fp,0(sp)
   13368:	dec00204 	addi	sp,sp,8
   1336c:	f800283a 	ret

00013370 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13370:	defffe04 	addi	sp,sp,-8
   13374:	dfc00115 	stw	ra,4(sp)
   13378:	df000015 	stw	fp,0(sp)
   1337c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_ms);
   13380:	010000b4 	movhi	r4,2
   13384:	21061804 	addi	r4,r4,6240
   13388:	000b883a 	mov	r5,zero
   1338c:	018000c4 	movi	r6,3
   13390:	01c0fa04 	movi	r7,1000
   13394:	00136ac0 	call	136ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_US, timer_us);
   13398:	00800074 	movhi	r2,1
   1339c:	10966204 	addi	r2,r2,22920
   133a0:	00c000b4 	movhi	r3,2
   133a4:	18c62004 	addi	r3,r3,6272
   133a8:	10c00015 	stw	r3,0(r2)
   133ac:	00800074 	movhi	r2,1
   133b0:	10966304 	addi	r2,r2,22924
   133b4:	00c003f4 	movhi	r3,15
   133b8:	18d09004 	addi	r3,r3,16960
   133bc:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   133c0:	01000074 	movhi	r4,1
   133c4:	2114ba04 	addi	r4,r4,21224
   133c8:	00133040 	call	13304 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   133cc:	01000074 	movhi	r4,1
   133d0:	2114cf04 	addi	r4,r4,21308
   133d4:	000b883a 	mov	r5,zero
   133d8:	01800044 	movi	r6,1
   133dc:	00139840 	call	13984 <altera_avalon_uart_init>
   133e0:	01000074 	movhi	r4,1
   133e4:	2114c504 	addi	r4,r4,21268
   133e8:	00133040 	call	13304 <alt_dev_reg>
}
   133ec:	e037883a 	mov	sp,fp
   133f0:	dfc00117 	ldw	ra,4(sp)
   133f4:	df000017 	ldw	fp,0(sp)
   133f8:	dec00204 	addi	sp,sp,8
   133fc:	f800283a 	ret

00013400 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13400:	defffa04 	addi	sp,sp,-24
   13404:	dfc00515 	stw	ra,20(sp)
   13408:	df000415 	stw	fp,16(sp)
   1340c:	df000404 	addi	fp,sp,16
   13410:	e13ffd15 	stw	r4,-12(fp)
   13414:	e17ffe15 	stw	r5,-8(fp)
   13418:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1341c:	e0bffd17 	ldw	r2,-12(fp)
   13420:	10800017 	ldw	r2,0(r2)
   13424:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13428:	e0bffc17 	ldw	r2,-16(fp)
   1342c:	10c00a04 	addi	r3,r2,40
   13430:	e0bffd17 	ldw	r2,-12(fp)
   13434:	10800217 	ldw	r2,8(r2)
   13438:	1809883a 	mov	r4,r3
   1343c:	e17ffe17 	ldw	r5,-8(fp)
   13440:	e1bfff17 	ldw	r6,-4(fp)
   13444:	100f883a 	mov	r7,r2
   13448:	00134c00 	call	134c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1344c:	e037883a 	mov	sp,fp
   13450:	dfc00117 	ldw	ra,4(sp)
   13454:	df000017 	ldw	fp,0(sp)
   13458:	dec00204 	addi	sp,sp,8
   1345c:	f800283a 	ret

00013460 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13460:	defffa04 	addi	sp,sp,-24
   13464:	dfc00515 	stw	ra,20(sp)
   13468:	df000415 	stw	fp,16(sp)
   1346c:	df000404 	addi	fp,sp,16
   13470:	e13ffd15 	stw	r4,-12(fp)
   13474:	e17ffe15 	stw	r5,-8(fp)
   13478:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1347c:	e0bffd17 	ldw	r2,-12(fp)
   13480:	10800017 	ldw	r2,0(r2)
   13484:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13488:	e0bffc17 	ldw	r2,-16(fp)
   1348c:	10c00a04 	addi	r3,r2,40
   13490:	e0bffd17 	ldw	r2,-12(fp)
   13494:	10800217 	ldw	r2,8(r2)
   13498:	1809883a 	mov	r4,r3
   1349c:	e17ffe17 	ldw	r5,-8(fp)
   134a0:	e1bfff17 	ldw	r6,-4(fp)
   134a4:	100f883a 	mov	r7,r2
   134a8:	00135a40 	call	135a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   134ac:	e037883a 	mov	sp,fp
   134b0:	dfc00117 	ldw	ra,4(sp)
   134b4:	df000017 	ldw	fp,0(sp)
   134b8:	dec00204 	addi	sp,sp,8
   134bc:	f800283a 	ret

000134c0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   134c0:	defff704 	addi	sp,sp,-36
   134c4:	df000815 	stw	fp,32(sp)
   134c8:	df000804 	addi	fp,sp,32
   134cc:	e13ffc15 	stw	r4,-16(fp)
   134d0:	e17ffd15 	stw	r5,-12(fp)
   134d4:	e1bffe15 	stw	r6,-8(fp)
   134d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   134dc:	e0bffc17 	ldw	r2,-16(fp)
   134e0:	10800017 	ldw	r2,0(r2)
   134e4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   134e8:	e0bffd17 	ldw	r2,-12(fp)
   134ec:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   134f0:	e0bffe17 	ldw	r2,-8(fp)
   134f4:	e0fffd17 	ldw	r3,-12(fp)
   134f8:	1885883a 	add	r2,r3,r2
   134fc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   13500:	00001406 	br	13554 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13504:	e0bff917 	ldw	r2,-28(fp)
   13508:	10800037 	ldwio	r2,0(r2)
   1350c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   13510:	e0bffb17 	ldw	r2,-20(fp)
   13514:	10a0000c 	andi	r2,r2,32768
   13518:	10000626 	beq	r2,zero,13534 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1351c:	e0bff817 	ldw	r2,-32(fp)
   13520:	10c00044 	addi	r3,r2,1
   13524:	e0fff815 	stw	r3,-32(fp)
   13528:	e0fffb17 	ldw	r3,-20(fp)
   1352c:	10c00005 	stb	r3,0(r2)
   13530:	00000806 	br	13554 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   13534:	e0fff817 	ldw	r3,-32(fp)
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	18800126 	beq	r3,r2,13544 <altera_avalon_jtag_uart_read+0x84>
      break;
   13540:	00000706 	br	13560 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   13544:	e0bfff17 	ldw	r2,-4(fp)
   13548:	1090000c 	andi	r2,r2,16384
   1354c:	10000126 	beq	r2,zero,13554 <altera_avalon_jtag_uart_read+0x94>
      break;   
   13550:	00000306 	br	13560 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   13554:	e0fff817 	ldw	r3,-32(fp)
   13558:	e0bffa17 	ldw	r2,-24(fp)
   1355c:	18bfe936 	bltu	r3,r2,13504 <_gp+0xffff5f84>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   13560:	e0fff817 	ldw	r3,-32(fp)
   13564:	e0bffd17 	ldw	r2,-12(fp)
   13568:	18800426 	beq	r3,r2,1357c <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   1356c:	e0fff817 	ldw	r3,-32(fp)
   13570:	e0bffd17 	ldw	r2,-12(fp)
   13574:	1885c83a 	sub	r2,r3,r2
   13578:	00000606 	br	13594 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   1357c:	e0bfff17 	ldw	r2,-4(fp)
   13580:	1090000c 	andi	r2,r2,16384
   13584:	10000226 	beq	r2,zero,13590 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   13588:	00bffd44 	movi	r2,-11
   1358c:	00000106 	br	13594 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   13590:	00bffec4 	movi	r2,-5
}
   13594:	e037883a 	mov	sp,fp
   13598:	df000017 	ldw	fp,0(sp)
   1359c:	dec00104 	addi	sp,sp,4
   135a0:	f800283a 	ret

000135a4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   135a4:	defff904 	addi	sp,sp,-28
   135a8:	df000615 	stw	fp,24(sp)
   135ac:	df000604 	addi	fp,sp,24
   135b0:	e13ffc15 	stw	r4,-16(fp)
   135b4:	e17ffd15 	stw	r5,-12(fp)
   135b8:	e1bffe15 	stw	r6,-8(fp)
   135bc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   135c0:	e0bffc17 	ldw	r2,-16(fp)
   135c4:	10800017 	ldw	r2,0(r2)
   135c8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   135cc:	e0bffe17 	ldw	r2,-8(fp)
   135d0:	e0fffd17 	ldw	r3,-12(fp)
   135d4:	1885883a 	add	r2,r3,r2
   135d8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   135dc:	00000e06 	br	13618 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   135e0:	e0bffa17 	ldw	r2,-24(fp)
   135e4:	10800104 	addi	r2,r2,4
   135e8:	10800037 	ldwio	r2,0(r2)
   135ec:	10bfffec 	andhi	r2,r2,65535
   135f0:	10000926 	beq	r2,zero,13618 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   135f4:	e0fffa17 	ldw	r3,-24(fp)
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	11000044 	addi	r4,r2,1
   13600:	e13ffd15 	stw	r4,-12(fp)
   13604:	10800003 	ldbu	r2,0(r2)
   13608:	10803fcc 	andi	r2,r2,255
   1360c:	1080201c 	xori	r2,r2,128
   13610:	10bfe004 	addi	r2,r2,-128
   13614:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   13618:	e0fffd17 	ldw	r3,-12(fp)
   1361c:	e0bffb17 	ldw	r2,-20(fp)
   13620:	18bfef36 	bltu	r3,r2,135e0 <_gp+0xffff6060>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   13624:	e0bffe17 	ldw	r2,-8(fp)
}
   13628:	e037883a 	mov	sp,fp
   1362c:	df000017 	ldw	fp,0(sp)
   13630:	dec00104 	addi	sp,sp,4
   13634:	f800283a 	ret

00013638 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13638:	defffa04 	addi	sp,sp,-24
   1363c:	dfc00515 	stw	ra,20(sp)
   13640:	df000415 	stw	fp,16(sp)
   13644:	df000404 	addi	fp,sp,16
   13648:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1364c:	0007883a 	mov	r3,zero
   13650:	e0bfff17 	ldw	r2,-4(fp)
   13654:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13658:	e0bfff17 	ldw	r2,-4(fp)
   1365c:	10800104 	addi	r2,r2,4
   13660:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13664:	0005303a 	rdctl	r2,status
   13668:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1366c:	e0fffd17 	ldw	r3,-12(fp)
   13670:	00bfff84 	movi	r2,-2
   13674:	1884703a 	and	r2,r3,r2
   13678:	1001703a 	wrctl	status,r2
  
  return context;
   1367c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13680:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13684:	0014a4c0 	call	14a4c <alt_tick>
   13688:	e0bffc17 	ldw	r2,-16(fp)
   1368c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13690:	e0bffe17 	ldw	r2,-8(fp)
   13694:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13698:	e037883a 	mov	sp,fp
   1369c:	dfc00117 	ldw	ra,4(sp)
   136a0:	df000017 	ldw	fp,0(sp)
   136a4:	dec00204 	addi	sp,sp,8
   136a8:	f800283a 	ret

000136ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   136ac:	defff804 	addi	sp,sp,-32
   136b0:	dfc00715 	stw	ra,28(sp)
   136b4:	df000615 	stw	fp,24(sp)
   136b8:	df000604 	addi	fp,sp,24
   136bc:	e13ffc15 	stw	r4,-16(fp)
   136c0:	e17ffd15 	stw	r5,-12(fp)
   136c4:	e1bffe15 	stw	r6,-8(fp)
   136c8:	e1ffff15 	stw	r7,-4(fp)
   136cc:	e0bfff17 	ldw	r2,-4(fp)
   136d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   136d4:	00800074 	movhi	r2,1
   136d8:	10966504 	addi	r2,r2,22932
   136dc:	10800017 	ldw	r2,0(r2)
   136e0:	1000041e 	bne	r2,zero,136f4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   136e4:	00800074 	movhi	r2,1
   136e8:	10966504 	addi	r2,r2,22932
   136ec:	e0fffb17 	ldw	r3,-20(fp)
   136f0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   136f4:	e0bffc17 	ldw	r2,-16(fp)
   136f8:	10800104 	addi	r2,r2,4
   136fc:	00c001c4 	movi	r3,7
   13700:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   13704:	d8000015 	stw	zero,0(sp)
   13708:	e13ffd17 	ldw	r4,-12(fp)
   1370c:	e17ffe17 	ldw	r5,-8(fp)
   13710:	01800074 	movhi	r6,1
   13714:	318d8e04 	addi	r6,r6,13880
   13718:	e1fffc17 	ldw	r7,-16(fp)
   1371c:	0012d880 	call	12d88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13720:	e037883a 	mov	sp,fp
   13724:	dfc00117 	ldw	ra,4(sp)
   13728:	df000017 	ldw	fp,0(sp)
   1372c:	dec00204 	addi	sp,sp,8
   13730:	f800283a 	ret

00013734 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   13734:	defffe04 	addi	sp,sp,-8
   13738:	df000115 	stw	fp,4(sp)
   1373c:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   13740:	00800074 	movhi	r2,1
   13744:	10966204 	addi	r2,r2,22920
   13748:	10800017 	ldw	r2,0(r2)
   1374c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   13750:	00800074 	movhi	r2,1
   13754:	10966304 	addi	r2,r2,22924
   13758:	10800017 	ldw	r2,0(r2)
   1375c:	1000021e 	bne	r2,zero,13768 <alt_timestamp_start+0x34>
  {
    return -1;
   13760:	00bfffc4 	movi	r2,-1
   13764:	00001106 	br	137ac <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   13768:	e0bfff17 	ldw	r2,-4(fp)
   1376c:	10800104 	addi	r2,r2,4
   13770:	00c00204 	movi	r3,8
   13774:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   13778:	e0bfff17 	ldw	r2,-4(fp)
   1377c:	10800204 	addi	r2,r2,8
   13780:	00ffffd4 	movui	r3,65535
   13784:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   13788:	e0bfff17 	ldw	r2,-4(fp)
   1378c:	10800304 	addi	r2,r2,12
   13790:	00ffffd4 	movui	r3,65535
   13794:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   13798:	e0bfff17 	ldw	r2,-4(fp)
   1379c:	10800104 	addi	r2,r2,4
   137a0:	00c00104 	movi	r3,4
   137a4:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   137a8:	0005883a 	mov	r2,zero
}
   137ac:	e037883a 	mov	sp,fp
   137b0:	df000017 	ldw	fp,0(sp)
   137b4:	dec00104 	addi	sp,sp,4
   137b8:	f800283a 	ret

000137bc <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   137bc:	defffc04 	addi	sp,sp,-16
   137c0:	df000315 	stw	fp,12(sp)
   137c4:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   137c8:	00800074 	movhi	r2,1
   137cc:	10966204 	addi	r2,r2,22920
   137d0:	10800017 	ldw	r2,0(r2)
   137d4:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   137d8:	00800074 	movhi	r2,1
   137dc:	10966304 	addi	r2,r2,22924
   137e0:	10800017 	ldw	r2,0(r2)
   137e4:	1000021e 	bne	r2,zero,137f0 <alt_timestamp+0x34>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   137e8:	00bfffc4 	movi	r2,-1
   137ec:	00001306 	br	1383c <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   137f0:	e0bffd17 	ldw	r2,-12(fp)
   137f4:	10800404 	addi	r2,r2,16
   137f8:	0007883a 	mov	r3,zero
   137fc:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   13800:	e0bffd17 	ldw	r2,-12(fp)
   13804:	10800404 	addi	r2,r2,16
   13808:	10800037 	ldwio	r2,0(r2)
   1380c:	10bfffcc 	andi	r2,r2,65535
   13810:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   13814:	e0bffd17 	ldw	r2,-12(fp)
   13818:	10800504 	addi	r2,r2,20
   1381c:	10800037 	ldwio	r2,0(r2)
   13820:	10bfffcc 	andi	r2,r2,65535
   13824:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   13828:	e0bfff17 	ldw	r2,-4(fp)
   1382c:	1006943a 	slli	r3,r2,16
   13830:	e0bffe17 	ldw	r2,-8(fp)
   13834:	1884b03a 	or	r2,r3,r2
   13838:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   1383c:	e037883a 	mov	sp,fp
   13840:	df000017 	ldw	fp,0(sp)
   13844:	dec00104 	addi	sp,sp,4
   13848:	f800283a 	ret

0001384c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1384c:	deffff04 	addi	sp,sp,-4
   13850:	df000015 	stw	fp,0(sp)
   13854:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   13858:	00800074 	movhi	r2,1
   1385c:	10966304 	addi	r2,r2,22924
   13860:	10800017 	ldw	r2,0(r2)
}
   13864:	e037883a 	mov	sp,fp
   13868:	df000017 	ldw	fp,0(sp)
   1386c:	dec00104 	addi	sp,sp,4
   13870:	f800283a 	ret

00013874 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13874:	defffa04 	addi	sp,sp,-24
   13878:	dfc00515 	stw	ra,20(sp)
   1387c:	df000415 	stw	fp,16(sp)
   13880:	df000404 	addi	fp,sp,16
   13884:	e13ffd15 	stw	r4,-12(fp)
   13888:	e17ffe15 	stw	r5,-8(fp)
   1388c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   13890:	e0bffd17 	ldw	r2,-12(fp)
   13894:	10800017 	ldw	r2,0(r2)
   13898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1389c:	e0bffc17 	ldw	r2,-16(fp)
   138a0:	10c00a04 	addi	r3,r2,40
   138a4:	e0bffd17 	ldw	r2,-12(fp)
   138a8:	10800217 	ldw	r2,8(r2)
   138ac:	1809883a 	mov	r4,r3
   138b0:	e17ffe17 	ldw	r5,-8(fp)
   138b4:	e1bfff17 	ldw	r6,-4(fp)
   138b8:	100f883a 	mov	r7,r2
   138bc:	0013d8c0 	call	13d8c <altera_avalon_uart_read>
      fd->fd_flags);
}
   138c0:	e037883a 	mov	sp,fp
   138c4:	dfc00117 	ldw	ra,4(sp)
   138c8:	df000017 	ldw	fp,0(sp)
   138cc:	dec00204 	addi	sp,sp,8
   138d0:	f800283a 	ret

000138d4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   138d4:	defffa04 	addi	sp,sp,-24
   138d8:	dfc00515 	stw	ra,20(sp)
   138dc:	df000415 	stw	fp,16(sp)
   138e0:	df000404 	addi	fp,sp,16
   138e4:	e13ffd15 	stw	r4,-12(fp)
   138e8:	e17ffe15 	stw	r5,-8(fp)
   138ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   138f0:	e0bffd17 	ldw	r2,-12(fp)
   138f4:	10800017 	ldw	r2,0(r2)
   138f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   138fc:	e0bffc17 	ldw	r2,-16(fp)
   13900:	10c00a04 	addi	r3,r2,40
   13904:	e0bffd17 	ldw	r2,-12(fp)
   13908:	10800217 	ldw	r2,8(r2)
   1390c:	1809883a 	mov	r4,r3
   13910:	e17ffe17 	ldw	r5,-8(fp)
   13914:	e1bfff17 	ldw	r6,-4(fp)
   13918:	100f883a 	mov	r7,r2
   1391c:	0013fb80 	call	13fb8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   13920:	e037883a 	mov	sp,fp
   13924:	dfc00117 	ldw	ra,4(sp)
   13928:	df000017 	ldw	fp,0(sp)
   1392c:	dec00204 	addi	sp,sp,8
   13930:	f800283a 	ret

00013934 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   13934:	defffc04 	addi	sp,sp,-16
   13938:	dfc00315 	stw	ra,12(sp)
   1393c:	df000215 	stw	fp,8(sp)
   13940:	df000204 	addi	fp,sp,8
   13944:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   13948:	e0bfff17 	ldw	r2,-4(fp)
   1394c:	10800017 	ldw	r2,0(r2)
   13950:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   13954:	e0bffe17 	ldw	r2,-8(fp)
   13958:	10c00a04 	addi	r3,r2,40
   1395c:	e0bfff17 	ldw	r2,-4(fp)
   13960:	10800217 	ldw	r2,8(r2)
   13964:	1809883a 	mov	r4,r3
   13968:	100b883a 	mov	r5,r2
   1396c:	0013ce80 	call	13ce8 <altera_avalon_uart_close>
}
   13970:	e037883a 	mov	sp,fp
   13974:	dfc00117 	ldw	ra,4(sp)
   13978:	df000017 	ldw	fp,0(sp)
   1397c:	dec00204 	addi	sp,sp,8
   13980:	f800283a 	ret

00013984 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   13984:	defff804 	addi	sp,sp,-32
   13988:	dfc00715 	stw	ra,28(sp)
   1398c:	df000615 	stw	fp,24(sp)
   13990:	df000604 	addi	fp,sp,24
   13994:	e13ffd15 	stw	r4,-12(fp)
   13998:	e17ffe15 	stw	r5,-8(fp)
   1399c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   139a0:	e0bffd17 	ldw	r2,-12(fp)
   139a4:	10800017 	ldw	r2,0(r2)
   139a8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   139ac:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   139b0:	1000041e 	bne	r2,zero,139c4 <altera_avalon_uart_init+0x40>
   139b4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   139b8:	1000021e 	bne	r2,zero,139c4 <altera_avalon_uart_init+0x40>
   139bc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   139c0:	10000226 	beq	r2,zero,139cc <altera_avalon_uart_init+0x48>
   139c4:	00800044 	movi	r2,1
   139c8:	00000106 	br	139d0 <altera_avalon_uart_init+0x4c>
   139cc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   139d0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   139d4:	e0bffc17 	ldw	r2,-16(fp)
   139d8:	10000f1e 	bne	r2,zero,13a18 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   139dc:	e0bffd17 	ldw	r2,-12(fp)
   139e0:	00c32004 	movi	r3,3200
   139e4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   139e8:	e0bffb17 	ldw	r2,-20(fp)
   139ec:	10800304 	addi	r2,r2,12
   139f0:	e0fffd17 	ldw	r3,-12(fp)
   139f4:	18c00117 	ldw	r3,4(r3)
   139f8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   139fc:	d8000015 	stw	zero,0(sp)
   13a00:	e13ffe17 	ldw	r4,-8(fp)
   13a04:	e17fff17 	ldw	r5,-4(fp)
   13a08:	01800074 	movhi	r6,1
   13a0c:	318e8b04 	addi	r6,r6,14892
   13a10:	e1fffd17 	ldw	r7,-12(fp)
   13a14:	0012d880 	call	12d88 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   13a18:	e037883a 	mov	sp,fp
   13a1c:	dfc00117 	ldw	ra,4(sp)
   13a20:	df000017 	ldw	fp,0(sp)
   13a24:	dec00204 	addi	sp,sp,8
   13a28:	f800283a 	ret

00013a2c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   13a2c:	defffa04 	addi	sp,sp,-24
   13a30:	dfc00515 	stw	ra,20(sp)
   13a34:	df000415 	stw	fp,16(sp)
   13a38:	df000404 	addi	fp,sp,16
   13a3c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   13a40:	e0bfff17 	ldw	r2,-4(fp)
   13a44:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   13a48:	e0bffc17 	ldw	r2,-16(fp)
   13a4c:	10800017 	ldw	r2,0(r2)
   13a50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   13a54:	e0bffd17 	ldw	r2,-12(fp)
   13a58:	10800204 	addi	r2,r2,8
   13a5c:	10800037 	ldwio	r2,0(r2)
   13a60:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   13a64:	e0bffd17 	ldw	r2,-12(fp)
   13a68:	10800204 	addi	r2,r2,8
   13a6c:	0007883a 	mov	r3,zero
   13a70:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   13a74:	e0bffd17 	ldw	r2,-12(fp)
   13a78:	10800204 	addi	r2,r2,8
   13a7c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   13a80:	e0bffe17 	ldw	r2,-8(fp)
   13a84:	1080200c 	andi	r2,r2,128
   13a88:	10000326 	beq	r2,zero,13a98 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   13a8c:	e13ffc17 	ldw	r4,-16(fp)
   13a90:	e17ffe17 	ldw	r5,-8(fp)
   13a94:	0013ac40 	call	13ac4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   13a98:	e0bffe17 	ldw	r2,-8(fp)
   13a9c:	1081100c 	andi	r2,r2,1088
   13aa0:	10000326 	beq	r2,zero,13ab0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   13aa4:	e13ffc17 	ldw	r4,-16(fp)
   13aa8:	e17ffe17 	ldw	r5,-8(fp)
   13aac:	0013ba40 	call	13ba4 <altera_avalon_uart_txirq>
  }
  

}
   13ab0:	e037883a 	mov	sp,fp
   13ab4:	dfc00117 	ldw	ra,4(sp)
   13ab8:	df000017 	ldw	fp,0(sp)
   13abc:	dec00204 	addi	sp,sp,8
   13ac0:	f800283a 	ret

00013ac4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   13ac4:	defffc04 	addi	sp,sp,-16
   13ac8:	df000315 	stw	fp,12(sp)
   13acc:	df000304 	addi	fp,sp,12
   13ad0:	e13ffe15 	stw	r4,-8(fp)
   13ad4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   13ad8:	e0bfff17 	ldw	r2,-4(fp)
   13adc:	108000cc 	andi	r2,r2,3
   13ae0:	10000126 	beq	r2,zero,13ae8 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   13ae4:	00002b06 	br	13b94 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   13ae8:	e0bffe17 	ldw	r2,-8(fp)
   13aec:	10800317 	ldw	r2,12(r2)
   13af0:	e0bffe17 	ldw	r2,-8(fp)
   13af4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   13af8:	e0bffe17 	ldw	r2,-8(fp)
   13afc:	10800317 	ldw	r2,12(r2)
   13b00:	10800044 	addi	r2,r2,1
   13b04:	10800fcc 	andi	r2,r2,63
   13b08:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   13b0c:	e0bffe17 	ldw	r2,-8(fp)
   13b10:	10800317 	ldw	r2,12(r2)
   13b14:	e0fffe17 	ldw	r3,-8(fp)
   13b18:	18c00017 	ldw	r3,0(r3)
   13b1c:	18c00037 	ldwio	r3,0(r3)
   13b20:	1809883a 	mov	r4,r3
   13b24:	e0fffe17 	ldw	r3,-8(fp)
   13b28:	1885883a 	add	r2,r3,r2
   13b2c:	10800704 	addi	r2,r2,28
   13b30:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   13b34:	e0bffe17 	ldw	r2,-8(fp)
   13b38:	e0fffd17 	ldw	r3,-12(fp)
   13b3c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   13b40:	e0bffe17 	ldw	r2,-8(fp)
   13b44:	10800317 	ldw	r2,12(r2)
   13b48:	10800044 	addi	r2,r2,1
   13b4c:	10800fcc 	andi	r2,r2,63
   13b50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10c00217 	ldw	r3,8(r2)
   13b5c:	e0bffd17 	ldw	r2,-12(fp)
   13b60:	18800c1e 	bne	r3,r2,13b94 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   13b64:	e0bffe17 	ldw	r2,-8(fp)
   13b68:	10c00117 	ldw	r3,4(r2)
   13b6c:	00bfdfc4 	movi	r2,-129
   13b70:	1886703a 	and	r3,r3,r2
   13b74:	e0bffe17 	ldw	r2,-8(fp)
   13b78:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	10800017 	ldw	r2,0(r2)
   13b84:	10800304 	addi	r2,r2,12
   13b88:	e0fffe17 	ldw	r3,-8(fp)
   13b8c:	18c00117 	ldw	r3,4(r3)
   13b90:	10c00035 	stwio	r3,0(r2)
  }   
}
   13b94:	e037883a 	mov	sp,fp
   13b98:	df000017 	ldw	fp,0(sp)
   13b9c:	dec00104 	addi	sp,sp,4
   13ba0:	f800283a 	ret

00013ba4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   13ba4:	defffb04 	addi	sp,sp,-20
   13ba8:	df000415 	stw	fp,16(sp)
   13bac:	df000404 	addi	fp,sp,16
   13bb0:	e13ffc15 	stw	r4,-16(fp)
   13bb4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   13bb8:	e0bffc17 	ldw	r2,-16(fp)
   13bbc:	10c00417 	ldw	r3,16(r2)
   13bc0:	e0bffc17 	ldw	r2,-16(fp)
   13bc4:	10800517 	ldw	r2,20(r2)
   13bc8:	18803226 	beq	r3,r2,13c94 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   13bcc:	e0bffc17 	ldw	r2,-16(fp)
   13bd0:	10800617 	ldw	r2,24(r2)
   13bd4:	1080008c 	andi	r2,r2,2
   13bd8:	10000326 	beq	r2,zero,13be8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   13bdc:	e0bffd17 	ldw	r2,-12(fp)
   13be0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   13be4:	10001d26 	beq	r2,zero,13c5c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   13be8:	e0bffc17 	ldw	r2,-16(fp)
   13bec:	10800417 	ldw	r2,16(r2)
   13bf0:	e0bffc17 	ldw	r2,-16(fp)
   13bf4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   13bf8:	e0bffc17 	ldw	r2,-16(fp)
   13bfc:	10800017 	ldw	r2,0(r2)
   13c00:	10800104 	addi	r2,r2,4
   13c04:	e0fffc17 	ldw	r3,-16(fp)
   13c08:	18c00417 	ldw	r3,16(r3)
   13c0c:	e13ffc17 	ldw	r4,-16(fp)
   13c10:	20c7883a 	add	r3,r4,r3
   13c14:	18c01704 	addi	r3,r3,92
   13c18:	18c00003 	ldbu	r3,0(r3)
   13c1c:	18c03fcc 	andi	r3,r3,255
   13c20:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   13c24:	e0bffc17 	ldw	r2,-16(fp)
   13c28:	10800417 	ldw	r2,16(r2)
   13c2c:	10800044 	addi	r2,r2,1
   13c30:	e0fffc17 	ldw	r3,-16(fp)
   13c34:	18800415 	stw	r2,16(r3)
   13c38:	10c00fcc 	andi	r3,r2,63
   13c3c:	e0bffc17 	ldw	r2,-16(fp)
   13c40:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   13c44:	e0bffc17 	ldw	r2,-16(fp)
   13c48:	10800117 	ldw	r2,4(r2)
   13c4c:	10c01014 	ori	r3,r2,64
   13c50:	e0bffc17 	ldw	r2,-16(fp)
   13c54:	10c00115 	stw	r3,4(r2)
   13c58:	00000e06 	br	13c94 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   13c5c:	e0bffc17 	ldw	r2,-16(fp)
   13c60:	10800017 	ldw	r2,0(r2)
   13c64:	10800204 	addi	r2,r2,8
   13c68:	10800037 	ldwio	r2,0(r2)
   13c6c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   13c70:	e0bffd17 	ldw	r2,-12(fp)
   13c74:	1082000c 	andi	r2,r2,2048
   13c78:	1000061e 	bne	r2,zero,13c94 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   13c7c:	e0bffc17 	ldw	r2,-16(fp)
   13c80:	10c00117 	ldw	r3,4(r2)
   13c84:	00bfefc4 	movi	r2,-65
   13c88:	1886703a 	and	r3,r3,r2
   13c8c:	e0bffc17 	ldw	r2,-16(fp)
   13c90:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   13c94:	e0bffc17 	ldw	r2,-16(fp)
   13c98:	10c00417 	ldw	r3,16(r2)
   13c9c:	e0bffc17 	ldw	r2,-16(fp)
   13ca0:	10800517 	ldw	r2,20(r2)
   13ca4:	1880061e 	bne	r3,r2,13cc0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   13ca8:	e0bffc17 	ldw	r2,-16(fp)
   13cac:	10c00117 	ldw	r3,4(r2)
   13cb0:	00beefc4 	movi	r2,-1089
   13cb4:	1886703a 	and	r3,r3,r2
   13cb8:	e0bffc17 	ldw	r2,-16(fp)
   13cbc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   13cc0:	e0bffc17 	ldw	r2,-16(fp)
   13cc4:	10800017 	ldw	r2,0(r2)
   13cc8:	10800304 	addi	r2,r2,12
   13ccc:	e0fffc17 	ldw	r3,-16(fp)
   13cd0:	18c00117 	ldw	r3,4(r3)
   13cd4:	10c00035 	stwio	r3,0(r2)
}
   13cd8:	e037883a 	mov	sp,fp
   13cdc:	df000017 	ldw	fp,0(sp)
   13ce0:	dec00104 	addi	sp,sp,4
   13ce4:	f800283a 	ret

00013ce8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   13ce8:	defffd04 	addi	sp,sp,-12
   13cec:	df000215 	stw	fp,8(sp)
   13cf0:	df000204 	addi	fp,sp,8
   13cf4:	e13ffe15 	stw	r4,-8(fp)
   13cf8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   13cfc:	00000506 	br	13d14 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13d00:	e0bfff17 	ldw	r2,-4(fp)
   13d04:	1090000c 	andi	r2,r2,16384
   13d08:	10000226 	beq	r2,zero,13d14 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13d0c:	00bffd44 	movi	r2,-11
   13d10:	00000606 	br	13d2c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   13d14:	e0bffe17 	ldw	r2,-8(fp)
   13d18:	10c00417 	ldw	r3,16(r2)
   13d1c:	e0bffe17 	ldw	r2,-8(fp)
   13d20:	10800517 	ldw	r2,20(r2)
   13d24:	18bff61e 	bne	r3,r2,13d00 <_gp+0xffff6780>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13d28:	0005883a 	mov	r2,zero
}
   13d2c:	e037883a 	mov	sp,fp
   13d30:	df000017 	ldw	fp,0(sp)
   13d34:	dec00104 	addi	sp,sp,4
   13d38:	f800283a 	ret

00013d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d3c:	defffe04 	addi	sp,sp,-8
   13d40:	dfc00115 	stw	ra,4(sp)
   13d44:	df000015 	stw	fp,0(sp)
   13d48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d4c:	00800074 	movhi	r2,1
   13d50:	10956804 	addi	r2,r2,21920
   13d54:	10800017 	ldw	r2,0(r2)
   13d58:	10000526 	beq	r2,zero,13d70 <alt_get_errno+0x34>
   13d5c:	00800074 	movhi	r2,1
   13d60:	10956804 	addi	r2,r2,21920
   13d64:	10800017 	ldw	r2,0(r2)
   13d68:	103ee83a 	callr	r2
   13d6c:	00000206 	br	13d78 <alt_get_errno+0x3c>
   13d70:	00800074 	movhi	r2,1
   13d74:	10965d04 	addi	r2,r2,22900
}
   13d78:	e037883a 	mov	sp,fp
   13d7c:	dfc00117 	ldw	ra,4(sp)
   13d80:	df000017 	ldw	fp,0(sp)
   13d84:	dec00204 	addi	sp,sp,8
   13d88:	f800283a 	ret

00013d8c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   13d8c:	defff204 	addi	sp,sp,-56
   13d90:	dfc00d15 	stw	ra,52(sp)
   13d94:	df000c15 	stw	fp,48(sp)
   13d98:	df000c04 	addi	fp,sp,48
   13d9c:	e13ffc15 	stw	r4,-16(fp)
   13da0:	e17ffd15 	stw	r5,-12(fp)
   13da4:	e1bffe15 	stw	r6,-8(fp)
   13da8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   13dac:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   13db0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   13db4:	e0bfff17 	ldw	r2,-4(fp)
   13db8:	1090000c 	andi	r2,r2,16384
   13dbc:	1005003a 	cmpeq	r2,r2,zero
   13dc0:	10803fcc 	andi	r2,r2,255
   13dc4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   13dc8:	00001306 	br	13e18 <altera_avalon_uart_read+0x8c>
    {
      count++;
   13dcc:	e0bff517 	ldw	r2,-44(fp)
   13dd0:	10800044 	addi	r2,r2,1
   13dd4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   13dd8:	e0bffd17 	ldw	r2,-12(fp)
   13ddc:	10c00044 	addi	r3,r2,1
   13de0:	e0fffd15 	stw	r3,-12(fp)
   13de4:	e0fffc17 	ldw	r3,-16(fp)
   13de8:	18c00217 	ldw	r3,8(r3)
   13dec:	e13ffc17 	ldw	r4,-16(fp)
   13df0:	20c7883a 	add	r3,r4,r3
   13df4:	18c00704 	addi	r3,r3,28
   13df8:	18c00003 	ldbu	r3,0(r3)
   13dfc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   13e00:	e0bffc17 	ldw	r2,-16(fp)
   13e04:	10800217 	ldw	r2,8(r2)
   13e08:	10800044 	addi	r2,r2,1
   13e0c:	10c00fcc 	andi	r3,r2,63
   13e10:	e0bffc17 	ldw	r2,-16(fp)
   13e14:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   13e18:	e0fff517 	ldw	r3,-44(fp)
   13e1c:	e0bffe17 	ldw	r2,-8(fp)
   13e20:	1880050e 	bge	r3,r2,13e38 <altera_avalon_uart_read+0xac>
   13e24:	e0bffc17 	ldw	r2,-16(fp)
   13e28:	10c00217 	ldw	r3,8(r2)
   13e2c:	e0bffc17 	ldw	r2,-16(fp)
   13e30:	10800317 	ldw	r2,12(r2)
   13e34:	18bfe51e 	bne	r3,r2,13dcc <_gp+0xffff684c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   13e38:	e0bff517 	ldw	r2,-44(fp)
   13e3c:	1000251e 	bne	r2,zero,13ed4 <altera_avalon_uart_read+0x148>
   13e40:	e0bffc17 	ldw	r2,-16(fp)
   13e44:	10c00217 	ldw	r3,8(r2)
   13e48:	e0bffc17 	ldw	r2,-16(fp)
   13e4c:	10800317 	ldw	r2,12(r2)
   13e50:	1880201e 	bne	r3,r2,13ed4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   13e54:	e0bff617 	ldw	r2,-40(fp)
   13e58:	1000071e 	bne	r2,zero,13e78 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   13e5c:	0013d3c0 	call	13d3c <alt_get_errno>
   13e60:	1007883a 	mov	r3,r2
   13e64:	008002c4 	movi	r2,11
   13e68:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   13e6c:	00800044 	movi	r2,1
   13e70:	e0bff405 	stb	r2,-48(fp)
        break;
   13e74:	00001b06 	br	13ee4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e78:	0005303a 	rdctl	r2,status
   13e7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e80:	e0fff817 	ldw	r3,-32(fp)
   13e84:	00bfff84 	movi	r2,-2
   13e88:	1884703a 	and	r2,r3,r2
   13e8c:	1001703a 	wrctl	status,r2
  
  return context;
   13e90:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   13e94:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   13e98:	e0bffc17 	ldw	r2,-16(fp)
   13e9c:	10800117 	ldw	r2,4(r2)
   13ea0:	10c02014 	ori	r3,r2,128
   13ea4:	e0bffc17 	ldw	r2,-16(fp)
   13ea8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   13eac:	e0bffc17 	ldw	r2,-16(fp)
   13eb0:	10800017 	ldw	r2,0(r2)
   13eb4:	10800304 	addi	r2,r2,12
   13eb8:	e0fffc17 	ldw	r3,-16(fp)
   13ebc:	18c00117 	ldw	r3,4(r3)
   13ec0:	10c00035 	stwio	r3,0(r2)
   13ec4:	e0bff717 	ldw	r2,-36(fp)
   13ec8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ecc:	e0bff917 	ldw	r2,-28(fp)
   13ed0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   13ed4:	e0bff517 	ldw	r2,-44(fp)
   13ed8:	1000021e 	bne	r2,zero,13ee4 <altera_avalon_uart_read+0x158>
   13edc:	e0bffe17 	ldw	r2,-8(fp)
   13ee0:	103fb91e 	bne	r2,zero,13dc8 <_gp+0xffff6848>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ee4:	0005303a 	rdctl	r2,status
   13ee8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13eec:	e0fffa17 	ldw	r3,-24(fp)
   13ef0:	00bfff84 	movi	r2,-2
   13ef4:	1884703a 	and	r2,r3,r2
   13ef8:	1001703a 	wrctl	status,r2
  
  return context;
   13efc:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   13f00:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   13f04:	e0bffc17 	ldw	r2,-16(fp)
   13f08:	10800117 	ldw	r2,4(r2)
   13f0c:	10c02014 	ori	r3,r2,128
   13f10:	e0bffc17 	ldw	r2,-16(fp)
   13f14:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   13f18:	e0bffc17 	ldw	r2,-16(fp)
   13f1c:	10800017 	ldw	r2,0(r2)
   13f20:	10800304 	addi	r2,r2,12
   13f24:	e0fffc17 	ldw	r3,-16(fp)
   13f28:	18c00117 	ldw	r3,4(r3)
   13f2c:	10c00035 	stwio	r3,0(r2)
   13f30:	e0bff717 	ldw	r2,-36(fp)
   13f34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f38:	e0bffb17 	ldw	r2,-20(fp)
   13f3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   13f40:	e0bff403 	ldbu	r2,-48(fp)
   13f44:	10000226 	beq	r2,zero,13f50 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   13f48:	00bffd44 	movi	r2,-11
   13f4c:	00000106 	br	13f54 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   13f50:	e0bff517 	ldw	r2,-44(fp)
  }
}
   13f54:	e037883a 	mov	sp,fp
   13f58:	dfc00117 	ldw	ra,4(sp)
   13f5c:	df000017 	ldw	fp,0(sp)
   13f60:	dec00204 	addi	sp,sp,8
   13f64:	f800283a 	ret

00013f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13f68:	defffe04 	addi	sp,sp,-8
   13f6c:	dfc00115 	stw	ra,4(sp)
   13f70:	df000015 	stw	fp,0(sp)
   13f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13f78:	00800074 	movhi	r2,1
   13f7c:	10956804 	addi	r2,r2,21920
   13f80:	10800017 	ldw	r2,0(r2)
   13f84:	10000526 	beq	r2,zero,13f9c <alt_get_errno+0x34>
   13f88:	00800074 	movhi	r2,1
   13f8c:	10956804 	addi	r2,r2,21920
   13f90:	10800017 	ldw	r2,0(r2)
   13f94:	103ee83a 	callr	r2
   13f98:	00000206 	br	13fa4 <alt_get_errno+0x3c>
   13f9c:	00800074 	movhi	r2,1
   13fa0:	10965d04 	addi	r2,r2,22900
}
   13fa4:	e037883a 	mov	sp,fp
   13fa8:	dfc00117 	ldw	ra,4(sp)
   13fac:	df000017 	ldw	fp,0(sp)
   13fb0:	dec00204 	addi	sp,sp,8
   13fb4:	f800283a 	ret

00013fb8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   13fb8:	defff204 	addi	sp,sp,-56
   13fbc:	dfc00d15 	stw	ra,52(sp)
   13fc0:	df000c15 	stw	fp,48(sp)
   13fc4:	df000c04 	addi	fp,sp,48
   13fc8:	e13ffc15 	stw	r4,-16(fp)
   13fcc:	e17ffd15 	stw	r5,-12(fp)
   13fd0:	e1bffe15 	stw	r6,-8(fp)
   13fd4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   13fd8:	e0bffe17 	ldw	r2,-8(fp)
   13fdc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   13fe0:	e0bfff17 	ldw	r2,-4(fp)
   13fe4:	1090000c 	andi	r2,r2,16384
   13fe8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   13fec:	00003c06 	br	140e0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   13ff0:	e0bffc17 	ldw	r2,-16(fp)
   13ff4:	10800517 	ldw	r2,20(r2)
   13ff8:	10800044 	addi	r2,r2,1
   13ffc:	10800fcc 	andi	r2,r2,63
   14000:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   14004:	e0bffc17 	ldw	r2,-16(fp)
   14008:	10c00417 	ldw	r3,16(r2)
   1400c:	e0bff617 	ldw	r2,-40(fp)
   14010:	1880221e 	bne	r3,r2,1409c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   14014:	e0bff517 	ldw	r2,-44(fp)
   14018:	10000526 	beq	r2,zero,14030 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   1401c:	0013f680 	call	13f68 <alt_get_errno>
   14020:	1007883a 	mov	r3,r2
   14024:	008002c4 	movi	r2,11
   14028:	18800015 	stw	r2,0(r3)
        break;
   1402c:	00002e06 	br	140e8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14030:	0005303a 	rdctl	r2,status
   14034:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14038:	e0fff817 	ldw	r3,-32(fp)
   1403c:	00bfff84 	movi	r2,-2
   14040:	1884703a 	and	r2,r3,r2
   14044:	1001703a 	wrctl	status,r2
  
  return context;
   14048:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   1404c:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   14050:	e0bffc17 	ldw	r2,-16(fp)
   14054:	10800117 	ldw	r2,4(r2)
   14058:	10c11014 	ori	r3,r2,1088
   1405c:	e0bffc17 	ldw	r2,-16(fp)
   14060:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   14064:	e0bffc17 	ldw	r2,-16(fp)
   14068:	10800017 	ldw	r2,0(r2)
   1406c:	10800304 	addi	r2,r2,12
   14070:	e0fffc17 	ldw	r3,-16(fp)
   14074:	18c00117 	ldw	r3,4(r3)
   14078:	10c00035 	stwio	r3,0(r2)
   1407c:	e0bff717 	ldw	r2,-36(fp)
   14080:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14084:	e0bff917 	ldw	r2,-28(fp)
   14088:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   1408c:	e0bffc17 	ldw	r2,-16(fp)
   14090:	10c00417 	ldw	r3,16(r2)
   14094:	e0bff617 	ldw	r2,-40(fp)
   14098:	18bffc26 	beq	r3,r2,1408c <_gp+0xffff6b0c>
      }
    }

    count--;
   1409c:	e0bff417 	ldw	r2,-48(fp)
   140a0:	10bfffc4 	addi	r2,r2,-1
   140a4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   140a8:	e0bffc17 	ldw	r2,-16(fp)
   140ac:	10c00517 	ldw	r3,20(r2)
   140b0:	e0bffd17 	ldw	r2,-12(fp)
   140b4:	11000044 	addi	r4,r2,1
   140b8:	e13ffd15 	stw	r4,-12(fp)
   140bc:	10800003 	ldbu	r2,0(r2)
   140c0:	1009883a 	mov	r4,r2
   140c4:	e0bffc17 	ldw	r2,-16(fp)
   140c8:	10c5883a 	add	r2,r2,r3
   140cc:	10801704 	addi	r2,r2,92
   140d0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   140d4:	e0bffc17 	ldw	r2,-16(fp)
   140d8:	e0fff617 	ldw	r3,-40(fp)
   140dc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   140e0:	e0bff417 	ldw	r2,-48(fp)
   140e4:	103fc21e 	bne	r2,zero,13ff0 <_gp+0xffff6a70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140e8:	0005303a 	rdctl	r2,status
   140ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140f0:	e0fffa17 	ldw	r3,-24(fp)
   140f4:	00bfff84 	movi	r2,-2
   140f8:	1884703a 	and	r2,r3,r2
   140fc:	1001703a 	wrctl	status,r2
  
  return context;
   14100:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   14104:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   14108:	e0bffc17 	ldw	r2,-16(fp)
   1410c:	10800117 	ldw	r2,4(r2)
   14110:	10c11014 	ori	r3,r2,1088
   14114:	e0bffc17 	ldw	r2,-16(fp)
   14118:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1411c:	e0bffc17 	ldw	r2,-16(fp)
   14120:	10800017 	ldw	r2,0(r2)
   14124:	10800304 	addi	r2,r2,12
   14128:	e0fffc17 	ldw	r3,-16(fp)
   1412c:	18c00117 	ldw	r3,4(r3)
   14130:	10c00035 	stwio	r3,0(r2)
   14134:	e0bff717 	ldw	r2,-36(fp)
   14138:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1413c:	e0bffb17 	ldw	r2,-20(fp)
   14140:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   14144:	e0fffe17 	ldw	r3,-8(fp)
   14148:	e0bff417 	ldw	r2,-48(fp)
   1414c:	1885c83a 	sub	r2,r3,r2
}
   14150:	e037883a 	mov	sp,fp
   14154:	dfc00117 	ldw	ra,4(sp)
   14158:	df000017 	ldw	fp,0(sp)
   1415c:	dec00204 	addi	sp,sp,8
   14160:	f800283a 	ret

00014164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14164:	defffe04 	addi	sp,sp,-8
   14168:	dfc00115 	stw	ra,4(sp)
   1416c:	df000015 	stw	fp,0(sp)
   14170:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14174:	00800074 	movhi	r2,1
   14178:	10956804 	addi	r2,r2,21920
   1417c:	10800017 	ldw	r2,0(r2)
   14180:	10000526 	beq	r2,zero,14198 <alt_get_errno+0x34>
   14184:	00800074 	movhi	r2,1
   14188:	10956804 	addi	r2,r2,21920
   1418c:	10800017 	ldw	r2,0(r2)
   14190:	103ee83a 	callr	r2
   14194:	00000206 	br	141a0 <alt_get_errno+0x3c>
   14198:	00800074 	movhi	r2,1
   1419c:	10965d04 	addi	r2,r2,22900
}
   141a0:	e037883a 	mov	sp,fp
   141a4:	dfc00117 	ldw	ra,4(sp)
   141a8:	df000017 	ldw	fp,0(sp)
   141ac:	dec00204 	addi	sp,sp,8
   141b0:	f800283a 	ret

000141b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   141b4:	defffb04 	addi	sp,sp,-20
   141b8:	dfc00415 	stw	ra,16(sp)
   141bc:	df000315 	stw	fp,12(sp)
   141c0:	df000304 	addi	fp,sp,12
   141c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   141c8:	e0bfff17 	ldw	r2,-4(fp)
   141cc:	10000816 	blt	r2,zero,141f0 <close+0x3c>
   141d0:	e13fff17 	ldw	r4,-4(fp)
   141d4:	01400304 	movi	r5,12
   141d8:	0011db00 	call	11db0 <__mulsi3>
   141dc:	1007883a 	mov	r3,r2
   141e0:	00800074 	movhi	r2,1
   141e4:	10950004 	addi	r2,r2,21504
   141e8:	1885883a 	add	r2,r3,r2
   141ec:	00000106 	br	141f4 <close+0x40>
   141f0:	0005883a 	mov	r2,zero
   141f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   141f8:	e0bffd17 	ldw	r2,-12(fp)
   141fc:	10001926 	beq	r2,zero,14264 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   14200:	e0bffd17 	ldw	r2,-12(fp)
   14204:	10800017 	ldw	r2,0(r2)
   14208:	10800417 	ldw	r2,16(r2)
   1420c:	10000626 	beq	r2,zero,14228 <close+0x74>
   14210:	e0bffd17 	ldw	r2,-12(fp)
   14214:	10800017 	ldw	r2,0(r2)
   14218:	10800417 	ldw	r2,16(r2)
   1421c:	e13ffd17 	ldw	r4,-12(fp)
   14220:	103ee83a 	callr	r2
   14224:	00000106 	br	1422c <close+0x78>
   14228:	0005883a 	mov	r2,zero
   1422c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14230:	e13fff17 	ldw	r4,-4(fp)
   14234:	00149340 	call	14934 <alt_release_fd>
    if (rval < 0)
   14238:	e0bffe17 	ldw	r2,-8(fp)
   1423c:	1000070e 	bge	r2,zero,1425c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   14240:	00141640 	call	14164 <alt_get_errno>
   14244:	1007883a 	mov	r3,r2
   14248:	e0bffe17 	ldw	r2,-8(fp)
   1424c:	0085c83a 	sub	r2,zero,r2
   14250:	18800015 	stw	r2,0(r3)
      return -1;
   14254:	00bfffc4 	movi	r2,-1
   14258:	00000706 	br	14278 <close+0xc4>
    }
    return 0;
   1425c:	0005883a 	mov	r2,zero
   14260:	00000506 	br	14278 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14264:	00141640 	call	14164 <alt_get_errno>
   14268:	1007883a 	mov	r3,r2
   1426c:	00801444 	movi	r2,81
   14270:	18800015 	stw	r2,0(r3)
    return -1;
   14274:	00bfffc4 	movi	r2,-1
  }
}
   14278:	e037883a 	mov	sp,fp
   1427c:	dfc00117 	ldw	ra,4(sp)
   14280:	df000017 	ldw	fp,0(sp)
   14284:	dec00204 	addi	sp,sp,8
   14288:	f800283a 	ret

0001428c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1428c:	deffff04 	addi	sp,sp,-4
   14290:	df000015 	stw	fp,0(sp)
   14294:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14298:	e037883a 	mov	sp,fp
   1429c:	df000017 	ldw	fp,0(sp)
   142a0:	dec00104 	addi	sp,sp,4
   142a4:	f800283a 	ret

000142a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   142a8:	defffc04 	addi	sp,sp,-16
   142ac:	df000315 	stw	fp,12(sp)
   142b0:	df000304 	addi	fp,sp,12
   142b4:	e13ffd15 	stw	r4,-12(fp)
   142b8:	e17ffe15 	stw	r5,-8(fp)
   142bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   142c0:	e0bfff17 	ldw	r2,-4(fp)
}
   142c4:	e037883a 	mov	sp,fp
   142c8:	df000017 	ldw	fp,0(sp)
   142cc:	dec00104 	addi	sp,sp,4
   142d0:	f800283a 	ret

000142d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   142d4:	defffe04 	addi	sp,sp,-8
   142d8:	dfc00115 	stw	ra,4(sp)
   142dc:	df000015 	stw	fp,0(sp)
   142e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   142e4:	00800074 	movhi	r2,1
   142e8:	10956804 	addi	r2,r2,21920
   142ec:	10800017 	ldw	r2,0(r2)
   142f0:	10000526 	beq	r2,zero,14308 <alt_get_errno+0x34>
   142f4:	00800074 	movhi	r2,1
   142f8:	10956804 	addi	r2,r2,21920
   142fc:	10800017 	ldw	r2,0(r2)
   14300:	103ee83a 	callr	r2
   14304:	00000206 	br	14310 <alt_get_errno+0x3c>
   14308:	00800074 	movhi	r2,1
   1430c:	10965d04 	addi	r2,r2,22900
}
   14310:	e037883a 	mov	sp,fp
   14314:	dfc00117 	ldw	ra,4(sp)
   14318:	df000017 	ldw	fp,0(sp)
   1431c:	dec00204 	addi	sp,sp,8
   14320:	f800283a 	ret

00014324 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14324:	defffa04 	addi	sp,sp,-24
   14328:	dfc00515 	stw	ra,20(sp)
   1432c:	df000415 	stw	fp,16(sp)
   14330:	df000404 	addi	fp,sp,16
   14334:	e13ffe15 	stw	r4,-8(fp)
   14338:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1433c:	e0bffe17 	ldw	r2,-8(fp)
   14340:	10000326 	beq	r2,zero,14350 <alt_dev_llist_insert+0x2c>
   14344:	e0bffe17 	ldw	r2,-8(fp)
   14348:	10800217 	ldw	r2,8(r2)
   1434c:	1000061e 	bne	r2,zero,14368 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14350:	00142d40 	call	142d4 <alt_get_errno>
   14354:	1007883a 	mov	r3,r2
   14358:	00800584 	movi	r2,22
   1435c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14360:	00bffa84 	movi	r2,-22
   14364:	00001306 	br	143b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14368:	e0bffe17 	ldw	r2,-8(fp)
   1436c:	e0ffff17 	ldw	r3,-4(fp)
   14370:	e0fffc15 	stw	r3,-16(fp)
   14374:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14378:	e0bffd17 	ldw	r2,-12(fp)
   1437c:	e0fffc17 	ldw	r3,-16(fp)
   14380:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14384:	e0bffc17 	ldw	r2,-16(fp)
   14388:	10c00017 	ldw	r3,0(r2)
   1438c:	e0bffd17 	ldw	r2,-12(fp)
   14390:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14394:	e0bffc17 	ldw	r2,-16(fp)
   14398:	10800017 	ldw	r2,0(r2)
   1439c:	e0fffd17 	ldw	r3,-12(fp)
   143a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   143a4:	e0bffc17 	ldw	r2,-16(fp)
   143a8:	e0fffd17 	ldw	r3,-12(fp)
   143ac:	10c00015 	stw	r3,0(r2)

  return 0;  
   143b0:	0005883a 	mov	r2,zero
}
   143b4:	e037883a 	mov	sp,fp
   143b8:	dfc00117 	ldw	ra,4(sp)
   143bc:	df000017 	ldw	fp,0(sp)
   143c0:	dec00204 	addi	sp,sp,8
   143c4:	f800283a 	ret

000143c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   143c8:	defffd04 	addi	sp,sp,-12
   143cc:	dfc00215 	stw	ra,8(sp)
   143d0:	df000115 	stw	fp,4(sp)
   143d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   143d8:	00800074 	movhi	r2,1
   143dc:	10945a04 	addi	r2,r2,20840
   143e0:	e0bfff15 	stw	r2,-4(fp)
   143e4:	00000606 	br	14400 <_do_ctors+0x38>
        (*ctor) (); 
   143e8:	e0bfff17 	ldw	r2,-4(fp)
   143ec:	10800017 	ldw	r2,0(r2)
   143f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   143f4:	e0bfff17 	ldw	r2,-4(fp)
   143f8:	10bfff04 	addi	r2,r2,-4
   143fc:	e0bfff15 	stw	r2,-4(fp)
   14400:	e0ffff17 	ldw	r3,-4(fp)
   14404:	00800074 	movhi	r2,1
   14408:	10945b04 	addi	r2,r2,20844
   1440c:	18bff62e 	bgeu	r3,r2,143e8 <_gp+0xffff6e68>
        (*ctor) (); 
}
   14410:	e037883a 	mov	sp,fp
   14414:	dfc00117 	ldw	ra,4(sp)
   14418:	df000017 	ldw	fp,0(sp)
   1441c:	dec00204 	addi	sp,sp,8
   14420:	f800283a 	ret

00014424 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14424:	defffd04 	addi	sp,sp,-12
   14428:	dfc00215 	stw	ra,8(sp)
   1442c:	df000115 	stw	fp,4(sp)
   14430:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14434:	00800074 	movhi	r2,1
   14438:	10945a04 	addi	r2,r2,20840
   1443c:	e0bfff15 	stw	r2,-4(fp)
   14440:	00000606 	br	1445c <_do_dtors+0x38>
        (*dtor) (); 
   14444:	e0bfff17 	ldw	r2,-4(fp)
   14448:	10800017 	ldw	r2,0(r2)
   1444c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14450:	e0bfff17 	ldw	r2,-4(fp)
   14454:	10bfff04 	addi	r2,r2,-4
   14458:	e0bfff15 	stw	r2,-4(fp)
   1445c:	e0ffff17 	ldw	r3,-4(fp)
   14460:	00800074 	movhi	r2,1
   14464:	10945b04 	addi	r2,r2,20844
   14468:	18bff62e 	bgeu	r3,r2,14444 <_gp+0xffff6ec4>
        (*dtor) (); 
}
   1446c:	e037883a 	mov	sp,fp
   14470:	dfc00117 	ldw	ra,4(sp)
   14474:	df000017 	ldw	fp,0(sp)
   14478:	dec00204 	addi	sp,sp,8
   1447c:	f800283a 	ret

00014480 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14480:	deffff04 	addi	sp,sp,-4
   14484:	df000015 	stw	fp,0(sp)
   14488:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1448c:	e037883a 	mov	sp,fp
   14490:	df000017 	ldw	fp,0(sp)
   14494:	dec00104 	addi	sp,sp,4
   14498:	f800283a 	ret

0001449c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1449c:	defffe04 	addi	sp,sp,-8
   144a0:	df000115 	stw	fp,4(sp)
   144a4:	df000104 	addi	fp,sp,4
   144a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   144ac:	e0bfff17 	ldw	r2,-4(fp)
   144b0:	10bffe84 	addi	r2,r2,-6
   144b4:	10c00428 	cmpgeui	r3,r2,16
   144b8:	18001a1e 	bne	r3,zero,14524 <alt_exception_cause_generated_bad_addr+0x88>
   144bc:	100690ba 	slli	r3,r2,2
   144c0:	00800074 	movhi	r2,1
   144c4:	10913504 	addi	r2,r2,17620
   144c8:	1885883a 	add	r2,r3,r2
   144cc:	10800017 	ldw	r2,0(r2)
   144d0:	1000683a 	jmp	r2
   144d4:	00014514 	movui	zero,1300
   144d8:	00014514 	movui	zero,1300
   144dc:	00014524 	muli	zero,zero,1300
   144e0:	00014524 	muli	zero,zero,1300
   144e4:	00014524 	muli	zero,zero,1300
   144e8:	00014514 	movui	zero,1300
   144ec:	0001451c 	xori	zero,zero,1300
   144f0:	00014524 	muli	zero,zero,1300
   144f4:	00014514 	movui	zero,1300
   144f8:	00014514 	movui	zero,1300
   144fc:	00014524 	muli	zero,zero,1300
   14500:	00014514 	movui	zero,1300
   14504:	0001451c 	xori	zero,zero,1300
   14508:	00014524 	muli	zero,zero,1300
   1450c:	00014524 	muli	zero,zero,1300
   14510:	00014514 	movui	zero,1300
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   14514:	00800044 	movi	r2,1
   14518:	00000306 	br	14528 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1451c:	0005883a 	mov	r2,zero
   14520:	00000106 	br	14528 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   14524:	0005883a 	mov	r2,zero
  }
}
   14528:	e037883a 	mov	sp,fp
   1452c:	df000017 	ldw	fp,0(sp)
   14530:	dec00104 	addi	sp,sp,4
   14534:	f800283a 	ret

00014538 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14538:	defff804 	addi	sp,sp,-32
   1453c:	dfc00715 	stw	ra,28(sp)
   14540:	df000615 	stw	fp,24(sp)
   14544:	dc000515 	stw	r16,20(sp)
   14548:	df000604 	addi	fp,sp,24
   1454c:	e13ffb15 	stw	r4,-20(fp)
   14550:	e17ffc15 	stw	r5,-16(fp)
   14554:	e1bffd15 	stw	r6,-12(fp)
   14558:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1455c:	e13ffc17 	ldw	r4,-16(fp)
   14560:	e17ffd17 	ldw	r5,-12(fp)
   14564:	e1bffe17 	ldw	r6,-8(fp)
   14568:	00147d40 	call	147d4 <open>
   1456c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   14570:	e0bffa17 	ldw	r2,-24(fp)
   14574:	10002216 	blt	r2,zero,14600 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14578:	04000074 	movhi	r16,1
   1457c:	84150004 	addi	r16,r16,21504
   14580:	e0bffa17 	ldw	r2,-24(fp)
   14584:	1009883a 	mov	r4,r2
   14588:	01400304 	movi	r5,12
   1458c:	0011db00 	call	11db0 <__mulsi3>
   14590:	8085883a 	add	r2,r16,r2
   14594:	10c00017 	ldw	r3,0(r2)
   14598:	e0bffb17 	ldw	r2,-20(fp)
   1459c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   145a0:	04000074 	movhi	r16,1
   145a4:	84150004 	addi	r16,r16,21504
   145a8:	e0bffa17 	ldw	r2,-24(fp)
   145ac:	1009883a 	mov	r4,r2
   145b0:	01400304 	movi	r5,12
   145b4:	0011db00 	call	11db0 <__mulsi3>
   145b8:	10800104 	addi	r2,r2,4
   145bc:	8085883a 	add	r2,r16,r2
   145c0:	10c00017 	ldw	r3,0(r2)
   145c4:	e0bffb17 	ldw	r2,-20(fp)
   145c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   145cc:	04000074 	movhi	r16,1
   145d0:	84150004 	addi	r16,r16,21504
   145d4:	e0bffa17 	ldw	r2,-24(fp)
   145d8:	1009883a 	mov	r4,r2
   145dc:	01400304 	movi	r5,12
   145e0:	0011db00 	call	11db0 <__mulsi3>
   145e4:	10800204 	addi	r2,r2,8
   145e8:	8085883a 	add	r2,r16,r2
   145ec:	10c00017 	ldw	r3,0(r2)
   145f0:	e0bffb17 	ldw	r2,-20(fp)
   145f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   145f8:	e13ffa17 	ldw	r4,-24(fp)
   145fc:	00149340 	call	14934 <alt_release_fd>
  }
} 
   14600:	e6ffff04 	addi	sp,fp,-4
   14604:	dfc00217 	ldw	ra,8(sp)
   14608:	df000117 	ldw	fp,4(sp)
   1460c:	dc000017 	ldw	r16,0(sp)
   14610:	dec00304 	addi	sp,sp,12
   14614:	f800283a 	ret

00014618 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14618:	defffb04 	addi	sp,sp,-20
   1461c:	dfc00415 	stw	ra,16(sp)
   14620:	df000315 	stw	fp,12(sp)
   14624:	df000304 	addi	fp,sp,12
   14628:	e13ffd15 	stw	r4,-12(fp)
   1462c:	e17ffe15 	stw	r5,-8(fp)
   14630:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14634:	01000074 	movhi	r4,1
   14638:	21150304 	addi	r4,r4,21516
   1463c:	e17ffd17 	ldw	r5,-12(fp)
   14640:	01800044 	movi	r6,1
   14644:	01c07fc4 	movi	r7,511
   14648:	00145380 	call	14538 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1464c:	01000074 	movhi	r4,1
   14650:	21150004 	addi	r4,r4,21504
   14654:	e17ffe17 	ldw	r5,-8(fp)
   14658:	000d883a 	mov	r6,zero
   1465c:	01c07fc4 	movi	r7,511
   14660:	00145380 	call	14538 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14664:	01000074 	movhi	r4,1
   14668:	21150604 	addi	r4,r4,21528
   1466c:	e17fff17 	ldw	r5,-4(fp)
   14670:	01800044 	movi	r6,1
   14674:	01c07fc4 	movi	r7,511
   14678:	00145380 	call	14538 <alt_open_fd>
}  
   1467c:	e037883a 	mov	sp,fp
   14680:	dfc00117 	ldw	ra,4(sp)
   14684:	df000017 	ldw	fp,0(sp)
   14688:	dec00204 	addi	sp,sp,8
   1468c:	f800283a 	ret

00014690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14690:	defffe04 	addi	sp,sp,-8
   14694:	dfc00115 	stw	ra,4(sp)
   14698:	df000015 	stw	fp,0(sp)
   1469c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   146a0:	00800074 	movhi	r2,1
   146a4:	10956804 	addi	r2,r2,21920
   146a8:	10800017 	ldw	r2,0(r2)
   146ac:	10000526 	beq	r2,zero,146c4 <alt_get_errno+0x34>
   146b0:	00800074 	movhi	r2,1
   146b4:	10956804 	addi	r2,r2,21920
   146b8:	10800017 	ldw	r2,0(r2)
   146bc:	103ee83a 	callr	r2
   146c0:	00000206 	br	146cc <alt_get_errno+0x3c>
   146c4:	00800074 	movhi	r2,1
   146c8:	10965d04 	addi	r2,r2,22900
}
   146cc:	e037883a 	mov	sp,fp
   146d0:	dfc00117 	ldw	ra,4(sp)
   146d4:	df000017 	ldw	fp,0(sp)
   146d8:	dec00204 	addi	sp,sp,8
   146dc:	f800283a 	ret

000146e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   146e0:	defffb04 	addi	sp,sp,-20
   146e4:	dfc00415 	stw	ra,16(sp)
   146e8:	df000315 	stw	fp,12(sp)
   146ec:	dc000215 	stw	r16,8(sp)
   146f0:	df000304 	addi	fp,sp,12
   146f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   146f8:	e0bffe17 	ldw	r2,-8(fp)
   146fc:	10800217 	ldw	r2,8(r2)
   14700:	10d00034 	orhi	r3,r2,16384
   14704:	e0bffe17 	ldw	r2,-8(fp)
   14708:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1470c:	e03ffd15 	stw	zero,-12(fp)
   14710:	00002306 	br	147a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14714:	04000074 	movhi	r16,1
   14718:	84150004 	addi	r16,r16,21504
   1471c:	e0bffd17 	ldw	r2,-12(fp)
   14720:	1009883a 	mov	r4,r2
   14724:	01400304 	movi	r5,12
   14728:	0011db00 	call	11db0 <__mulsi3>
   1472c:	8085883a 	add	r2,r16,r2
   14730:	10c00017 	ldw	r3,0(r2)
   14734:	e0bffe17 	ldw	r2,-8(fp)
   14738:	10800017 	ldw	r2,0(r2)
   1473c:	1880151e 	bne	r3,r2,14794 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14740:	04000074 	movhi	r16,1
   14744:	84150004 	addi	r16,r16,21504
   14748:	e0bffd17 	ldw	r2,-12(fp)
   1474c:	1009883a 	mov	r4,r2
   14750:	01400304 	movi	r5,12
   14754:	0011db00 	call	11db0 <__mulsi3>
   14758:	10800204 	addi	r2,r2,8
   1475c:	8085883a 	add	r2,r16,r2
   14760:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14764:	10000b0e 	bge	r2,zero,14794 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14768:	e13ffd17 	ldw	r4,-12(fp)
   1476c:	01400304 	movi	r5,12
   14770:	0011db00 	call	11db0 <__mulsi3>
   14774:	1007883a 	mov	r3,r2
   14778:	00800074 	movhi	r2,1
   1477c:	10950004 	addi	r2,r2,21504
   14780:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14784:	e0bffe17 	ldw	r2,-8(fp)
   14788:	18800226 	beq	r3,r2,14794 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1478c:	00bffcc4 	movi	r2,-13
   14790:	00000a06 	br	147bc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14794:	e0bffd17 	ldw	r2,-12(fp)
   14798:	10800044 	addi	r2,r2,1
   1479c:	e0bffd15 	stw	r2,-12(fp)
   147a0:	00800074 	movhi	r2,1
   147a4:	10956704 	addi	r2,r2,21916
   147a8:	10800017 	ldw	r2,0(r2)
   147ac:	1007883a 	mov	r3,r2
   147b0:	e0bffd17 	ldw	r2,-12(fp)
   147b4:	18bfd72e 	bgeu	r3,r2,14714 <_gp+0xffff7194>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   147b8:	0005883a 	mov	r2,zero
}
   147bc:	e6ffff04 	addi	sp,fp,-4
   147c0:	dfc00217 	ldw	ra,8(sp)
   147c4:	df000117 	ldw	fp,4(sp)
   147c8:	dc000017 	ldw	r16,0(sp)
   147cc:	dec00304 	addi	sp,sp,12
   147d0:	f800283a 	ret

000147d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   147d4:	defff604 	addi	sp,sp,-40
   147d8:	dfc00915 	stw	ra,36(sp)
   147dc:	df000815 	stw	fp,32(sp)
   147e0:	df000804 	addi	fp,sp,32
   147e4:	e13ffd15 	stw	r4,-12(fp)
   147e8:	e17ffe15 	stw	r5,-8(fp)
   147ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   147f0:	00bfffc4 	movi	r2,-1
   147f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   147f8:	00bffb44 	movi	r2,-19
   147fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14800:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14804:	e13ffd17 	ldw	r4,-12(fp)
   14808:	01400074 	movhi	r5,1
   1480c:	29556504 	addi	r5,r5,21908
   14810:	0014b700 	call	14b70 <alt_find_dev>
   14814:	e0bff815 	stw	r2,-32(fp)
   14818:	e0bff817 	ldw	r2,-32(fp)
   1481c:	1000051e 	bne	r2,zero,14834 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14820:	e13ffd17 	ldw	r4,-12(fp)
   14824:	0014c000 	call	14c00 <alt_find_file>
   14828:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1482c:	00800044 	movi	r2,1
   14830:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14834:	e0bff817 	ldw	r2,-32(fp)
   14838:	10002b26 	beq	r2,zero,148e8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1483c:	e13ff817 	ldw	r4,-32(fp)
   14840:	0014d140 	call	14d14 <alt_get_fd>
   14844:	e0bff915 	stw	r2,-28(fp)
   14848:	e0bff917 	ldw	r2,-28(fp)
   1484c:	1000030e 	bge	r2,zero,1485c <open+0x88>
    {
      status = index;
   14850:	e0bff917 	ldw	r2,-28(fp)
   14854:	e0bffa15 	stw	r2,-24(fp)
   14858:	00002506 	br	148f0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   1485c:	e13ff917 	ldw	r4,-28(fp)
   14860:	01400304 	movi	r5,12
   14864:	0011db00 	call	11db0 <__mulsi3>
   14868:	1007883a 	mov	r3,r2
   1486c:	00800074 	movhi	r2,1
   14870:	10950004 	addi	r2,r2,21504
   14874:	1885883a 	add	r2,r3,r2
   14878:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1487c:	e0fffe17 	ldw	r3,-8(fp)
   14880:	00900034 	movhi	r2,16384
   14884:	10bfffc4 	addi	r2,r2,-1
   14888:	1886703a 	and	r3,r3,r2
   1488c:	e0bffc17 	ldw	r2,-16(fp)
   14890:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14894:	e0bffb17 	ldw	r2,-20(fp)
   14898:	1000051e 	bne	r2,zero,148b0 <open+0xdc>
   1489c:	e13ffc17 	ldw	r4,-16(fp)
   148a0:	00146e00 	call	146e0 <alt_file_locked>
   148a4:	e0bffa15 	stw	r2,-24(fp)
   148a8:	e0bffa17 	ldw	r2,-24(fp)
   148ac:	10001016 	blt	r2,zero,148f0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   148b0:	e0bff817 	ldw	r2,-32(fp)
   148b4:	10800317 	ldw	r2,12(r2)
   148b8:	10000826 	beq	r2,zero,148dc <open+0x108>
   148bc:	e0bff817 	ldw	r2,-32(fp)
   148c0:	10800317 	ldw	r2,12(r2)
   148c4:	e13ffc17 	ldw	r4,-16(fp)
   148c8:	e17ffd17 	ldw	r5,-12(fp)
   148cc:	e1bffe17 	ldw	r6,-8(fp)
   148d0:	e1ffff17 	ldw	r7,-4(fp)
   148d4:	103ee83a 	callr	r2
   148d8:	00000106 	br	148e0 <open+0x10c>
   148dc:	0005883a 	mov	r2,zero
   148e0:	e0bffa15 	stw	r2,-24(fp)
   148e4:	00000206 	br	148f0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   148e8:	00bffb44 	movi	r2,-19
   148ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   148f0:	e0bffa17 	ldw	r2,-24(fp)
   148f4:	1000090e 	bge	r2,zero,1491c <open+0x148>
  {
    alt_release_fd (index);  
   148f8:	e13ff917 	ldw	r4,-28(fp)
   148fc:	00149340 	call	14934 <alt_release_fd>
    ALT_ERRNO = -status;
   14900:	00146900 	call	14690 <alt_get_errno>
   14904:	1007883a 	mov	r3,r2
   14908:	e0bffa17 	ldw	r2,-24(fp)
   1490c:	0085c83a 	sub	r2,zero,r2
   14910:	18800015 	stw	r2,0(r3)
    return -1;
   14914:	00bfffc4 	movi	r2,-1
   14918:	00000106 	br	14920 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1491c:	e0bff917 	ldw	r2,-28(fp)
}
   14920:	e037883a 	mov	sp,fp
   14924:	dfc00117 	ldw	ra,4(sp)
   14928:	df000017 	ldw	fp,0(sp)
   1492c:	dec00204 	addi	sp,sp,8
   14930:	f800283a 	ret

00014934 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14934:	defffc04 	addi	sp,sp,-16
   14938:	dfc00315 	stw	ra,12(sp)
   1493c:	df000215 	stw	fp,8(sp)
   14940:	dc000115 	stw	r16,4(sp)
   14944:	df000204 	addi	fp,sp,8
   14948:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1494c:	e0bffe17 	ldw	r2,-8(fp)
   14950:	108000d0 	cmplti	r2,r2,3
   14954:	1000111e 	bne	r2,zero,1499c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   14958:	04000074 	movhi	r16,1
   1495c:	84150004 	addi	r16,r16,21504
   14960:	e0bffe17 	ldw	r2,-8(fp)
   14964:	1009883a 	mov	r4,r2
   14968:	01400304 	movi	r5,12
   1496c:	0011db00 	call	11db0 <__mulsi3>
   14970:	10800204 	addi	r2,r2,8
   14974:	8085883a 	add	r2,r16,r2
   14978:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1497c:	04000074 	movhi	r16,1
   14980:	84150004 	addi	r16,r16,21504
   14984:	e0bffe17 	ldw	r2,-8(fp)
   14988:	1009883a 	mov	r4,r2
   1498c:	01400304 	movi	r5,12
   14990:	0011db00 	call	11db0 <__mulsi3>
   14994:	8085883a 	add	r2,r16,r2
   14998:	10000015 	stw	zero,0(r2)
  }
}
   1499c:	e6ffff04 	addi	sp,fp,-4
   149a0:	dfc00217 	ldw	ra,8(sp)
   149a4:	df000117 	ldw	fp,4(sp)
   149a8:	dc000017 	ldw	r16,0(sp)
   149ac:	dec00304 	addi	sp,sp,12
   149b0:	f800283a 	ret

000149b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   149b4:	defffa04 	addi	sp,sp,-24
   149b8:	df000515 	stw	fp,20(sp)
   149bc:	df000504 	addi	fp,sp,20
   149c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149c4:	0005303a 	rdctl	r2,status
   149c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149cc:	e0fffc17 	ldw	r3,-16(fp)
   149d0:	00bfff84 	movi	r2,-2
   149d4:	1884703a 	and	r2,r3,r2
   149d8:	1001703a 	wrctl	status,r2
  
  return context;
   149dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   149e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   149e4:	e0bfff17 	ldw	r2,-4(fp)
   149e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   149ec:	e0bffd17 	ldw	r2,-12(fp)
   149f0:	10800017 	ldw	r2,0(r2)
   149f4:	e0fffd17 	ldw	r3,-12(fp)
   149f8:	18c00117 	ldw	r3,4(r3)
   149fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14a00:	e0bffd17 	ldw	r2,-12(fp)
   14a04:	10800117 	ldw	r2,4(r2)
   14a08:	e0fffd17 	ldw	r3,-12(fp)
   14a0c:	18c00017 	ldw	r3,0(r3)
   14a10:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14a14:	e0bffd17 	ldw	r2,-12(fp)
   14a18:	e0fffd17 	ldw	r3,-12(fp)
   14a1c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14a20:	e0bffd17 	ldw	r2,-12(fp)
   14a24:	e0fffd17 	ldw	r3,-12(fp)
   14a28:	10c00015 	stw	r3,0(r2)
   14a2c:	e0bffb17 	ldw	r2,-20(fp)
   14a30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a34:	e0bffe17 	ldw	r2,-8(fp)
   14a38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14a3c:	e037883a 	mov	sp,fp
   14a40:	df000017 	ldw	fp,0(sp)
   14a44:	dec00104 	addi	sp,sp,4
   14a48:	f800283a 	ret

00014a4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14a4c:	defffb04 	addi	sp,sp,-20
   14a50:	dfc00415 	stw	ra,16(sp)
   14a54:	df000315 	stw	fp,12(sp)
   14a58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14a5c:	d0a00917 	ldw	r2,-32732(gp)
   14a60:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14a64:	d0a10617 	ldw	r2,-31720(gp)
   14a68:	10800044 	addi	r2,r2,1
   14a6c:	d0a10615 	stw	r2,-31720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14a70:	00002e06 	br	14b2c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14a74:	e0bffd17 	ldw	r2,-12(fp)
   14a78:	10800017 	ldw	r2,0(r2)
   14a7c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14a80:	e0bffd17 	ldw	r2,-12(fp)
   14a84:	10800403 	ldbu	r2,16(r2)
   14a88:	10803fcc 	andi	r2,r2,255
   14a8c:	10000426 	beq	r2,zero,14aa0 <alt_tick+0x54>
   14a90:	d0a10617 	ldw	r2,-31720(gp)
   14a94:	1000021e 	bne	r2,zero,14aa0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14a98:	e0bffd17 	ldw	r2,-12(fp)
   14a9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14aa0:	e0bffd17 	ldw	r2,-12(fp)
   14aa4:	10800217 	ldw	r2,8(r2)
   14aa8:	d0e10617 	ldw	r3,-31720(gp)
   14aac:	18801d36 	bltu	r3,r2,14b24 <alt_tick+0xd8>
   14ab0:	e0bffd17 	ldw	r2,-12(fp)
   14ab4:	10800403 	ldbu	r2,16(r2)
   14ab8:	10803fcc 	andi	r2,r2,255
   14abc:	1000191e 	bne	r2,zero,14b24 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14ac0:	e0bffd17 	ldw	r2,-12(fp)
   14ac4:	10800317 	ldw	r2,12(r2)
   14ac8:	e0fffd17 	ldw	r3,-12(fp)
   14acc:	18c00517 	ldw	r3,20(r3)
   14ad0:	1809883a 	mov	r4,r3
   14ad4:	103ee83a 	callr	r2
   14ad8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14adc:	e0bfff17 	ldw	r2,-4(fp)
   14ae0:	1000031e 	bne	r2,zero,14af0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14ae4:	e13ffd17 	ldw	r4,-12(fp)
   14ae8:	00149b40 	call	149b4 <alt_alarm_stop>
   14aec:	00000d06 	br	14b24 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14af0:	e0bffd17 	ldw	r2,-12(fp)
   14af4:	10c00217 	ldw	r3,8(r2)
   14af8:	e0bfff17 	ldw	r2,-4(fp)
   14afc:	1887883a 	add	r3,r3,r2
   14b00:	e0bffd17 	ldw	r2,-12(fp)
   14b04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14b08:	e0bffd17 	ldw	r2,-12(fp)
   14b0c:	10c00217 	ldw	r3,8(r2)
   14b10:	d0a10617 	ldw	r2,-31720(gp)
   14b14:	1880032e 	bgeu	r3,r2,14b24 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   14b18:	e0bffd17 	ldw	r2,-12(fp)
   14b1c:	00c00044 	movi	r3,1
   14b20:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14b24:	e0bffe17 	ldw	r2,-8(fp)
   14b28:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14b2c:	e0fffd17 	ldw	r3,-12(fp)
   14b30:	d0a00904 	addi	r2,gp,-32732
   14b34:	18bfcf1e 	bne	r3,r2,14a74 <_gp+0xffff74f4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14b38:	0001883a 	nop
}
   14b3c:	e037883a 	mov	sp,fp
   14b40:	dfc00117 	ldw	ra,4(sp)
   14b44:	df000017 	ldw	fp,0(sp)
   14b48:	dec00204 	addi	sp,sp,8
   14b4c:	f800283a 	ret

00014b50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14b50:	deffff04 	addi	sp,sp,-4
   14b54:	df000015 	stw	fp,0(sp)
   14b58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14b5c:	000170fa 	wrctl	ienable,zero
}
   14b60:	e037883a 	mov	sp,fp
   14b64:	df000017 	ldw	fp,0(sp)
   14b68:	dec00104 	addi	sp,sp,4
   14b6c:	f800283a 	ret

00014b70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14b70:	defffa04 	addi	sp,sp,-24
   14b74:	dfc00515 	stw	ra,20(sp)
   14b78:	df000415 	stw	fp,16(sp)
   14b7c:	df000404 	addi	fp,sp,16
   14b80:	e13ffe15 	stw	r4,-8(fp)
   14b84:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14b88:	e0bfff17 	ldw	r2,-4(fp)
   14b8c:	10800017 	ldw	r2,0(r2)
   14b90:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14b94:	e13ffe17 	ldw	r4,-8(fp)
   14b98:	0011ef40 	call	11ef4 <strlen>
   14b9c:	10800044 	addi	r2,r2,1
   14ba0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14ba4:	00000d06 	br	14bdc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14ba8:	e0bffc17 	ldw	r2,-16(fp)
   14bac:	10c00217 	ldw	r3,8(r2)
   14bb0:	e0bffd17 	ldw	r2,-12(fp)
   14bb4:	1809883a 	mov	r4,r3
   14bb8:	e17ffe17 	ldw	r5,-8(fp)
   14bbc:	100d883a 	mov	r6,r2
   14bc0:	0014e1c0 	call	14e1c <memcmp>
   14bc4:	1000021e 	bne	r2,zero,14bd0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14bc8:	e0bffc17 	ldw	r2,-16(fp)
   14bcc:	00000706 	br	14bec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14bd0:	e0bffc17 	ldw	r2,-16(fp)
   14bd4:	10800017 	ldw	r2,0(r2)
   14bd8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14bdc:	e0fffc17 	ldw	r3,-16(fp)
   14be0:	e0bfff17 	ldw	r2,-4(fp)
   14be4:	18bff01e 	bne	r3,r2,14ba8 <_gp+0xffff7628>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14be8:	0005883a 	mov	r2,zero
}
   14bec:	e037883a 	mov	sp,fp
   14bf0:	dfc00117 	ldw	ra,4(sp)
   14bf4:	df000017 	ldw	fp,0(sp)
   14bf8:	dec00204 	addi	sp,sp,8
   14bfc:	f800283a 	ret

00014c00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14c00:	defffb04 	addi	sp,sp,-20
   14c04:	dfc00415 	stw	ra,16(sp)
   14c08:	df000315 	stw	fp,12(sp)
   14c0c:	df000304 	addi	fp,sp,12
   14c10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14c14:	00800074 	movhi	r2,1
   14c18:	10956304 	addi	r2,r2,21900
   14c1c:	10800017 	ldw	r2,0(r2)
   14c20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14c24:	00003106 	br	14cec <alt_find_file+0xec>
  {
    len = strlen(next->name);
   14c28:	e0bffd17 	ldw	r2,-12(fp)
   14c2c:	10800217 	ldw	r2,8(r2)
   14c30:	1009883a 	mov	r4,r2
   14c34:	0011ef40 	call	11ef4 <strlen>
   14c38:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14c3c:	e0bffd17 	ldw	r2,-12(fp)
   14c40:	10c00217 	ldw	r3,8(r2)
   14c44:	e0bffe17 	ldw	r2,-8(fp)
   14c48:	10bfffc4 	addi	r2,r2,-1
   14c4c:	1885883a 	add	r2,r3,r2
   14c50:	10800003 	ldbu	r2,0(r2)
   14c54:	10803fcc 	andi	r2,r2,255
   14c58:	1080201c 	xori	r2,r2,128
   14c5c:	10bfe004 	addi	r2,r2,-128
   14c60:	10800bd8 	cmpnei	r2,r2,47
   14c64:	1000031e 	bne	r2,zero,14c74 <alt_find_file+0x74>
    {
      len -= 1;
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	10bfffc4 	addi	r2,r2,-1
   14c70:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14c74:	e0bffe17 	ldw	r2,-8(fp)
   14c78:	e0ffff17 	ldw	r3,-4(fp)
   14c7c:	1885883a 	add	r2,r3,r2
   14c80:	10800003 	ldbu	r2,0(r2)
   14c84:	10803fcc 	andi	r2,r2,255
   14c88:	1080201c 	xori	r2,r2,128
   14c8c:	10bfe004 	addi	r2,r2,-128
   14c90:	10800be0 	cmpeqi	r2,r2,47
   14c94:	1000081e 	bne	r2,zero,14cb8 <alt_find_file+0xb8>
   14c98:	e0bffe17 	ldw	r2,-8(fp)
   14c9c:	e0ffff17 	ldw	r3,-4(fp)
   14ca0:	1885883a 	add	r2,r3,r2
   14ca4:	10800003 	ldbu	r2,0(r2)
   14ca8:	10803fcc 	andi	r2,r2,255
   14cac:	1080201c 	xori	r2,r2,128
   14cb0:	10bfe004 	addi	r2,r2,-128
   14cb4:	10000a1e 	bne	r2,zero,14ce0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   14cb8:	e0bffd17 	ldw	r2,-12(fp)
   14cbc:	10c00217 	ldw	r3,8(r2)
   14cc0:	e0bffe17 	ldw	r2,-8(fp)
   14cc4:	1809883a 	mov	r4,r3
   14cc8:	e17fff17 	ldw	r5,-4(fp)
   14ccc:	100d883a 	mov	r6,r2
   14cd0:	0014e1c0 	call	14e1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14cd4:	1000021e 	bne	r2,zero,14ce0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14cd8:	e0bffd17 	ldw	r2,-12(fp)
   14cdc:	00000806 	br	14d00 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   14ce0:	e0bffd17 	ldw	r2,-12(fp)
   14ce4:	10800017 	ldw	r2,0(r2)
   14ce8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14cec:	e0fffd17 	ldw	r3,-12(fp)
   14cf0:	00800074 	movhi	r2,1
   14cf4:	10956304 	addi	r2,r2,21900
   14cf8:	18bfcb1e 	bne	r3,r2,14c28 <_gp+0xffff76a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   14cfc:	0005883a 	mov	r2,zero
}
   14d00:	e037883a 	mov	sp,fp
   14d04:	dfc00117 	ldw	ra,4(sp)
   14d08:	df000017 	ldw	fp,0(sp)
   14d0c:	dec00204 	addi	sp,sp,8
   14d10:	f800283a 	ret

00014d14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14d14:	defffa04 	addi	sp,sp,-24
   14d18:	dfc00515 	stw	ra,20(sp)
   14d1c:	df000415 	stw	fp,16(sp)
   14d20:	dc000315 	stw	r16,12(sp)
   14d24:	df000404 	addi	fp,sp,16
   14d28:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   14d2c:	00bffa04 	movi	r2,-24
   14d30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14d34:	e03ffc15 	stw	zero,-16(fp)
   14d38:	00002106 	br	14dc0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   14d3c:	04000074 	movhi	r16,1
   14d40:	84150004 	addi	r16,r16,21504
   14d44:	e0bffc17 	ldw	r2,-16(fp)
   14d48:	1009883a 	mov	r4,r2
   14d4c:	01400304 	movi	r5,12
   14d50:	0011db00 	call	11db0 <__mulsi3>
   14d54:	8085883a 	add	r2,r16,r2
   14d58:	10800017 	ldw	r2,0(r2)
   14d5c:	1000151e 	bne	r2,zero,14db4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   14d60:	04000074 	movhi	r16,1
   14d64:	84150004 	addi	r16,r16,21504
   14d68:	e0bffc17 	ldw	r2,-16(fp)
   14d6c:	1009883a 	mov	r4,r2
   14d70:	01400304 	movi	r5,12
   14d74:	0011db00 	call	11db0 <__mulsi3>
   14d78:	8085883a 	add	r2,r16,r2
   14d7c:	e0fffe17 	ldw	r3,-8(fp)
   14d80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14d84:	00800074 	movhi	r2,1
   14d88:	10956704 	addi	r2,r2,21916
   14d8c:	10c00017 	ldw	r3,0(r2)
   14d90:	e0bffc17 	ldw	r2,-16(fp)
   14d94:	1880040e 	bge	r3,r2,14da8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   14d98:	00800074 	movhi	r2,1
   14d9c:	10956704 	addi	r2,r2,21916
   14da0:	e0fffc17 	ldw	r3,-16(fp)
   14da4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   14da8:	e0bffc17 	ldw	r2,-16(fp)
   14dac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   14db0:	00000606 	br	14dcc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14db4:	e0bffc17 	ldw	r2,-16(fp)
   14db8:	10800044 	addi	r2,r2,1
   14dbc:	e0bffc15 	stw	r2,-16(fp)
   14dc0:	e0bffc17 	ldw	r2,-16(fp)
   14dc4:	10800810 	cmplti	r2,r2,32
   14dc8:	103fdc1e 	bne	r2,zero,14d3c <_gp+0xffff77bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14dcc:	e0bffd17 	ldw	r2,-12(fp)
}
   14dd0:	e6ffff04 	addi	sp,fp,-4
   14dd4:	dfc00217 	ldw	ra,8(sp)
   14dd8:	df000117 	ldw	fp,4(sp)
   14ddc:	dc000017 	ldw	r16,0(sp)
   14de0:	dec00304 	addi	sp,sp,12
   14de4:	f800283a 	ret

00014de8 <atexit>:
   14de8:	200b883a 	mov	r5,r4
   14dec:	000d883a 	mov	r6,zero
   14df0:	0009883a 	mov	r4,zero
   14df4:	000f883a 	mov	r7,zero
   14df8:	0014e4c1 	jmpi	14e4c <__register_exitproc>

00014dfc <exit>:
   14dfc:	defffe04 	addi	sp,sp,-8
   14e00:	000b883a 	mov	r5,zero
   14e04:	dc000015 	stw	r16,0(sp)
   14e08:	dfc00115 	stw	ra,4(sp)
   14e0c:	2021883a 	mov	r16,r4
   14e10:	0014f9c0 	call	14f9c <__call_exitprocs>
   14e14:	8009883a 	mov	r4,r16
   14e18:	00151380 	call	15138 <_exit>

00014e1c <memcmp>:
   14e1c:	218d883a 	add	r6,r4,r6
   14e20:	21800826 	beq	r4,r6,14e44 <memcmp+0x28>
   14e24:	20800003 	ldbu	r2,0(r4)
   14e28:	28c00003 	ldbu	r3,0(r5)
   14e2c:	10c00226 	beq	r2,r3,14e38 <memcmp+0x1c>
   14e30:	10c5c83a 	sub	r2,r2,r3
   14e34:	f800283a 	ret
   14e38:	21000044 	addi	r4,r4,1
   14e3c:	29400044 	addi	r5,r5,1
   14e40:	003ff706 	br	14e20 <_gp+0xffff78a0>
   14e44:	0005883a 	mov	r2,zero
   14e48:	f800283a 	ret

00014e4c <__register_exitproc>:
   14e4c:	00800074 	movhi	r2,1
   14e50:	defff904 	addi	sp,sp,-28
   14e54:	10956004 	addi	r2,r2,21888
   14e58:	dcc00315 	stw	r19,12(sp)
   14e5c:	14c00017 	ldw	r19,0(r2)
   14e60:	dc000015 	stw	r16,0(sp)
   14e64:	dd400515 	stw	r21,20(sp)
   14e68:	9c000c17 	ldw	r16,48(r19)
   14e6c:	dd000415 	stw	r20,16(sp)
   14e70:	dc800215 	stw	r18,8(sp)
   14e74:	dc400115 	stw	r17,4(sp)
   14e78:	dfc00615 	stw	ra,24(sp)
   14e7c:	202b883a 	mov	r21,r4
   14e80:	2823883a 	mov	r17,r5
   14e84:	3029883a 	mov	r20,r6
   14e88:	3825883a 	mov	r18,r7
   14e8c:	8000021e 	bne	r16,zero,14e98 <__register_exitproc+0x4c>
   14e90:	9c000d04 	addi	r16,r19,52
   14e94:	9c000c15 	stw	r16,48(r19)
   14e98:	80800117 	ldw	r2,4(r16)
   14e9c:	00c007c4 	movi	r3,31
   14ea0:	1880100e 	bge	r3,r2,14ee4 <__register_exitproc+0x98>
   14ea4:	00800034 	movhi	r2,0
   14ea8:	10800004 	addi	r2,r2,0
   14eac:	1000021e 	bne	r2,zero,14eb8 <__register_exitproc+0x6c>
   14eb0:	00bfffc4 	movi	r2,-1
   14eb4:	00003006 	br	14f78 <__register_exitproc+0x12c>
   14eb8:	01002304 	movi	r4,140
   14ebc:	00000000 	call	0 <__reset-0x10000>
   14ec0:	1021883a 	mov	r16,r2
   14ec4:	103ffa26 	beq	r2,zero,14eb0 <_gp+0xffff7930>
   14ec8:	10000115 	stw	zero,4(r2)
   14ecc:	98800c17 	ldw	r2,48(r19)
   14ed0:	80800015 	stw	r2,0(r16)
   14ed4:	9c000c15 	stw	r16,48(r19)
   14ed8:	80002215 	stw	zero,136(r16)
   14edc:	a800071e 	bne	r21,zero,14efc <__register_exitproc+0xb0>
   14ee0:	00001c06 	br	14f54 <__register_exitproc+0x108>
   14ee4:	a8001b26 	beq	r21,zero,14f54 <__register_exitproc+0x108>
   14ee8:	80802217 	ldw	r2,136(r16)
   14eec:	1000091e 	bne	r2,zero,14f14 <__register_exitproc+0xc8>
   14ef0:	00800034 	movhi	r2,0
   14ef4:	10800004 	addi	r2,r2,0
   14ef8:	103fed26 	beq	r2,zero,14eb0 <_gp+0xffff7930>
   14efc:	01004204 	movi	r4,264
   14f00:	00000000 	call	0 <__reset-0x10000>
   14f04:	103fea26 	beq	r2,zero,14eb0 <_gp+0xffff7930>
   14f08:	10004015 	stw	zero,256(r2)
   14f0c:	10004115 	stw	zero,260(r2)
   14f10:	80802215 	stw	r2,136(r16)
   14f14:	81000117 	ldw	r4,4(r16)
   14f18:	01400044 	movi	r5,1
   14f1c:	2107883a 	add	r3,r4,r4
   14f20:	18c7883a 	add	r3,r3,r3
   14f24:	10c7883a 	add	r3,r2,r3
   14f28:	1d000015 	stw	r20,0(r3)
   14f2c:	290a983a 	sll	r5,r5,r4
   14f30:	11004017 	ldw	r4,256(r2)
   14f34:	2148b03a 	or	r4,r4,r5
   14f38:	11004015 	stw	r4,256(r2)
   14f3c:	1c802015 	stw	r18,128(r3)
   14f40:	00c00084 	movi	r3,2
   14f44:	a8c0031e 	bne	r21,r3,14f54 <__register_exitproc+0x108>
   14f48:	10c04117 	ldw	r3,260(r2)
   14f4c:	194ab03a 	or	r5,r3,r5
   14f50:	11404115 	stw	r5,260(r2)
   14f54:	80800117 	ldw	r2,4(r16)
   14f58:	10c00044 	addi	r3,r2,1
   14f5c:	10800084 	addi	r2,r2,2
   14f60:	1085883a 	add	r2,r2,r2
   14f64:	1085883a 	add	r2,r2,r2
   14f68:	80c00115 	stw	r3,4(r16)
   14f6c:	80a1883a 	add	r16,r16,r2
   14f70:	84400015 	stw	r17,0(r16)
   14f74:	0005883a 	mov	r2,zero
   14f78:	dfc00617 	ldw	ra,24(sp)
   14f7c:	dd400517 	ldw	r21,20(sp)
   14f80:	dd000417 	ldw	r20,16(sp)
   14f84:	dcc00317 	ldw	r19,12(sp)
   14f88:	dc800217 	ldw	r18,8(sp)
   14f8c:	dc400117 	ldw	r17,4(sp)
   14f90:	dc000017 	ldw	r16,0(sp)
   14f94:	dec00704 	addi	sp,sp,28
   14f98:	f800283a 	ret

00014f9c <__call_exitprocs>:
   14f9c:	00800074 	movhi	r2,1
   14fa0:	10956004 	addi	r2,r2,21888
   14fa4:	10800017 	ldw	r2,0(r2)
   14fa8:	defff304 	addi	sp,sp,-52
   14fac:	ddc00a15 	stw	r23,40(sp)
   14fb0:	d8800015 	stw	r2,0(sp)
   14fb4:	05c00034 	movhi	r23,0
   14fb8:	10800c04 	addi	r2,r2,48
   14fbc:	dc800515 	stw	r18,20(sp)
   14fc0:	dfc00c15 	stw	ra,48(sp)
   14fc4:	df000b15 	stw	fp,44(sp)
   14fc8:	dd800915 	stw	r22,36(sp)
   14fcc:	dd400815 	stw	r21,32(sp)
   14fd0:	dd000715 	stw	r20,28(sp)
   14fd4:	dcc00615 	stw	r19,24(sp)
   14fd8:	dc400415 	stw	r17,16(sp)
   14fdc:	dc000315 	stw	r16,12(sp)
   14fe0:	d9000115 	stw	r4,4(sp)
   14fe4:	2825883a 	mov	r18,r5
   14fe8:	d8800215 	stw	r2,8(sp)
   14fec:	bdc00004 	addi	r23,r23,0
   14ff0:	d8800017 	ldw	r2,0(sp)
   14ff4:	dc400217 	ldw	r17,8(sp)
   14ff8:	14c00c17 	ldw	r19,48(r2)
   14ffc:	98004226 	beq	r19,zero,15108 <__call_exitprocs+0x16c>
   15000:	9c000117 	ldw	r16,4(r19)
   15004:	00900034 	movhi	r2,16384
   15008:	10bfffc4 	addi	r2,r2,-1
   1500c:	9d002217 	ldw	r20,136(r19)
   15010:	857fffc4 	addi	r21,r16,-1
   15014:	80a1883a 	add	r16,r16,r2
   15018:	8421883a 	add	r16,r16,r16
   1501c:	8421883a 	add	r16,r16,r16
   15020:	a42d883a 	add	r22,r20,r16
   15024:	84000204 	addi	r16,r16,8
   15028:	9c21883a 	add	r16,r19,r16
   1502c:	a8002616 	blt	r21,zero,150c8 <__call_exitprocs+0x12c>
   15030:	90000326 	beq	r18,zero,15040 <__call_exitprocs+0xa4>
   15034:	a0002026 	beq	r20,zero,150b8 <__call_exitprocs+0x11c>
   15038:	b1002017 	ldw	r4,128(r22)
   1503c:	24801e1e 	bne	r4,r18,150b8 <__call_exitprocs+0x11c>
   15040:	99000117 	ldw	r4,4(r19)
   15044:	82000017 	ldw	r8,0(r16)
   15048:	213fffc4 	addi	r4,r4,-1
   1504c:	a900021e 	bne	r21,r4,15058 <__call_exitprocs+0xbc>
   15050:	9d400115 	stw	r21,4(r19)
   15054:	00000106 	br	1505c <__call_exitprocs+0xc0>
   15058:	80000015 	stw	zero,0(r16)
   1505c:	40001626 	beq	r8,zero,150b8 <__call_exitprocs+0x11c>
   15060:	9f000117 	ldw	fp,4(r19)
   15064:	a0000526 	beq	r20,zero,1507c <__call_exitprocs+0xe0>
   15068:	00800044 	movi	r2,1
   1506c:	1552983a 	sll	r9,r2,r21
   15070:	a1404017 	ldw	r5,256(r20)
   15074:	494a703a 	and	r5,r9,r5
   15078:	2800021e 	bne	r5,zero,15084 <__call_exitprocs+0xe8>
   1507c:	403ee83a 	callr	r8
   15080:	00000906 	br	150a8 <__call_exitprocs+0x10c>
   15084:	a1004117 	ldw	r4,260(r20)
   15088:	4908703a 	and	r4,r9,r4
   1508c:	2000041e 	bne	r4,zero,150a0 <__call_exitprocs+0x104>
   15090:	d9000117 	ldw	r4,4(sp)
   15094:	b1400017 	ldw	r5,0(r22)
   15098:	403ee83a 	callr	r8
   1509c:	00000206 	br	150a8 <__call_exitprocs+0x10c>
   150a0:	b1000017 	ldw	r4,0(r22)
   150a4:	403ee83a 	callr	r8
   150a8:	99000117 	ldw	r4,4(r19)
   150ac:	e13fd01e 	bne	fp,r4,14ff0 <_gp+0xffff7a70>
   150b0:	89000017 	ldw	r4,0(r17)
   150b4:	24ffce1e 	bne	r4,r19,14ff0 <_gp+0xffff7a70>
   150b8:	ad7fffc4 	addi	r21,r21,-1
   150bc:	b5bfff04 	addi	r22,r22,-4
   150c0:	843fff04 	addi	r16,r16,-4
   150c4:	003fd906 	br	1502c <_gp+0xffff7aac>
   150c8:	b8000f26 	beq	r23,zero,15108 <__call_exitprocs+0x16c>
   150cc:	99400117 	ldw	r5,4(r19)
   150d0:	99000017 	ldw	r4,0(r19)
   150d4:	2800091e 	bne	r5,zero,150fc <__call_exitprocs+0x160>
   150d8:	20000826 	beq	r4,zero,150fc <__call_exitprocs+0x160>
   150dc:	89000015 	stw	r4,0(r17)
   150e0:	a0000226 	beq	r20,zero,150ec <__call_exitprocs+0x150>
   150e4:	a009883a 	mov	r4,r20
   150e8:	00000000 	call	0 <__reset-0x10000>
   150ec:	9809883a 	mov	r4,r19
   150f0:	00000000 	call	0 <__reset-0x10000>
   150f4:	8cc00017 	ldw	r19,0(r17)
   150f8:	003fc006 	br	14ffc <_gp+0xffff7a7c>
   150fc:	9823883a 	mov	r17,r19
   15100:	2027883a 	mov	r19,r4
   15104:	003fbd06 	br	14ffc <_gp+0xffff7a7c>
   15108:	dfc00c17 	ldw	ra,48(sp)
   1510c:	df000b17 	ldw	fp,44(sp)
   15110:	ddc00a17 	ldw	r23,40(sp)
   15114:	dd800917 	ldw	r22,36(sp)
   15118:	dd400817 	ldw	r21,32(sp)
   1511c:	dd000717 	ldw	r20,28(sp)
   15120:	dcc00617 	ldw	r19,24(sp)
   15124:	dc800517 	ldw	r18,20(sp)
   15128:	dc400417 	ldw	r17,16(sp)
   1512c:	dc000317 	ldw	r16,12(sp)
   15130:	dec00d04 	addi	sp,sp,52
   15134:	f800283a 	ret

00015138 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15138:	defffd04 	addi	sp,sp,-12
   1513c:	df000215 	stw	fp,8(sp)
   15140:	df000204 	addi	fp,sp,8
   15144:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15148:	0001883a 	nop
   1514c:	e0bfff17 	ldw	r2,-4(fp)
   15150:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15154:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15158:	10000226 	beq	r2,zero,15164 <_exit+0x2c>
    ALT_SIM_FAIL();
   1515c:	002af070 	cmpltui	zero,zero,43969
   15160:	00000106 	br	15168 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15164:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15168:	003fff06 	br	15168 <_gp+0xffff7be8>
